{"ast":null,"code":"var _jsxFileName = \"C:\\\\AUTOLAWN\\\\autolawn-frontend\\\\src\\\\components\\\\CustomerMap.js\",\n  _s = $RefreshSig$();\n// components/CustomerMap.js\n\nimport React, { useEffect, useRef } from 'react';\nimport { Loader } from '@googlemaps/js-api-loader';\n/* global google */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomerMap = ({\n  routes\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  useEffect(() => {\n    const loader = new Loader({\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      version: \"weekly\"\n    });\n    loader.load().then(() => {\n      const map = new google.maps.Map(mapRef.current, {\n        center: {\n          lat: 0,\n          lng: 0\n        },\n        zoom: 2\n      });\n      const bounds = new google.maps.LatLngBounds();\n      routes.forEach((route, routeIndex) => {\n        const routeCoordinates = route.jobs.map(job => ({\n          lat: job.customer.address.lat,\n          lng: job.customer.address.lng\n        }));\n        const routePath = new google.maps.Polyline({\n          path: routeCoordinates,\n          geodesic: true,\n          strokeColor: getRouteColor(routeIndex),\n          strokeOpacity: 1.0,\n          strokeWeight: 2\n        });\n        routePath.setMap(map);\n        route.jobs.forEach((job, jobIndex) => {\n          const position = new google.maps.LatLng(job.customer.address.lat, job.customer.address.lng);\n          const marker = new google.maps.Marker({\n            position: position,\n            map: map,\n            title: `${job.title} - ${job.customer.name}`,\n            label: `${routeIndex + 1}.${jobIndex + 1}`\n          });\n          bounds.extend(position);\n          const infoWindow = new google.maps.InfoWindow({\n            content: `\n              <div>\n                <h3>${job.title}</h3>\n                <p>Customer: ${job.customer.name}</p>\n                <p>Address: ${job.customer.address.street}, ${job.customer.address.city}</p>\n                <p>Scheduled: ${new Date(job.scheduledDate).toLocaleString()}</p>\n              </div>\n            `\n          });\n          marker.addListener('click', () => {\n            infoWindow.open(map, marker);\n          });\n        });\n      });\n      if (!bounds.isEmpty()) {\n        map.fitBounds(bounds);\n      }\n    });\n  }, [routes]);\n  const getRouteColor = index => {\n    const colors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF', '#00FFFF'];\n    return colors[index % colors.length];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    style: {\n      width: '100%',\n      height: '100%'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 10\n  }, this);\n};\n_s(CustomerMap, \"9mn7MMe4fPaZ50ApsOpRWF2HbFg=\");\n_c = CustomerMap;\nexport default CustomerMap;\nvar _c;\n$RefreshReg$(_c, \"CustomerMap\");","map":{"version":3,"names":["React","useEffect","useRef","Loader","jsxDEV","_jsxDEV","CustomerMap","routes","_s","mapRef","loader","apiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","version","load","then","map","google","maps","Map","current","center","lat","lng","zoom","bounds","LatLngBounds","forEach","route","routeIndex","routeCoordinates","jobs","job","customer","address","routePath","Polyline","path","geodesic","strokeColor","getRouteColor","strokeOpacity","strokeWeight","setMap","jobIndex","position","LatLng","marker","Marker","title","name","label","extend","infoWindow","InfoWindow","content","street","city","Date","scheduledDate","toLocaleString","addListener","open","isEmpty","fitBounds","index","colors","length","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/components/CustomerMap.js"],"sourcesContent":["// components/CustomerMap.js\r\n\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { Loader } from '@googlemaps/js-api-loader';\r\n/* global google */\r\nconst CustomerMap = ({ routes }) => {\r\n  const mapRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const loader = new Loader({\r\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n      version: \"weekly\",\r\n    });\r\n\r\n    loader.load().then(() => {\r\n      const map = new google.maps.Map(mapRef.current, {\r\n        center: { lat: 0, lng: 0 },\r\n        zoom: 2,\r\n      });\r\n\r\n      const bounds = new google.maps.LatLngBounds();\r\n\r\n      routes.forEach((route, routeIndex) => {\r\n        const routeCoordinates = route.jobs.map(job => ({\r\n          lat: job.customer.address.lat,\r\n          lng: job.customer.address.lng\r\n        }));\r\n\r\n        const routePath = new google.maps.Polyline({\r\n          path: routeCoordinates,\r\n          geodesic: true,\r\n          strokeColor: getRouteColor(routeIndex),\r\n          strokeOpacity: 1.0,\r\n          strokeWeight: 2\r\n        });\r\n\r\n        routePath.setMap(map);\r\n\r\n        route.jobs.forEach((job, jobIndex) => {\r\n          const position = new google.maps.LatLng(job.customer.address.lat, job.customer.address.lng);\r\n          const marker = new google.maps.Marker({\r\n            position: position,\r\n            map: map,\r\n            title: `${job.title} - ${job.customer.name}`,\r\n            label: `${routeIndex + 1}.${jobIndex + 1}`\r\n          });\r\n\r\n          bounds.extend(position);\r\n\r\n          const infoWindow = new google.maps.InfoWindow({\r\n            content: `\r\n              <div>\r\n                <h3>${job.title}</h3>\r\n                <p>Customer: ${job.customer.name}</p>\r\n                <p>Address: ${job.customer.address.street}, ${job.customer.address.city}</p>\r\n                <p>Scheduled: ${new Date(job.scheduledDate).toLocaleString()}</p>\r\n              </div>\r\n            `\r\n          });\r\n\r\n          marker.addListener('click', () => {\r\n            infoWindow.open(map, marker);\r\n          });\r\n        });\r\n      });\r\n\r\n      if (!bounds.isEmpty()) {\r\n        map.fitBounds(bounds);\r\n      }\r\n    });\r\n  }, [routes]);\r\n\r\n  const getRouteColor = (index) => {\r\n    const colors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF', '#00FFFF'];\r\n    return colors[index % colors.length];\r\n  };\r\n\r\n  return <div ref={mapRef} style={{ width: '100%', height: '100%' }}></div>;\r\n};\r\n\r\nexport default CustomerMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}