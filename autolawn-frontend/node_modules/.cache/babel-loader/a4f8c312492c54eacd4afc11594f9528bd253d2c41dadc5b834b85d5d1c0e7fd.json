{"ast":null,"code":"var _jsxFileName = \"C:\\\\AUTOLAWN\\\\autolawn-frontend\\\\src\\\\pages\\\\BuildRoutes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ChevronLeftIcon, ChevronRightIcon, PlusIcon, TrashIcon, ChevronDownIcon, ChevronUpIcon } from '@heroicons/react/24/outline';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { CheckIcon } from '@heroicons/react/24/solid';\nimport { API_BASE_URL, DAYS_OF_WEEK, defaultRoutes, validateRoutesStructure, fetchWithAuth } from '../components/utils';\nimport Header from '../components/Header';\nimport debounce from 'lodash/debounce';\nimport { ClipLoader } from 'react-spinners';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BuildRoutes = () => {\n  _s();\n  const [routes, setRoutes] = useState(defaultRoutes);\n  const [jobPool, setJobPool] = useState([]);\n  const [selectedDay, setSelectedDay] = useState(DAYS_OF_WEEK[0]);\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const [visibleRoutesRange, setVisibleRoutesRange] = useState({\n    start: 0,\n    end: 3\n  });\n  const [expandedJobs, setExpandedJobs] = useState({});\n  const [selectedJobs, setSelectedJobs] = useState([]);\n  const [employees, setEmployees] = useState([]);\n  const [crews, setCrews] = useState([]);\n  const initializeData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const [fetchedRoutesResponse, fetchedJobsResponse, fetchedEmployeesResponse, fetchedCrewsResponse] = await Promise.all([fetchWithAuth('/routes'), fetchWithAuth('/routes/jobs/available'), fetchWithAuth('/employees'), fetchWithAuth('/crews')]);\n      const fetchedRoutes = (fetchedRoutesResponse === null || fetchedRoutesResponse === void 0 ? void 0 : fetchedRoutesResponse.routes) || defaultRoutes;\n      let fetchedJobs = fetchedJobsResponse || [];\n      const fetchedEmployees = fetchedEmployeesResponse || [];\n      const fetchedCrews = fetchedCrewsResponse || [];\n      const validatedRoutes = validateRoutesStructure(fetchedRoutes);\n\n      // Filter bi-weekly jobs based on last service date\n      const now = new Date();\n      fetchedJobs = fetchedJobs.filter(job => {\n        if (job.recurrencePattern === 'Bi-weekly' && job.lastServiceDate) {\n          const lastServiceDate = new Date(job.lastServiceDate);\n          const daysSinceLastService = (now - lastServiceDate) / (1000 * 60 * 60 * 24); // Days since last service\n          return daysSinceLastService > 7; // Only include jobs where last service was more than 7 days ago\n        }\n        return true;\n      });\n      setRoutes(validatedRoutes);\n      setJobPool(fetchedJobs);\n      setEmployees(fetchedEmployees);\n      setCrews(fetchedCrews);\n    } catch (err) {\n      console.error('Error fetching data:', err);\n      setError('Failed to load routes, jobs, employees, and crews. Please refresh the page.');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    initializeData();\n  }, [initializeData]);\n  const saveRoutes = useCallback(async (updatedRoutes = routes) => {\n    setSaving(true);\n    try {\n      const routesToSave = Object.entries(updatedRoutes).reduce((acc, [day, dayRoutes]) => {\n        acc[day] = dayRoutes.map(route => {\n          var _route$employee, _route$crew;\n          return {\n            index: route.index,\n            jobs: route.jobs.map(job => typeof job === 'string' ? job : job._id),\n            employee: (_route$employee = route.employee) === null || _route$employee === void 0 ? void 0 : _route$employee._id,\n            crew: (_route$crew = route.crew) === null || _route$crew === void 0 ? void 0 : _route$crew._id\n          };\n        });\n        return acc;\n      }, {});\n      await fetchWithAuth('/routes', 'PUT', {\n        routes: routesToSave\n      });\n      console.log('Routes saved successfully:', routesToSave);\n    } catch (err) {\n      console.error('Error saving routes:', err);\n      setError('Failed to save routes. Please try again.');\n    } finally {\n      setSaving(false);\n    }\n  }, [routes]);\n  const debouncedSaveRoutes = useCallback(debounce(saveRoutes, 1000), [saveRoutes]);\n  const onDragEnd = useCallback(result => {\n    const {\n      source,\n      destination\n    } = result;\n    if (!destination) {\n      console.log(\"Drag operation cancelled or no destination found.\");\n      return;\n    }\n    console.log(\"Drag started from:\", source.droppableId, \"to\", destination.droppableId);\n    console.log(\"Before moving jobs:\", {\n      jobPool,\n      routes\n    });\n    setRoutes(prevRoutes => {\n      const updatedRoutes = {\n        ...prevRoutes\n      };\n      const sourceId = source.droppableId.split('-');\n      const destId = destination.droppableId.split('-');\n      const sourceRouteIndex = sourceId[0] === 'route' ? parseInt(sourceId[1], 10) : null;\n      const destRouteIndex = destId[0] === 'route' ? parseInt(destId[1], 10) : null;\n\n      // Moving from job pool to a route\n      if (source.droppableId === 'jobPool-0' && destRouteIndex !== null) {\n        console.log(\"Moving jobs from job pool to route:\", destRouteIndex);\n        const selectedJobsToMove = selectedJobs.length > 0 ? jobPool.filter(job => selectedJobs.includes(job._id)) : [jobPool[source.index]]; // Only the single dragged job\n\n        console.log(\"Selected jobs to move from job pool:\", selectedJobsToMove);\n\n        // Add jobs to the route\n        selectedJobsToMove.forEach((job, index) => {\n          updatedRoutes[selectedDay][destRouteIndex].jobs.splice(destination.index + index, 0, job);\n          console.log(`Job added to route ${destRouteIndex}:`, job);\n        });\n\n        // Remove moved jobs from job pool\n        const updatedJobPool = jobPool.filter(job => !selectedJobs.includes(job._id));\n        if (selectedJobs.length === 0) {\n          // If no jobs were selected, remove the single dragged job from the pool\n          updatedJobPool.splice(source.index, 1);\n        }\n        setJobPool(updatedJobPool);\n        console.log(\"Updated job pool after move:\", updatedJobPool);\n      }\n\n      // Moving between routes or within the same route\n      if (sourceRouteIndex !== null && destRouteIndex !== null) {\n        console.log(`Moving jobs from route ${sourceRouteIndex} to route ${destRouteIndex}`);\n        selectedJobs.forEach((jobId, index) => {\n          // Find job in the source route\n          const jobIndex = updatedRoutes[selectedDay][sourceRouteIndex].jobs.findIndex(job => job._id === jobId);\n          const [removedJob] = updatedRoutes[selectedDay][sourceRouteIndex].jobs.splice(jobIndex, 1);\n          console.log(`Removed job ${jobId} from route ${sourceRouteIndex}`, removedJob);\n\n          // Add job to destination route\n          if (removedJob) {\n            updatedRoutes[selectedDay][destRouteIndex].jobs.splice(destination.index, 0, removedJob);\n            console.log(`Added job ${jobId} to route ${destRouteIndex}`);\n          }\n        });\n      }\n      console.log(\"After moving jobs:\", {\n        jobPool,\n        updatedRoutes\n      });\n      setSelectedJobs([]); // Clear selected jobs after moving\n      return updatedRoutes;\n    });\n    debouncedSaveRoutes();\n  }, [jobPool, selectedJobs, selectedDay, debouncedSaveRoutes]);\n  const addNewRoute = useCallback(async () => {\n    const newRouteState = {\n      ...routes,\n      [selectedDay]: [...routes[selectedDay], {\n        index: routes[selectedDay].length,\n        jobs: []\n      }]\n    };\n    setRoutes(newRouteState);\n    await saveRoutes(newRouteState);\n  }, [routes, selectedDay, saveRoutes]);\n  const deleteRoute = useCallback(async routeIndex => {\n    try {\n      setRoutes(prevRoutes => {\n        const updatedRoutes = {\n          ...prevRoutes\n        };\n        const deletedRoute = updatedRoutes[selectedDay].splice(routeIndex, 1)[0];\n        setJobPool(prevJobPool => [...prevJobPool, ...deletedRoute.jobs]);\n        updatedRoutes[selectedDay] = updatedRoutes[selectedDay].map((route, idx) => ({\n          ...route,\n          index: idx\n        }));\n        return updatedRoutes;\n      });\n      await fetchWithAuth(`/routes/${selectedDay}/${routeIndex}`, 'DELETE');\n      await saveRoutes(); // Ensure routes are saved to keep consistent state\n    } catch (error) {\n      console.error('Error deleting route:', error);\n      setError('Failed to delete route. Please try again.');\n    }\n  }, [selectedDay, saveRoutes]);\n  const removeJobFromRoute = async (routeIndex, jobIndex) => {\n    try {\n      setRoutes(prevRoutes => {\n        const updatedRoutes = {\n          ...prevRoutes\n        };\n        const removedJob = updatedRoutes[selectedDay][routeIndex].jobs.splice(jobIndex, 1)[0];\n        setJobPool(prevJobPool => [...prevJobPool, removedJob]);\n        return updatedRoutes;\n      });\n      await fetchWithAuth(`/routes/${selectedDay}/${routeIndex}`, 'PUT', {\n        index: routeIndex,\n        jobs: routes[selectedDay][routeIndex].jobs\n      });\n      await saveRoutes();\n    } catch (error) {\n      console.error('Error removing job from route:', error);\n      setError('Failed to remove job from route. Please try again.');\n    }\n  };\n  const [assigningRoutes, setAssigningRoutes] = useState({});\n  const assignRoute = async (routeIndex, assigneeId) => {\n    const [type, id] = assigneeId.split('-');\n    setAssigningRoutes(prev => ({\n      ...prev,\n      [routeIndex]: true\n    }));\n    try {\n      console.log(`Assigning ${type} with ID: ${id} to route ${routeIndex} for day ${selectedDay}`);\n\n      // Sending the appropriate payload to the API\n      const response = await fetchWithAuth(`/routes/${selectedDay}/${routeIndex}/assign`, 'PUT', {\n        [type]: id\n      });\n\n      // Since fetchWithAuth returns parsed data directly, no need to check response.ok or status\n      console.log('Response from server:', response);\n\n      // Ensure the response contains the expected fields, otherwise consider it an error\n      if (!response || !response._id) {\n        throw new Error('Invalid response format');\n      }\n\n      // Assuming the response is valid and contains the updated route\n      const updatedRoute = response; // Use the response directly since fetchWithAuth returns the data\n      setRoutes(prevRoutes => {\n        const updatedDayRoutes = prevRoutes[selectedDay].map(route => {\n          if (route.index === routeIndex) {\n            var _employees$find, _crews$find;\n            return {\n              ...route,\n              employee: type === 'employee' ? {\n                _id: id,\n                name: (_employees$find = employees.find(e => e._id === id)) === null || _employees$find === void 0 ? void 0 : _employees$find.name\n              } : null,\n              crew: type === 'crew' ? {\n                _id: id,\n                name: (_crews$find = crews.find(c => c._id === id)) === null || _crews$find === void 0 ? void 0 : _crews$find.name\n              } : null\n            };\n          }\n          return route;\n        });\n        return {\n          ...prevRoutes,\n          [selectedDay]: updatedDayRoutes\n        };\n      });\n      console.log(`Route assigned successfully: day ${selectedDay}, index ${routeIndex}, ${type}: ${id}`);\n    } catch (error) {\n      console.error('Error assigning route:', error);\n      setError('Failed to assign route. Please try again.');\n    } finally {\n      setAssigningRoutes(prev => ({\n        ...prev,\n        [routeIndex]: false\n      }));\n    }\n  };\n  const handleJobSelection = job => {\n    setSelectedJobs(prevSelectedJobs => {\n      if (prevSelectedJobs.includes(job._id)) {\n        return prevSelectedJobs.filter(id => id !== job._id);\n      } else {\n        return [...prevSelectedJobs, job._id];\n      }\n    });\n  };\n  const toggleJobExpansion = jobId => {\n    setExpandedJobs(prev => ({\n      ...prev,\n      [jobId]: !prev[jobId]\n    }));\n  };\n  const changeSelectedDay = direction => {\n    setSelectedDay(prevDay => {\n      const currentIndex = DAYS_OF_WEEK.indexOf(prevDay);\n      const newIndex = (currentIndex + direction + DAYS_OF_WEEK.length) % DAYS_OF_WEEK.length;\n      return DAYS_OF_WEEK[newIndex];\n    });\n    setVisibleRoutesRange({\n      start: 0,\n      end: 3\n    });\n  };\n  const cycleVisibleRoutes = direction => {\n    setVisibleRoutesRange(prevRange => {\n      const totalRoutes = routes[selectedDay].length;\n      const newStart = (prevRange.start + direction + totalRoutes) % totalRoutes;\n      const newEnd = Math.min(newStart + 3, totalRoutes);\n      return {\n        start: newStart,\n        end: newEnd\n      };\n    });\n  };\n  const renderLegend = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-2 p-2 bg-gray-800 rounded-lg text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"font-bold mb-2\",\n      children: \"Job Color Legend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"space-y-1\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"w-4 h-4 inline-block bg-green-600 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), \" One-time job\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"w-4 h-4 inline-block bg-blue-600 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), \" Weekly recurring job\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"w-4 h-4 inline-block bg-yellow-600 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this), \" Bi-weekly recurring job\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"w-4 h-4 inline-block bg-purple-600 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this), \" Monthly recurring job\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 5\n  }, this);\n  const handleCompleteJob = async jobId => {\n    try {\n      await fetchWithAuth(`/jobs/${jobId}/complete`, 'POST', {}); // Mark job as completed via API\n      setJobPool(prevJobs => prevJobs.filter(j => j._id !== jobId)); // Remove job from pool after completion\n      // Optionally, show a success message here\n    } catch (error) {\n      console.error('Error completing job:', error);\n      setError('Failed to complete job. Please try again.');\n    }\n  };\n  const renderJobCard = (job, isInRoute = false, routeIndex, jobIndex) => {\n    var _job$customer, _job$location;\n    if (!job) return null; // Safeguard against undefined jobs\n\n    const isExpanded = expandedJobs[job._id];\n    const customerName = ((_job$customer = job.customer) === null || _job$customer === void 0 ? void 0 : _job$customer.name) || 'No Customer';\n    const isSelected = selectedJobs.includes(job._id);\n    const lastServiceDate = job.lastServiceDate ? new Date(job.lastServiceDate).toLocaleDateString() : 'No Service Date';\n    const jobColors = {\n      oneTime: 'bg-green-600 hover:bg-green-700',\n      weekly: 'bg-blue-600 hover:bg-blue-700',\n      biWeekly: 'bg-yellow-600 hover:bg-yellow-700',\n      monthly: 'bg-purple-600 hover:bg-purple-700'\n    };\n    const jobStyle = {\n      backgroundColor: job.isRecurring ? job.recurrencePattern === 'Weekly' ? jobColors.weekly : job.recurrencePattern === 'Bi-weekly' ? jobColors.biWeekly : job.recurrencePattern === 'Monthly' ? jobColors.monthly : jobColors.recurring : jobColors.oneTime,\n      border: isSelected ? '2px solid yellow' : 'none'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `p-2 rounded-md shadow-md ${jobStyle.backgroundColor}`,\n      style: {\n        border: jobStyle.border\n      },\n      onClick: () => handleJobSelection(job),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-bold text-white\",\n          children: customerName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2\",\n          children: [isInRoute && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => {\n                e.stopPropagation();\n                handleCompleteJob(job._id);\n              } // Complete job button\n              ,\n              className: \"text-green-500 hover:text-green-700\",\n              children: /*#__PURE__*/_jsxDEV(CheckIcon, {\n                className: \"h-5 w-5\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => {\n                e.stopPropagation();\n                removeJobFromRoute(routeIndex, jobIndex);\n              },\n              className: \"text-red-500 hover:text-red-700\",\n              children: /*#__PURE__*/_jsxDEV(TrashIcon, {\n                className: \"h-5 w-5\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 399,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => {\n              e.stopPropagation();\n              toggleJobExpansion(job._id);\n            },\n            children: isExpanded ? /*#__PURE__*/_jsxDEV(ChevronUpIcon, {\n              className: \"h-5 w-5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(ChevronDownIcon, {\n              className: \"h-5 w-5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 69\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this), isExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-300\",\n          children: job.title || 'No Title'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-400\",\n          children: ((_job$location = job.location) === null || _job$location === void 0 ? void 0 : _job$location.address) || 'No Address'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-400\",\n          children: [\"Revenue: $\", job.cost || 'No Price']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-400\",\n          children: [\"Type: \", job.isRecurring ? 'Recurring' : 'One-time']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-400\",\n          children: [\"Last Service Date: \", lastServiceDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }, this);\n  };\n  const handleCompleteRoute = async routeIndex => {\n    try {\n      const routeJobs = routes[selectedDay][routeIndex].jobs.map(job => job._id); // Get all job IDs in route\n      await Promise.all(routeJobs.map(jobId => fetchWithAuth(`/jobs/${jobId}/complete`, 'POST', {})) // Complete all jobs in the route\n      );\n      // Optionally, show success message here\n    } catch (error) {\n      console.error('Error completing route:', error);\n      setError('Failed to complete route. Please try again.');\n    }\n  };\n  const renderDroppableArea = (id, jobs, isJobPool = false) => {\n    const routeIndex = parseInt(id.split('-')[1], 10);\n    const route = routes[selectedDay][routeIndex];\n    return /*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: id,\n      children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: provided.innerRef,\n        ...provided.droppableProps,\n        className: `bg-gray-800 p-4 rounded-lg min-h-[200px] ${isJobPool ? 'grid grid-cols-3 gap-4' : 'space-y-2'}`,\n        children: [!isJobPool && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4 flex justify-between items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"w-full p-2 bg-gray-700 text-white rounded\",\n            onChange: e => assignRoute(routeIndex, e.target.value),\n            value: route.employee ? `employee-${route.employee._id}` : route.crew ? `crew-${route.crew._id}` : '',\n            disabled: assigningRoutes[routeIndex],\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Assign to...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n              label: \"Employees\",\n              children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: `employee-${employee._id}`,\n                children: employee.name\n              }, employee._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 459,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n              label: \"Crews\",\n              children: crews.map(crew => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: `crew-${crew._id}`,\n                children: crew.name\n              }, crew._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 466,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleCompleteRoute(routeIndex) // Complete route button\n            ,\n            className: \"bg-green-500 text-white px-2 py-1 rounded-md\",\n            children: \"Complete Route\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 15\n        }, this), jobs.length > 0 ? jobs.map((job, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n          draggableId: job._id,\n          index: index,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            ...provided.draggableProps,\n            ...provided.dragHandleProps,\n            children: renderJobCard(job, !isJobPool, routeIndex, index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 21\n          }, this)\n        }, job._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-white text-center\",\n          children: \"No jobs available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 15\n        }, this), provided.placeholder]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-gray-900 flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white text-xl\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-gray-900 flex flex-col items-center justify-center space-y-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-500 text-xl\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        className: \"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition\",\n        children: \"Refresh Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-900 text-white\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-7xl mx-auto py-8 px-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changeSelectedDay(-1),\n          className: \"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\",\n          children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-3xl font-bold\",\n          children: selectedDay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changeSelectedDay(1),\n          className: \"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\",\n          children: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => cycleVisibleRoutes(-1),\n          className: \"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\",\n          children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNewRoute,\n          className: \"px-4 py-2 bg-green-500 rounded-md hover:bg-green-600 transition flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(PlusIcon, {\n            className: \"w-5 h-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Add Route\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => cycleVisibleRoutes(1),\n          className: \"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\",\n          children: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: onDragEnd,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\",\n          children: routes[selectedDay].slice(visibleRoutesRange.start, visibleRoutesRange.end).map(route => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-800 p-4 rounded-lg shadow-lg\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center justify-between mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"text-xl font-semibold\",\n                children: [\"Route \", route.index + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 573,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => deleteRoute(route.index),\n                className: \"p-2 bg-red-500 rounded-md hover:bg-red-600 transition\",\n                children: /*#__PURE__*/_jsxDEV(TrashIcon, {\n                  className: \"w-5 w-5\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 578,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 574,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 19\n            }, this), renderDroppableArea(`route-${route.index}`, route.jobs)]\n          }, route.index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-8\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-2xl font-semibold mb-4 flex justify-between items-center\",\n            children: [\"Job Pool\", selectedJobs.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setSelectedJobs([]),\n              className: \"px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition\",\n              children: \"Clear Selection\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 590,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-400 mb-2\",\n            children: \"Click on jobs to select multiple, then drag to a route.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-2 p-2 bg-gray-800 rounded-lg text-white\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-bold mb-2\",\n              children: \"Job Color Legend\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 604,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"flex space-x-8\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"flex items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-4 h-4 inline-block bg-green-600 mr-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 607,\n                  columnNumber: 19\n                }, this), \" One-time job\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 606,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"flex items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-4 h-4 inline-block bg-blue-600 mr-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 610,\n                  columnNumber: 19\n                }, this), \" Weekly\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 609,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"flex items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-4 h-4 inline-block bg-yellow-600 mr-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 613,\n                  columnNumber: 19\n                }, this), \" Bi-weekly\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 612,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"flex items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-4 h-4 inline-block bg-purple-600 mr-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 616,\n                  columnNumber: 19\n                }, this), \" Monthly\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 13\n          }, this), renderDroppableArea('jobPool-0', jobPool, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 9\n      }, this), saving && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 z-50\",\n        children: [/*#__PURE__*/_jsxDEV(ClipLoader, {\n          color: \"#ffffff\",\n          loading: saving,\n          size: 50\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-white mt-4\",\n          children: \"Saving...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 525,\n    columnNumber: 5\n  }, this);\n};\n_s(BuildRoutes, \"P1dAt8F6y3mLXu7UaayypRVZpNQ=\");\n_c = BuildRoutes;\nexport default BuildRoutes;\nvar _c;\n$RefreshReg$(_c, \"BuildRoutes\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ChevronLeftIcon","ChevronRightIcon","PlusIcon","TrashIcon","ChevronDownIcon","ChevronUpIcon","DragDropContext","Droppable","Draggable","CheckIcon","API_BASE_URL","DAYS_OF_WEEK","defaultRoutes","validateRoutesStructure","fetchWithAuth","Header","debounce","ClipLoader","jsxDEV","_jsxDEV","Fragment","_Fragment","BuildRoutes","_s","routes","setRoutes","jobPool","setJobPool","selectedDay","setSelectedDay","loading","setLoading","saving","setSaving","error","setError","visibleRoutesRange","setVisibleRoutesRange","start","end","expandedJobs","setExpandedJobs","selectedJobs","setSelectedJobs","employees","setEmployees","crews","setCrews","initializeData","fetchedRoutesResponse","fetchedJobsResponse","fetchedEmployeesResponse","fetchedCrewsResponse","Promise","all","fetchedRoutes","fetchedJobs","fetchedEmployees","fetchedCrews","validatedRoutes","now","Date","filter","job","recurrencePattern","lastServiceDate","daysSinceLastService","err","console","saveRoutes","updatedRoutes","routesToSave","Object","entries","reduce","acc","day","dayRoutes","map","route","_route$employee","_route$crew","index","jobs","_id","employee","crew","log","debouncedSaveRoutes","onDragEnd","result","source","destination","droppableId","prevRoutes","sourceId","split","destId","sourceRouteIndex","parseInt","destRouteIndex","selectedJobsToMove","length","includes","forEach","splice","updatedJobPool","jobId","jobIndex","findIndex","removedJob","addNewRoute","newRouteState","deleteRoute","routeIndex","deletedRoute","prevJobPool","idx","removeJobFromRoute","assigningRoutes","setAssigningRoutes","assignRoute","assigneeId","type","id","prev","response","Error","updatedRoute","updatedDayRoutes","_employees$find","_crews$find","name","find","e","c","handleJobSelection","prevSelectedJobs","toggleJobExpansion","changeSelectedDay","direction","prevDay","currentIndex","indexOf","newIndex","cycleVisibleRoutes","prevRange","totalRoutes","newStart","newEnd","Math","min","renderLegend","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleCompleteJob","prevJobs","j","renderJobCard","isInRoute","_job$customer","_job$location","isExpanded","customerName","customer","isSelected","toLocaleDateString","jobColors","oneTime","weekly","biWeekly","monthly","jobStyle","backgroundColor","isRecurring","recurring","border","style","onClick","stopPropagation","title","location","address","cost","handleCompleteRoute","routeJobs","renderDroppableArea","isJobPool","provided","ref","innerRef","droppableProps","onChange","target","value","disabled","label","draggableId","draggableProps","dragHandleProps","placeholder","window","reload","slice","color","size","_c","$RefreshReg$"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/pages/BuildRoutes.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  ChevronLeftIcon,\r\n  ChevronRightIcon,\r\n  PlusIcon,\r\n  TrashIcon,\r\n  ChevronDownIcon,\r\n  ChevronUpIcon,\r\n} from '@heroicons/react/24/outline';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { CheckIcon } from '@heroicons/react/24/solid';\r\nimport {\r\n  API_BASE_URL,\r\n  DAYS_OF_WEEK,\r\n  defaultRoutes,\r\n  validateRoutesStructure,\r\n  fetchWithAuth,\r\n} from '../components/utils';\r\nimport Header from '../components/Header';\r\nimport debounce from 'lodash/debounce';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nconst BuildRoutes = () => {\r\n  const [routes, setRoutes] = useState(defaultRoutes);\r\n  const [jobPool, setJobPool] = useState([]);\r\n  const [selectedDay, setSelectedDay] = useState(DAYS_OF_WEEK[0]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [visibleRoutesRange, setVisibleRoutesRange] = useState({ start: 0, end: 3 });\r\n  const [expandedJobs, setExpandedJobs] = useState({});\r\n  const [selectedJobs, setSelectedJobs] = useState([]);\r\n  const [employees, setEmployees] = useState([]);\r\n  const [crews, setCrews] = useState([]);\r\n\r\n  const initializeData = useCallback(async () => {\r\n  setLoading(true);\r\n  try {\r\n    const [\r\n      fetchedRoutesResponse,\r\n      fetchedJobsResponse,\r\n      fetchedEmployeesResponse,\r\n      fetchedCrewsResponse,\r\n    ] = await Promise.all([\r\n      fetchWithAuth('/routes'),\r\n      fetchWithAuth('/routes/jobs/available'),\r\n      fetchWithAuth('/employees'),\r\n      fetchWithAuth('/crews'),\r\n    ]);\r\n\r\n    const fetchedRoutes = fetchedRoutesResponse?.routes || defaultRoutes;\r\n    let fetchedJobs = fetchedJobsResponse || [];\r\n    const fetchedEmployees = fetchedEmployeesResponse || [];\r\n    const fetchedCrews = fetchedCrewsResponse || [];\r\n\r\n    const validatedRoutes = validateRoutesStructure(fetchedRoutes);\r\n\r\n    // Filter bi-weekly jobs based on last service date\r\n    const now = new Date();\r\n    fetchedJobs = fetchedJobs.filter((job) => {\r\n      if (job.recurrencePattern === 'Bi-weekly' && job.lastServiceDate) {\r\n        const lastServiceDate = new Date(job.lastServiceDate);\r\n        const daysSinceLastService = (now - lastServiceDate) / (1000 * 60 * 60 * 24); // Days since last service\r\n        return daysSinceLastService > 7; // Only include jobs where last service was more than 7 days ago\r\n      }\r\n      return true;\r\n    });\r\n\r\n    setRoutes(validatedRoutes);\r\n    setJobPool(fetchedJobs);\r\n    setEmployees(fetchedEmployees);\r\n    setCrews(fetchedCrews);\r\n  } catch (err) {\r\n    console.error('Error fetching data:', err);\r\n    setError('Failed to load routes, jobs, employees, and crews. Please refresh the page.');\r\n  } finally {\r\n    setLoading(false);\r\n  }\r\n}, []);\r\n\r\n  useEffect(() => {\r\n    initializeData();\r\n  }, [initializeData]);\r\n\r\n  const saveRoutes = useCallback(async (updatedRoutes = routes) => {\r\n    setSaving(true);\r\n    try {\r\n      const routesToSave = Object.entries(updatedRoutes).reduce((acc, [day, dayRoutes]) => {\r\n        acc[day] = dayRoutes.map(route => ({\r\n          index: route.index,\r\n          jobs: route.jobs.map(job => (typeof job === 'string' ? job : job._id)),\r\n          employee: route.employee?._id,\r\n          crew: route.crew?._id,\r\n        }));\r\n        return acc;\r\n      }, {});\r\n  \r\n      await fetchWithAuth('/routes', 'PUT', { routes: routesToSave });\r\n      console.log('Routes saved successfully:', routesToSave);\r\n    } catch (err) {\r\n      console.error('Error saving routes:', err);\r\n      setError('Failed to save routes. Please try again.');\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  }, [routes]);\r\n\r\n  const debouncedSaveRoutes = useCallback(debounce(saveRoutes, 1000), [saveRoutes]);\r\n\r\n  const onDragEnd = useCallback((result) => {\r\n    const { source, destination } = result;\r\n  \r\n    if (!destination) {\r\n      console.log(\"Drag operation cancelled or no destination found.\");\r\n      return;\r\n    }\r\n  \r\n    console.log(\"Drag started from:\", source.droppableId, \"to\", destination.droppableId);\r\n    console.log(\"Before moving jobs:\", { jobPool, routes });\r\n\r\n    setRoutes((prevRoutes) => {\r\n      const updatedRoutes = { ...prevRoutes };\r\n      const sourceId = source.droppableId.split('-');\r\n      const destId = destination.droppableId.split('-');\r\n  \r\n      const sourceRouteIndex = sourceId[0] === 'route' ? parseInt(sourceId[1], 10) : null;\r\n      const destRouteIndex = destId[0] === 'route' ? parseInt(destId[1], 10) : null;\r\n  \r\n      // Moving from job pool to a route\r\n      if (source.droppableId === 'jobPool-0' && destRouteIndex !== null) {\r\n        console.log(\"Moving jobs from job pool to route:\", destRouteIndex);\r\n  \r\n        const selectedJobsToMove = selectedJobs.length > 0 \r\n          ? jobPool.filter(job => selectedJobs.includes(job._id)) \r\n          : [jobPool[source.index]];  // Only the single dragged job\r\n  \r\n        console.log(\"Selected jobs to move from job pool:\", selectedJobsToMove);\r\n  \r\n        // Add jobs to the route\r\n        selectedJobsToMove.forEach((job, index) => {\r\n          updatedRoutes[selectedDay][destRouteIndex].jobs.splice(destination.index + index, 0, job);\r\n          console.log(`Job added to route ${destRouteIndex}:`, job);\r\n        });\r\n  \r\n        // Remove moved jobs from job pool\r\n        const updatedJobPool = jobPool.filter(job => !selectedJobs.includes(job._id));\r\n        if (selectedJobs.length === 0) {\r\n          // If no jobs were selected, remove the single dragged job from the pool\r\n          updatedJobPool.splice(source.index, 1);\r\n        }\r\n        setJobPool(updatedJobPool);\r\n  \r\n        console.log(\"Updated job pool after move:\", updatedJobPool);\r\n      }\r\n  \r\n      // Moving between routes or within the same route\r\n      if (sourceRouteIndex !== null && destRouteIndex !== null) {\r\n        console.log(`Moving jobs from route ${sourceRouteIndex} to route ${destRouteIndex}`);\r\n  \r\n        selectedJobs.forEach((jobId, index) => {\r\n          // Find job in the source route\r\n          const jobIndex = updatedRoutes[selectedDay][sourceRouteIndex].jobs.findIndex(job => job._id === jobId);\r\n          const [removedJob] = updatedRoutes[selectedDay][sourceRouteIndex].jobs.splice(jobIndex, 1);\r\n  \r\n          console.log(`Removed job ${jobId} from route ${sourceRouteIndex}`, removedJob);\r\n  \r\n          // Add job to destination route\r\n          if (removedJob) {\r\n            updatedRoutes[selectedDay][destRouteIndex].jobs.splice(destination.index, 0, removedJob);\r\n            console.log(`Added job ${jobId} to route ${destRouteIndex}`);\r\n          }\r\n        });\r\n      }\r\n  \r\n      console.log(\"After moving jobs:\", { jobPool, updatedRoutes });\r\n  \r\n      setSelectedJobs([]); // Clear selected jobs after moving\r\n      return updatedRoutes;\r\n    });\r\n\r\n    debouncedSaveRoutes();\r\n  }, [jobPool, selectedJobs, selectedDay, debouncedSaveRoutes]);\r\n\r\n  const addNewRoute = useCallback(async () => {\r\n    const newRouteState = {\r\n      ...routes,\r\n      [selectedDay]: [\r\n        ...routes[selectedDay],\r\n        { index: routes[selectedDay].length, jobs: [] },\r\n      ],\r\n    };\r\n    setRoutes(newRouteState);\r\n    await saveRoutes(newRouteState);\r\n  }, [routes, selectedDay, saveRoutes]);\r\n\r\n  const deleteRoute = useCallback(async (routeIndex) => {\r\n    try {\r\n      setRoutes(prevRoutes => {\r\n        const updatedRoutes = { ...prevRoutes };\r\n        const deletedRoute = updatedRoutes[selectedDay].splice(routeIndex, 1)[0];\r\n        \r\n        setJobPool(prevJobPool => [...prevJobPool, ...deletedRoute.jobs]);\r\n        \r\n        updatedRoutes[selectedDay] = updatedRoutes[selectedDay].map((route, idx) => ({\r\n          ...route,\r\n          index: idx,\r\n        }));\r\n        \r\n        return updatedRoutes;\r\n      });\r\n  \r\n      await fetchWithAuth(`/routes/${selectedDay}/${routeIndex}`, 'DELETE');\r\n  \r\n      await saveRoutes(); // Ensure routes are saved to keep consistent state\r\n    } catch (error) {\r\n      console.error('Error deleting route:', error);\r\n      setError('Failed to delete route. Please try again.');\r\n    }\r\n  }, [selectedDay, saveRoutes]);\r\n\r\n  const removeJobFromRoute = async (routeIndex, jobIndex) => {\r\n    try {\r\n      setRoutes(prevRoutes => {\r\n        const updatedRoutes = { ...prevRoutes };\r\n        const removedJob = updatedRoutes[selectedDay][routeIndex].jobs.splice(jobIndex, 1)[0];\r\n        setJobPool(prevJobPool => [...prevJobPool, removedJob]);\r\n        return updatedRoutes;\r\n      });\r\n  \r\n      await fetchWithAuth(`/routes/${selectedDay}/${routeIndex}`, 'PUT', {\r\n        index: routeIndex,\r\n        jobs: routes[selectedDay][routeIndex].jobs\r\n      });\r\n  \r\n      await saveRoutes();\r\n    } catch (error) {\r\n      console.error('Error removing job from route:', error);\r\n      setError('Failed to remove job from route. Please try again.');\r\n    }\r\n  };\r\n\r\n  const [assigningRoutes, setAssigningRoutes] = useState({});\r\n  const assignRoute = async (routeIndex, assigneeId) => {\r\n    const [type, id] = assigneeId.split('-');\r\n    setAssigningRoutes(prev => ({ ...prev, [routeIndex]: true }));\r\n  \r\n    try {\r\n      console.log(`Assigning ${type} with ID: ${id} to route ${routeIndex} for day ${selectedDay}`);\r\n      \r\n      // Sending the appropriate payload to the API\r\n      const response = await fetchWithAuth(`/routes/${selectedDay}/${routeIndex}/assign`, 'PUT', {\r\n        [type]: id,\r\n      });\r\n  \r\n      // Since fetchWithAuth returns parsed data directly, no need to check response.ok or status\r\n      console.log('Response from server:', response);\r\n  \r\n      // Ensure the response contains the expected fields, otherwise consider it an error\r\n      if (!response || !response._id) {\r\n        throw new Error('Invalid response format');\r\n      }\r\n  \r\n      // Assuming the response is valid and contains the updated route\r\n      const updatedRoute = response; // Use the response directly since fetchWithAuth returns the data\r\n      setRoutes((prevRoutes) => {\r\n        const updatedDayRoutes = prevRoutes[selectedDay].map((route) => {\r\n          if (route.index === routeIndex) {\r\n            return {\r\n              ...route,\r\n              employee: type === 'employee' ? { _id: id, name: employees.find(e => e._id === id)?.name } : null,\r\n              crew: type === 'crew' ? { _id: id, name: crews.find(c => c._id === id)?.name } : null,\r\n            };\r\n          }\r\n          return route;\r\n        });\r\n  \r\n        return {\r\n          ...prevRoutes,\r\n          [selectedDay]: updatedDayRoutes,\r\n        };\r\n      });\r\n      console.log(`Route assigned successfully: day ${selectedDay}, index ${routeIndex}, ${type}: ${id}`);\r\n    } catch (error) {\r\n      console.error('Error assigning route:', error);\r\n      setError('Failed to assign route. Please try again.');\r\n    } finally {\r\n      setAssigningRoutes(prev => ({ ...prev, [routeIndex]: false }));\r\n    }\r\n  };\r\n  \r\n  const handleJobSelection = (job) => {\r\n    setSelectedJobs(prevSelectedJobs => {\r\n      if (prevSelectedJobs.includes(job._id)) {\r\n        return prevSelectedJobs.filter(id => id !== job._id);\r\n      } else {\r\n        return [...prevSelectedJobs, job._id];\r\n      }\r\n    });\r\n  };\r\n\r\n  const toggleJobExpansion = (jobId) => {\r\n    setExpandedJobs((prev) => ({ ...prev, [jobId]: !prev[jobId] }));\r\n  };\r\n\r\n  const changeSelectedDay = (direction) => {\r\n    setSelectedDay((prevDay) => {\r\n      const currentIndex = DAYS_OF_WEEK.indexOf(prevDay);\r\n      const newIndex = (currentIndex + direction + DAYS_OF_WEEK.length) % DAYS_OF_WEEK.length;\r\n      return DAYS_OF_WEEK[newIndex];\r\n    });\r\n    setVisibleRoutesRange({ start: 0, end: 3 });\r\n  };\r\n\r\n  const cycleVisibleRoutes = (direction) => {\r\n    setVisibleRoutesRange((prevRange) => {\r\n      const totalRoutes = routes[selectedDay].length;\r\n      const newStart = (prevRange.start + direction + totalRoutes) % totalRoutes;\r\n      const newEnd = Math.min(newStart + 3, totalRoutes);\r\n      return { start: newStart, end: newEnd };\r\n    });\r\n  };\r\n\r\n  const renderLegend = () => (\r\n    <div className=\"mt-2 p-2 bg-gray-800 rounded-lg text-white\">\r\n      <h3 className=\"font-bold mb-2\">Job Color Legend</h3>\r\n      <ul className=\"space-y-1\">\r\n        <li className=\"flex items-center\">\r\n          <span className=\"w-4 h-4 inline-block bg-green-600 mr-2\" /> One-time job\r\n        </li>\r\n        <li className=\"flex items-center\">\r\n          <span className=\"w-4 h-4 inline-block bg-blue-600 mr-2\" /> Weekly recurring job\r\n        </li>\r\n        <li className=\"flex items-center\">\r\n          <span className=\"w-4 h-4 inline-block bg-yellow-600 mr-2\" /> Bi-weekly recurring job\r\n        </li>\r\n        <li className=\"flex items-center\">\r\n          <span className=\"w-4 h-4 inline-block bg-purple-600 mr-2\" /> Monthly recurring job\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );  \r\n\r\n  const handleCompleteJob = async (jobId) => {\r\n    try {\r\n      await fetchWithAuth(`/jobs/${jobId}/complete`, 'POST', {});  // Mark job as completed via API\r\n      setJobPool(prevJobs => prevJobs.filter(j => j._id !== jobId));  // Remove job from pool after completion\r\n      // Optionally, show a success message here\r\n    } catch (error) {\r\n      console.error('Error completing job:', error);\r\n      setError('Failed to complete job. Please try again.');\r\n    }\r\n  };\r\n  \r\n  const renderJobCard = (job, isInRoute = false, routeIndex, jobIndex) => {\r\n    if (!job) return null; // Safeguard against undefined jobs\r\n    \r\n    const isExpanded = expandedJobs[job._id];\r\n    const customerName = job.customer?.name || 'No Customer';\r\n    const isSelected = selectedJobs.includes(job._id);\r\n    const lastServiceDate = job.lastServiceDate ? new Date(job.lastServiceDate).toLocaleDateString() : 'No Service Date'; \r\n  \r\n    const jobColors = {\r\n      oneTime: 'bg-green-600 hover:bg-green-700',\r\n      weekly: 'bg-blue-600 hover:bg-blue-700',\r\n      biWeekly: 'bg-yellow-600 hover:bg-yellow-700',\r\n      monthly: 'bg-purple-600 hover:bg-purple-700',\r\n    };\r\n  \r\n    const jobStyle = {\r\n      backgroundColor: job.isRecurring\r\n        ? job.recurrencePattern === 'Weekly'\r\n          ? jobColors.weekly\r\n          : job.recurrencePattern === 'Bi-weekly'\r\n          ? jobColors.biWeekly\r\n          : job.recurrencePattern === 'Monthly'\r\n          ? jobColors.monthly\r\n          : jobColors.recurring\r\n        : jobColors.oneTime,\r\n      border: isSelected ? '2px solid yellow' : 'none',\r\n    };\r\n  \r\n    return (\r\n      <div\r\n        className={`p-2 rounded-md shadow-md ${jobStyle.backgroundColor}`}\r\n        style={{ border: jobStyle.border }}\r\n        onClick={() => handleJobSelection(job)}\r\n      >\r\n        <div className=\"flex justify-between items-center\">\r\n          <p className=\"font-bold text-white\">{customerName}</p>\r\n          <div className=\"flex items-center space-x-2\">\r\n            {isInRoute && (\r\n              <>\r\n                <button\r\n                  onClick={(e) => { e.stopPropagation(); handleCompleteJob(job._id); }}  // Complete job button\r\n                  className=\"text-green-500 hover:text-green-700\"\r\n                >\r\n                  <CheckIcon className=\"h-5 w-5\" />\r\n                </button>\r\n                <button\r\n                  onClick={(e) => { e.stopPropagation(); removeJobFromRoute(routeIndex, jobIndex); }}\r\n                  className=\"text-red-500 hover:text-red-700\"\r\n                >\r\n                  <TrashIcon className=\"h-5 w-5\" />\r\n                </button>\r\n              </>\r\n            )}\r\n            <button onClick={(e) => { e.stopPropagation(); toggleJobExpansion(job._id); }}>\r\n              {isExpanded ? <ChevronUpIcon className=\"h-5 w-5\" /> : <ChevronDownIcon className=\"h-5 w-5\" />}\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {isExpanded && (\r\n          <div className=\"mt-2\">\r\n            <p className=\"text-gray-300\">{job.title || 'No Title'}</p>\r\n            <p className=\"text-gray-400\">{job.location?.address || 'No Address'}</p>\r\n            <p className=\"text-gray-400\">Revenue: ${job.cost || 'No Price'}</p>\r\n            <p className=\"text-gray-400\">Type: {job.isRecurring ? 'Recurring' : 'One-time'}</p>\r\n            <p className=\"text-gray-400\">Last Service Date: {lastServiceDate}</p> \r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };  \r\n\r\n  const handleCompleteRoute = async (routeIndex) => {\r\n    try {\r\n      const routeJobs = routes[selectedDay][routeIndex].jobs.map(job => job._id);  // Get all job IDs in route\r\n      await Promise.all(\r\n        routeJobs.map(jobId => fetchWithAuth(`/jobs/${jobId}/complete`, 'POST', {}))  // Complete all jobs in the route\r\n      );\r\n      // Optionally, show success message here\r\n    } catch (error) {\r\n      console.error('Error completing route:', error);\r\n      setError('Failed to complete route. Please try again.');\r\n    }\r\n  };\r\n  \r\n  const renderDroppableArea = (id, jobs, isJobPool = false) => {\r\n    const routeIndex = parseInt(id.split('-')[1], 10);\r\n    const route = routes[selectedDay][routeIndex];\r\n  \r\n    return (\r\n      <Droppable droppableId={id}>\r\n        {(provided) => (\r\n          <div\r\n            ref={provided.innerRef}\r\n            {...provided.droppableProps}\r\n            className={`bg-gray-800 p-4 rounded-lg min-h-[200px] ${isJobPool ? 'grid grid-cols-3 gap-4' : 'space-y-2'}`}\r\n          >\r\n            {!isJobPool && (\r\n              <div className=\"mb-4 flex justify-between items-center\">\r\n                <select\r\n                  className=\"w-full p-2 bg-gray-700 text-white rounded\"\r\n                  onChange={(e) => assignRoute(routeIndex, e.target.value)}\r\n                  value={route.employee ? `employee-${route.employee._id}` : route.crew ? `crew-${route.crew._id}` : ''}\r\n                  disabled={assigningRoutes[routeIndex]}\r\n                >\r\n                  <option value=\"\">Assign to...</option>\r\n                  <optgroup label=\"Employees\">\r\n                    {employees.map((employee) => (\r\n                      <option key={employee._id} value={`employee-${employee._id}`}>{employee.name}</option>\r\n                    ))}\r\n                  </optgroup>\r\n                  <optgroup label=\"Crews\">\r\n                    {crews.map((crew) => (\r\n                      <option key={crew._id} value={`crew-${crew._id}`}>{crew.name}</option>\r\n                    ))}\r\n                  </optgroup>\r\n                </select>\r\n                <button\r\n                  onClick={() => handleCompleteRoute(routeIndex)}  // Complete route button\r\n                  className=\"bg-green-500 text-white px-2 py-1 rounded-md\"\r\n                >\r\n                  Complete Route\r\n                </button>\r\n              </div>\r\n            )}\r\n            {jobs.length > 0 ? (\r\n              jobs.map((job, index) => (\r\n                <Draggable key={job._id} draggableId={job._id} index={index}>\r\n                  {(provided) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                    >\r\n                      {renderJobCard(job, !isJobPool, routeIndex, index)}\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))\r\n            ) : (\r\n              <p className=\"text-white text-center\">No jobs available</p>\r\n            )}\r\n            {provided.placeholder}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    );\r\n  };  \r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-900 flex items-center justify-center\">\r\n        <p className=\"text-white text-xl\">Loading...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-900 flex flex-col items-center justify-center space-y-4\">\r\n        <p className=\"text-red-500 text-xl\">{error}</p>\r\n        <button\r\n          onClick={() => window.location.reload()}\r\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition\"\r\n        >\r\n          Refresh Page\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-900 text-white\">\r\n      <Header />\r\n      <main className=\"max-w-7xl mx-auto py-8 px-4\">\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <button\r\n            onClick={() => changeSelectedDay(-1)}\r\n            className=\"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\"\r\n          >\r\n            <ChevronLeftIcon className=\"w-6 h-6\" />\r\n          </button>\r\n          <h1 className=\"text-3xl font-bold\">{selectedDay}</h1>\r\n          <button\r\n            onClick={() => changeSelectedDay(1)}\r\n            className=\"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\"\r\n          >\r\n            <ChevronRightIcon className=\"w-6 h-6\" />\r\n          </button>\r\n        </div>\r\n  \r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <button\r\n            onClick={() => cycleVisibleRoutes(-1)}\r\n            className=\"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\"\r\n          >\r\n            <ChevronLeftIcon className=\"w-6 h-6\" />\r\n          </button>\r\n          <button\r\n            onClick={addNewRoute}\r\n            className=\"px-4 py-2 bg-green-500 rounded-md hover:bg-green-600 transition flex items-center space-x-2\"\r\n          >\r\n            <PlusIcon className=\"w-5 h-5\" />\r\n            <span>Add Route</span>\r\n          </button>\r\n          <button\r\n            onClick={() => cycleVisibleRoutes(1)}\r\n            className=\"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\"\r\n          >\r\n            <ChevronRightIcon className=\"w-6 h-6\" />\r\n          </button>\r\n        </div>\r\n  \r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n            {routes[selectedDay]\r\n              .slice(visibleRoutesRange.start, visibleRoutesRange.end)\r\n              .map((route) => (\r\n                <div key={route.index} className=\"bg-gray-800 p-4 rounded-lg shadow-lg\">\r\n                  <div className=\"flex items-center justify-between mb-4\">\r\n                    <h2 className=\"text-xl font-semibold\">Route {route.index + 1}</h2>\r\n                    <button\r\n                      onClick={() => deleteRoute(route.index)}\r\n                      className=\"p-2 bg-red-500 rounded-md hover:bg-red-600 transition\"\r\n                    >\r\n                      <TrashIcon className=\"w-5 w-5\" />\r\n                    </button>\r\n                  </div>\r\n                  {renderDroppableArea(`route-${route.index}`, route.jobs)}\r\n                </div>\r\n              ))}\r\n          </div>\r\n  \r\n          <div className=\"mt-8\">\r\n            <h2 className=\"text-2xl font-semibold mb-4 flex justify-between items-center\">\r\n              Job Pool\r\n              {selectedJobs.length > 0 && (\r\n                <button\r\n                  onClick={() => setSelectedJobs([])}\r\n                  className=\"px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition\"\r\n                >\r\n                  Clear Selection\r\n                </button>\r\n              )}\r\n            </h2>\r\n            <p className=\"text-sm text-gray-400 mb-2\">\r\n              Click on jobs to select multiple, then drag to a route.\r\n            </p>\r\n  \r\n            {/* Job Color Legend */}\r\n            <div className=\"mt-2 p-2 bg-gray-800 rounded-lg text-white\">\r\n              <h3 className=\"font-bold mb-2\">Job Color Legend</h3>\r\n              <ul className=\"flex space-x-8\">\r\n                <li className=\"flex items-center\">\r\n                  <span className=\"w-4 h-4 inline-block bg-green-600 mr-2\" /> One-time job\r\n                </li>\r\n                <li className=\"flex items-center\">\r\n                  <span className=\"w-4 h-4 inline-block bg-blue-600 mr-2\" /> Weekly\r\n                </li>\r\n                <li className=\"flex items-center\">\r\n                  <span className=\"w-4 h-4 inline-block bg-yellow-600 mr-2\" /> Bi-weekly\r\n                </li>\r\n                <li className=\"flex items-center\">\r\n                  <span className=\"w-4 h-4 inline-block bg-purple-600 mr-2\" /> Monthly\r\n                </li>\r\n              </ul>\r\n            </div>\r\n\r\n  \r\n            {renderDroppableArea('jobPool-0', jobPool, true)}\r\n          </div>\r\n        </DragDropContext>\r\n  \r\n        {saving && (\r\n          <div className=\"fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 z-50\">\r\n            <ClipLoader color=\"#ffffff\" loading={saving} size={50} />\r\n            <p className=\"text-white mt-4\">Saving...</p>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );  \r\n};\r\n\r\nexport default BuildRoutes;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}