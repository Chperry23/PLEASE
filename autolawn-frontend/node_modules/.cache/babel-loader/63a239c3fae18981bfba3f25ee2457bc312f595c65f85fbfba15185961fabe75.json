{"ast":null,"code":"require('dotenv').config();\nconst axios = require('axios');\nconst mongoose = require('mongoose');\n\n// MongoDB Models\nconst Job = require('./backend/src/models/job');\nconst Customer = require('./backend/src/models/customer');\nconst User = require('./backend/src/models/user');\n\n// MongoDB Connection\nmongoose.connect(process.env.MONGODB_URI, {\n  serverSelectionTimeoutMS: 60000,\n  // 60 seconds\n  socketTimeoutMS: 180000 // 3 minutes\n}).then(() => console.log('Connected to MongoDB')).catch(err => {\n  console.error('MongoDB connection error:', err);\n  mongoose.connection.close();\n});\n\n// Helper functions\nconst getCustomers = async () => {\n  const response = await axios.get('http://localhost:5000/api/customers', {\n    headers: {\n      Authorization: `Bearer ${process.env.TOKEN}`\n    }\n  });\n  return response.data;\n};\nconst getServices = async () => {\n  const response = await axios.get('http://localhost:5000/api/services', {\n    headers: {\n      Authorization: `Bearer ${process.env.TOKEN}`\n    }\n  });\n  return response.data;\n};\n\n// Seed jobs\nconst seedJobs = async () => {\n  try {\n    const customers = await getCustomers();\n    const services = await getServices();\n    const jobs = [{\n      title: 'Lawn Care',\n      description: 'Weekly lawn care service.',\n      customer: customers[0]._id,\n      price: 60,\n      status: 'Pending',\n      isRecurring: true,\n      recurrencePattern: 'Weekly',\n      estimatedDuration: 60,\n      location: {\n        address: customers[0].address || 'Address not available',\n        coordinates: customers[0].address.coordinates || []\n      },\n      cost: 10,\n      notes: 'Customer prefers early morning.',\n      createdBy: 'YOUR_USER_ID' // Replace with the actual User ID\n    }, {\n      title: 'Tree Trimming',\n      description: 'Trimming the oak tree in the backyard.',\n      customer: customers[1]._id,\n      price: 150,\n      status: 'Scheduled',\n      isRecurring: false,\n      estimatedDuration: 120,\n      location: {\n        address: customers[1].address || 'Address not available',\n        coordinates: customers[1].address.coordinates || []\n      },\n      cost: 30,\n      notes: '',\n      createdBy: 'YOUR_USER_ID' // Replace with the actual User ID\n    }];\n    for (const job of jobs) {\n      const response = await axios.post('http://localhost:5000/api/jobs', job, {\n        headers: {\n          Authorization: `Bearer ${process.env.TOKEN}`\n        }\n      });\n      console.log(`Job created: ${response.data.title}`);\n    }\n  } catch (error) {\n    var _error$response;\n    console.error('Error seeding jobs:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  } finally {\n    mongoose.connection.close();\n  }\n};\nseedJobs();","map":{"version":3,"names":["require","config","axios","mongoose","Job","Customer","User","connect","process","env","MONGODB_URI","serverSelectionTimeoutMS","socketTimeoutMS","then","console","log","catch","err","error","connection","close","getCustomers","response","get","headers","Authorization","TOKEN","data","getServices","seedJobs","customers","services","jobs","title","description","customer","_id","price","status","isRecurring","recurrencePattern","estimatedDuration","location","address","coordinates","cost","notes","createdBy","job","post","_error$response","message"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/pages/Jobs.js"],"sourcesContent":["require('dotenv').config();\r\nconst axios = require('axios');\r\nconst mongoose = require('mongoose');\r\n\r\n// MongoDB Models\r\nconst Job = require('./backend/src/models/job');\r\nconst Customer = require('./backend/src/models/customer');\r\nconst User = require('./backend/src/models/user');\r\n\r\n// MongoDB Connection\r\nmongoose.connect(process.env.MONGODB_URI, {\r\n  serverSelectionTimeoutMS: 60000, // 60 seconds\r\n  socketTimeoutMS: 180000, // 3 minutes\r\n})\r\n  .then(() => console.log('Connected to MongoDB'))\r\n  .catch(err => {\r\n    console.error('MongoDB connection error:', err);\r\n    mongoose.connection.close();\r\n  });\r\n\r\n// Helper functions\r\nconst getCustomers = async () => {\r\n  const response = await axios.get('http://localhost:5000/api/customers', {\r\n    headers: { Authorization: `Bearer ${process.env.TOKEN}` }\r\n  });\r\n  return response.data;\r\n};\r\n\r\nconst getServices = async () => {\r\n  const response = await axios.get('http://localhost:5000/api/services', {\r\n    headers: { Authorization: `Bearer ${process.env.TOKEN}` }\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Seed jobs\r\nconst seedJobs = async () => {\r\n  try {\r\n    const customers = await getCustomers();\r\n    const services = await getServices();\r\n\r\n    const jobs = [\r\n      {\r\n        title: 'Lawn Care',\r\n        description: 'Weekly lawn care service.',\r\n        customer: customers[0]._id,\r\n        price: 60,\r\n        status: 'Pending',\r\n        isRecurring: true,\r\n        recurrencePattern: 'Weekly',\r\n        estimatedDuration: 60,\r\n        location: {\r\n          address: customers[0].address || 'Address not available',\r\n          coordinates: customers[0].address.coordinates || []\r\n        },\r\n        cost: 10,\r\n        notes: 'Customer prefers early morning.',\r\n        createdBy: 'YOUR_USER_ID' // Replace with the actual User ID\r\n      },\r\n      {\r\n        title: 'Tree Trimming',\r\n        description: 'Trimming the oak tree in the backyard.',\r\n        customer: customers[1]._id,\r\n        price: 150,\r\n        status: 'Scheduled',\r\n        isRecurring: false,\r\n        estimatedDuration: 120,\r\n        location: {\r\n          address: customers[1].address || 'Address not available',\r\n          coordinates: customers[1].address.coordinates || []\r\n        },\r\n        cost: 30,\r\n        notes: '',\r\n        createdBy: 'YOUR_USER_ID' // Replace with the actual User ID\r\n      }\r\n    ];\r\n\r\n    for (const job of jobs) {\r\n      const response = await axios.post('http://localhost:5000/api/jobs', job, {\r\n        headers: { Authorization: `Bearer ${process.env.TOKEN}` }\r\n      });\r\n      console.log(`Job created: ${response.data.title}`);\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('Error seeding jobs:', error.response?.data || error.message);\r\n  } finally {\r\n    mongoose.connection.close();\r\n  }\r\n};\r\n\r\nseedJobs();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}