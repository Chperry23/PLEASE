{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst getHeaders = () => ({\n  Authorization: `Bearer ${localStorage.getItem('token')}`\n});\nexport const fetchCustomers = async () => {\n  const response = await axios.get(`${API_BASE_URL}/customers`, {\n    headers: getHeaders()\n  });\n  return response.data;\n};\nexport const fetchRoutes = async () => {\n  const response = await axios.get(`${API_BASE_URL}/routes`, {\n    headers: getHeaders()\n  });\n  return response.data;\n};\nexport const fetchJobs = async () => {\n  const response = await axios.get(`${API_BASE_URL}/jobs`, {\n    headers: getHeaders()\n  });\n  return response.data;\n};\nexport const saveRoute = async route => {\n  const response = await axios.post(`${API_BASE_URL}/routes`, route, {\n    headers: getHeaders()\n  });\n  return response.data;\n};\nexport const deleteRoute = async routeId => {\n  try {\n    await axios.delete(`${API_BASE_URL}/routes/${routeId}`, {\n      headers: getHeaders()\n    });\n  } catch (error) {\n    console.error('Error deleting route:', error);\n    throw error;\n  }\n};\nexport const optimizeRoute = async routeId => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/routes/${routeId}/optimize`, {}, {\n      headers: getHeaders()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error optimizing route:', error);\n    throw error;\n  }\n};\nexport const fetchCalendarEvents = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/calendar-events`, {\n      headers: getHeaders()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching calendar events:', error);\n    throw error;\n  }\n};\nexport const updateCalendarEvent = async eventData => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/calendar-events/${eventData.id}`, eventData, {\n      headers: getHeaders()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error updating calendar event:', error);\n    throw error;\n  }\n};\nexport const saveSchedule = async (routeId, schedule) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/routes/${routeId}/schedule`, schedule, {\n      headers: getHeaders()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error saving schedule:', error);\n    throw error;\n  }\n};\nexport const updateRoute = async (routeId, updatedData) => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/routes/${routeId}`, updatedData, {\n      headers: getHeaders()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error updating route:', error);\n    throw error;\n  }\n};\n\n// Add this function\nexport const updateJob = async (jobId, updatedData) => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/jobs/${jobId}`, updatedData, {\n      headers: getHeaders()\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error updating job:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","getHeaders","Authorization","localStorage","getItem","fetchCustomers","response","get","headers","data","fetchRoutes","fetchJobs","saveRoute","route","post","deleteRoute","routeId","delete","error","console","optimizeRoute","fetchCalendarEvents","updateCalendarEvent","eventData","put","id","saveSchedule","schedule","updateRoute","updatedData","updateJob","jobId"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/pages/BuildRoutes/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\nconst getHeaders = () => ({ Authorization: `Bearer ${localStorage.getItem('token')}` });\r\n\r\nexport const fetchCustomers = async () => {\r\n  const response = await axios.get(`${API_BASE_URL}/customers`, { headers: getHeaders() });\r\n  return response.data;\r\n};\r\n\r\nexport const fetchRoutes = async () => {\r\n  const response = await axios.get(`${API_BASE_URL}/routes`, { headers: getHeaders() });\r\n  return response.data;\r\n};\r\n\r\nexport const fetchJobs = async () => {\r\n  const response = await axios.get(`${API_BASE_URL}/jobs`, { headers: getHeaders() });\r\n  return response.data;\r\n};\r\n\r\nexport const saveRoute = async (route) => {\r\n  const response = await axios.post(`${API_BASE_URL}/routes`, route, { headers: getHeaders() });\r\n  return response.data;\r\n};\r\n\r\nexport const deleteRoute = async (routeId) => {\r\n  try {\r\n    await axios.delete(`${API_BASE_URL}/routes/${routeId}`, { headers: getHeaders() });\r\n  } catch (error) {\r\n    console.error('Error deleting route:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const optimizeRoute = async (routeId) => {\r\n  try {\r\n    const response = await axios.post(`${API_BASE_URL}/routes/${routeId}/optimize`, {}, { headers: getHeaders() });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error optimizing route:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchCalendarEvents = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/calendar-events`, { headers: getHeaders() });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching calendar events:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateCalendarEvent = async (eventData) => {\r\n  try {\r\n    const response = await axios.put(`${API_BASE_URL}/calendar-events/${eventData.id}`, eventData, { headers: getHeaders() });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating calendar event:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const saveSchedule = async (routeId, schedule) => {\r\n  try {\r\n    const response = await axios.post(`${API_BASE_URL}/routes/${routeId}/schedule`, schedule, { headers: getHeaders() });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error saving schedule:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateRoute = async (routeId, updatedData) => {\r\n    try {\r\n      const response = await axios.put(`${API_BASE_URL}/routes/${routeId}`, updatedData, { headers: getHeaders() });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating route:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n// Add this function\r\nexport const updateJob = async (jobId, updatedData) => {\r\n  try {\r\n    const response = await axios.put(`${API_BASE_URL}/jobs/${jobId}`, updatedData, { headers: getHeaders() });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating job:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}