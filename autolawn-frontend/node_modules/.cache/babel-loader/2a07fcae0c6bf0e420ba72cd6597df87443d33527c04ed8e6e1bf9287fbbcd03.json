{"ast":null,"code":"// src/api/dashboardApi.js\n\nimport axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nconst getHeaders = () => ({\n  headers: {\n    Authorization: `Bearer ${localStorage.getItem('token')}`\n  }\n});\nexport const fetchJobs = async () => {\n  const response = await axios.get(`${API_URL}/jobs`, getHeaders());\n  return response.data;\n};\nexport const fetchCustomers = async () => {\n  const response = await axios.get(`${API_URL}/customers`, getHeaders());\n  return response.data;\n};\nexport const fetchEmployees = async () => {\n  const response = await axios.get(`${API_URL}/employees`, getHeaders());\n  return response.data;\n};\nexport const fetchAnalytics = async (timeRange, customRange = null) => {\n  let startDate, endDate;\n  if (timeRange === 'custom' && customRange) {\n    startDate = customRange.start;\n    endDate = customRange.end;\n  } else {\n    const end = new Date();\n    const start = new Date();\n    start.setDate(end.getDate() - (timeRange === 'all' ? 365 : parseInt(timeRange)));\n    startDate = start.toISOString().split('T')[0];\n    endDate = end.toISOString().split('T')[0];\n  }\n  const url = `${API_URL}/analytics?startDate=${startDate}&endDate=${endDate}`;\n  try {\n    const response = await axios.get(url, getHeaders());\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('Error fetching analytics:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\nexport const fetchCustomerGrowth = async (startDate, endDate) => {\n  const response = await axios.get(`${API_URL}/analytics/customer-growth?startDate=${startDate}&endDate=${endDate}`, getHeaders());\n  return response.data;\n};\nexport const fetchRevenue = async (startDate, endDate) => {\n  const response = await axios.get(`${API_URL}/analytics/revenue?startDate=${startDate}&endDate=${endDate}`, getHeaders());\n  return response.data;\n};\nexport const fetchJobStatistics = async (startDate, endDate) => {\n  const response = await axios.get(`${API_URL}/analytics/job-statistics?startDate=${startDate}&endDate=${endDate}`, getHeaders());\n  return response.data;\n};\nexport const fetchEmployeePerformance = async (startDate, endDate) => {\n  const response = await axios.get(`${API_URL}/analytics/employee-performance?startDate=${startDate}&endDate=${endDate}`, getHeaders());\n  return response.data;\n};","map":{"version":3,"names":["axios","API_URL","getHeaders","headers","Authorization","localStorage","getItem","fetchJobs","response","get","data","fetchCustomers","fetchEmployees","fetchAnalytics","timeRange","customRange","startDate","endDate","start","end","Date","setDate","getDate","parseInt","toISOString","split","url","error","_error$response","console","message","fetchCustomerGrowth","fetchRevenue","fetchJobStatistics","fetchEmployeePerformance"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/api/dashboardApi.js"],"sourcesContent":["// src/api/dashboardApi.js\r\n\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\nconst getHeaders = () => ({\r\n  headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\r\n});\r\n\r\nexport const fetchJobs = async () => {\r\n  const response = await axios.get(`${API_URL}/jobs`, getHeaders());\r\n  return response.data;\r\n};\r\n\r\nexport const fetchCustomers = async () => {\r\n  const response = await axios.get(`${API_URL}/customers`, getHeaders());\r\n  return response.data;\r\n};\r\n\r\nexport const fetchEmployees = async () => {\r\n  const response = await axios.get(`${API_URL}/employees`, getHeaders());\r\n  return response.data;\r\n};\r\n\r\nexport const fetchAnalytics = async (timeRange, customRange = null) => {\r\n  let startDate, endDate;\r\n  \r\n  if (timeRange === 'custom' && customRange) {\r\n    startDate = customRange.start;\r\n    endDate = customRange.end;\r\n  } else {\r\n    const end = new Date();\r\n    const start = new Date();\r\n    start.setDate(end.getDate() - (timeRange === 'all' ? 365 : parseInt(timeRange)));\r\n    startDate = start.toISOString().split('T')[0];\r\n    endDate = end.toISOString().split('T')[0];\r\n  }\r\n\r\n  const url = `${API_URL}/analytics?startDate=${startDate}&endDate=${endDate}`;\r\n  try {\r\n    const response = await axios.get(url, getHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching analytics:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchCustomerGrowth = async (startDate, endDate) => {\r\n  const response = await axios.get(`${API_URL}/analytics/customer-growth?startDate=${startDate}&endDate=${endDate}`, getHeaders());\r\n  return response.data;\r\n};\r\n\r\nexport const fetchRevenue = async (startDate, endDate) => {\r\n  const response = await axios.get(`${API_URL}/analytics/revenue?startDate=${startDate}&endDate=${endDate}`, getHeaders());\r\n  return response.data;\r\n};\r\n\r\nexport const fetchJobStatistics = async (startDate, endDate) => {\r\n  const response = await axios.get(`${API_URL}/analytics/job-statistics?startDate=${startDate}&endDate=${endDate}`, getHeaders());\r\n  return response.data;\r\n};\r\n\r\nexport const fetchEmployeePerformance = async (startDate, endDate) => {\r\n  const response = await axios.get(`${API_URL}/analytics/employee-performance?startDate=${startDate}&endDate=${endDate}`, getHeaders());\r\n  return response.data;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}