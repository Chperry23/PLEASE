{"ast":null,"code":"var _jsxFileName = \"C:\\\\AUTOLAWN\\\\autolawn-frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/AuthContext.js\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport axiosInstance from '../utils/axiosInstance'; // Use axiosInstance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null); // User object including subscriptionActive\n  const [loading, setLoading] = useState(true); // Loading state during auth processes\n\n  // Logout function wrapped with useCallback to prevent unnecessary re-renders\n  const logout = useCallback(() => {\n    setUser(null);\n    localStorage.removeItem('token');\n  }, []);\n\n  // Function to verify JWT token and fetch user data\n  const verifyToken = useCallback(async token => {\n    try {\n      const response = await axiosInstance.get(`${API_URL}/api/auth/verify`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setUser(response.data.user); // Ensure response.data.user includes subscriptionActive\n    } catch (error) {\n      console.error('Token verification failed', error);\n      logout();\n    } finally {\n      setLoading(false);\n    }\n  }, [logout]);\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      verifyToken(token);\n    } else {\n      setLoading(false);\n    }\n  }, [verifyToken]);\n\n  // Login with email and password\n  const login = async (email, password) => {\n    try {\n      if (typeof email !== 'string' || typeof password !== 'string') {\n        throw new Error('Email and password must be strings');\n      }\n      const response = await axiosInstance.post(`${API_URL}/api/auth/login`, {\n        email,\n        password\n      });\n      const {\n        user,\n        token\n      } = response.data;\n      setUser(user);\n      localStorage.setItem('token', token);\n      return user;\n    } catch (error) {\n      var _error$response;\n      console.error('Login failed', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      throw error;\n    }\n  };\n\n  // Register with name, email, password, and plan\n  const register = async (name, email, password, plan) => {\n    try {\n      const response = await axiosInstance.post(`${API_URL}/api/auth/register`, {\n        name,\n        email,\n        password,\n        plan\n      });\n      const {\n        user,\n        token\n      } = response.data;\n      setUser(user);\n      localStorage.setItem('token', token);\n      return user;\n    } catch (error) {\n      var _error$response2;\n      console.error('Registration failed', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      throw error;\n    }\n  };\n\n  // Initiate Google OAuth login\n  const loginWithGoogle = () => {\n    window.location.href = `${API_URL}/api/auth/google`;\n  };\n\n  // Handle login success by storing token and verifying it\n  const handleLoginSuccess = useCallback(async token => {\n    localStorage.setItem('token', token);\n    await verifyToken(token);\n  }, [verifyToken]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      loginWithGoogle,\n      handleLoginSuccess,\n      register,\n      logout,\n      loading,\n      setUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"L8N3bdHCPGS20PKM6B/+3BLRo3Q=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","axiosInstance","jsxDEV","_jsxDEV","AuthContext","API_URL","process","env","REACT_APP_API_URL","AuthProvider","children","_s","user","setUser","loading","setLoading","logout","localStorage","removeItem","verifyToken","token","response","get","headers","Authorization","data","error","console","getItem","login","email","password","Error","post","setItem","_error$response","message","register","name","plan","_error$response2","loginWithGoogle","window","location","href","handleLoginSuccess","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/contexts/AuthContext.js"],"sourcesContent":["// src/contexts/AuthContext.js\r\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\r\nimport axiosInstance from '../utils/axiosInstance'; // Use axiosInstance\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null); // User object including subscriptionActive\r\n  const [loading, setLoading] = useState(true); // Loading state during auth processes\r\n\r\n  // Logout function wrapped with useCallback to prevent unnecessary re-renders\r\n  const logout = useCallback(() => {\r\n    setUser(null);\r\n    localStorage.removeItem('token');\r\n  }, []);\r\n\r\n  // Function to verify JWT token and fetch user data\r\n  const verifyToken = useCallback(async (token) => {\r\n    try {\r\n      const response = await axiosInstance.get(`${API_URL}/api/auth/verify`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      setUser(response.data.user); // Ensure response.data.user includes subscriptionActive\r\n    } catch (error) {\r\n      console.error('Token verification failed', error);\r\n      logout();\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [logout]);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      verifyToken(token);\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, [verifyToken]);\r\n\r\n  // Login with email and password\r\n  const login = async (email, password) => {\r\n    try {\r\n      if (typeof email !== 'string' || typeof password !== 'string') {\r\n        throw new Error('Email and password must be strings');\r\n      }\r\n      const response = await axiosInstance.post(`${API_URL}/api/auth/login`, { email, password });\r\n      const { user, token } = response.data;\r\n      setUser(user);\r\n      localStorage.setItem('token', token);\r\n      return user;\r\n    } catch (error) {\r\n      console.error('Login failed', error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Register with name, email, password, and plan\r\n  const register = async (name, email, password, plan) => {\r\n    try {\r\n      const response = await axiosInstance.post(`${API_URL}/api/auth/register`, {\r\n        name,\r\n        email,\r\n        password,\r\n        plan,\r\n      });\r\n      const { user, token } = response.data;\r\n      setUser(user);\r\n      localStorage.setItem('token', token);\r\n      return user;\r\n    } catch (error) {\r\n      console.error('Registration failed', error.response?.data || error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Initiate Google OAuth login\r\n  const loginWithGoogle = () => {\r\n    window.location.href = `${API_URL}/api/auth/google`;\r\n  };\r\n\r\n  // Handle login success by storing token and verifying it\r\n  const handleLoginSuccess = useCallback(async (token) => {\r\n    localStorage.setItem('token', token);\r\n    await verifyToken(token);\r\n  }, [verifyToken]);\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ user, login, loginWithGoogle, handleLoginSuccess, register, logout, loading, setUser }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}