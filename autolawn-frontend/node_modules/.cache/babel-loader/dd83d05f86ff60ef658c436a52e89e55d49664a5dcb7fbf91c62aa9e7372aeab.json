{"ast":null,"code":"// AUTOLAWN/frontend/src/api/dashboardApi.js\nimport axios from 'axios';\nimport { getMockAnalytics } from './mockAnalytics';\nconst API_URL = 'http://localhost:5000/api';\nconst getHeaders = () => ({\n  headers: {\n    Authorization: `Bearer ${localStorage.getItem('token')}`\n  }\n});\nconst handleApiError = (error, fallbackMessage) => {\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('token'); // Clear the expired token\n    window.location.href = '/login'; // Redirect to login page\n  } else if (error.response && error.response.status === 403) {\n    // Handle insufficient subscription tier error\n    console.warn('Insufficient subscription tier:', error.response.data);\n    return getMockAnalytics(); // Return mock data for Free tier\n  } else {\n    var _error$response;\n    console.error(fallbackMessage, ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  }\n  throw error;\n};\nexport const fetchJobs = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/jobs`, getHeaders());\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error fetching jobs:');\n  }\n};\nexport const fetchCustomers = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/customers`, getHeaders());\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error fetching customers:');\n  }\n};\nexport const fetchEmployees = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/employees`, getHeaders());\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error fetching employees:');\n  }\n};\nexport const fetchAnalytics = async (timeRange, customRange = null) => {\n  let startDate, endDate;\n  if (timeRange === 'custom' && customRange) {\n    startDate = customRange.start;\n    endDate = customRange.end;\n  } else {\n    const end = new Date();\n    const start = new Date();\n    start.setDate(end.getDate() - (timeRange === 'all' ? 365 : parseInt(timeRange)));\n    startDate = start.toISOString().split('T')[0];\n    endDate = end.toISOString().split('T')[0];\n  }\n  const url = `${API_URL}/analytics?startDate=${startDate}&endDate=${endDate}`;\n  try {\n    const response = await axios.get(url, getHeaders());\n\n    // Calculate revenue for recurring jobs\n    const analyticsData = response.data;\n    analyticsData.revenue = analyticsData.jobs.reduce((total, job) => {\n      if (job.isRecurring) {\n        return total + job.completionCount * job.price;\n      }\n      return total + job.price;\n    }, 0);\n    return analyticsData;\n  } catch (error) {\n    return handleApiError(error, 'Error fetching analytics:');\n  }\n};\nexport const fetchCustomerGrowth = async (startDate, endDate) => {\n  const response = await axios.get(`${API_URL}/analytics/customer-growth?startDate=${startDate}&endDate=${endDate}`, getHeaders());\n  return response.data;\n};\nexport const fetchRevenue = async (startDate, endDate) => {\n  const url = `${API_URL}/analytics/revenue?startDate=${startDate}&endDate=${endDate}`;\n  try {\n    const response = await axios.get(url, getHeaders());\n\n    // Calculate total revenue considering recurring jobs\n    const revenueData = response.data;\n    revenueData.totalRevenue = revenueData.jobs.reduce((total, job) => {\n      if (job.isRecurring) {\n        return total + job.completionCount * job.price;\n      }\n      return total + job.price;\n    }, 0);\n    return revenueData;\n  } catch (error) {\n    return handleApiError(error, 'Error fetching revenue:');\n  }\n};\nexport const fetchJobStatistics = async (startDate, endDate) => {\n  const url = `${API_URL}/analytics/job-statistics?startDate=${startDate}&endDate=${endDate}`;\n  try {\n    const response = await axios.get(url, getHeaders());\n\n    // Adjust job statistics to account for recurring jobs\n    const jobStats = response.data;\n    jobStats.totalRevenue = jobStats.jobs.reduce((total, job) => {\n      if (job.isRecurring) {\n        return total + job.completionCount * job.price;\n      }\n      return total + job.price;\n    }, 0);\n    jobStats.jobStatusDistribution = jobStats.jobs.reduce((acc, job) => {\n      if (job.isRecurring) {\n        acc[job.recurringStatus] = (acc[job.recurringStatus] || 0) + 1;\n      } else {\n        acc[job.status] = (acc[job.status] || 0) + 1;\n      }\n      return acc;\n    }, {});\n    return jobStats;\n  } catch (error) {\n    return handleApiError(error, 'Error fetching job statistics:');\n  }\n};\nexport const fetchEmployeePerformance = async (startDate, endDate) => {\n  const response = await axios.get(`${API_URL}/analytics/employee-performance?startDate=${startDate}&endDate=${endDate}`, getHeaders());\n  return response.data;\n};","map":{"version":3,"names":["axios","getMockAnalytics","API_URL","getHeaders","headers","Authorization","localStorage","getItem","handleApiError","error","fallbackMessage","response","status","removeItem","window","location","href","console","warn","data","_error$response","message","fetchJobs","get","fetchCustomers","fetchEmployees","fetchAnalytics","timeRange","customRange","startDate","endDate","start","end","Date","setDate","getDate","parseInt","toISOString","split","url","analyticsData","revenue","jobs","reduce","total","job","isRecurring","completionCount","price","fetchCustomerGrowth","fetchRevenue","revenueData","totalRevenue","fetchJobStatistics","jobStats","jobStatusDistribution","acc","recurringStatus","fetchEmployeePerformance"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/api/dashboardApi.js"],"sourcesContent":["// AUTOLAWN/frontend/src/api/dashboardApi.js\r\nimport axios from 'axios';\r\nimport { getMockAnalytics } from './mockAnalytics';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\nconst getHeaders = () => ({\r\n  headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\r\n});\r\n\r\nconst handleApiError = (error, fallbackMessage) => {\r\n  if (error.response && error.response.status === 401) {\r\n    localStorage.removeItem('token'); // Clear the expired token\r\n    window.location.href = '/login'; // Redirect to login page\r\n  } else if (error.response && error.response.status === 403) {\r\n    // Handle insufficient subscription tier error\r\n    console.warn('Insufficient subscription tier:', error.response.data);\r\n    return getMockAnalytics(); // Return mock data for Free tier\r\n  } else {\r\n    console.error(fallbackMessage, error.response?.data || error.message);\r\n  }\r\n  throw error;\r\n};\r\n\r\nexport const fetchJobs = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/jobs`, getHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Error fetching jobs:');\r\n  }\r\n};\r\n\r\nexport const fetchCustomers = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/customers`, getHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Error fetching customers:');\r\n  }\r\n};\r\n\r\nexport const fetchEmployees = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/employees`, getHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Error fetching employees:');\r\n  }\r\n};\r\n\r\nexport const fetchAnalytics = async (timeRange, customRange = null) => {\r\n  let startDate, endDate;\r\n\r\n  if (timeRange === 'custom' && customRange) {\r\n    startDate = customRange.start;\r\n    endDate = customRange.end;\r\n  } else {\r\n    const end = new Date();\r\n    const start = new Date();\r\n    start.setDate(end.getDate() - (timeRange === 'all' ? 365 : parseInt(timeRange)));\r\n    startDate = start.toISOString().split('T')[0];\r\n    endDate = end.toISOString().split('T')[0];\r\n  }\r\n\r\n  const url = `${API_URL}/analytics?startDate=${startDate}&endDate=${endDate}`;\r\n  try {\r\n    const response = await axios.get(url, getHeaders());\r\n\r\n    // Calculate revenue for recurring jobs\r\n    const analyticsData = response.data;\r\n    analyticsData.revenue = analyticsData.jobs.reduce((total, job) => {\r\n      if (job.isRecurring) {\r\n        return total + (job.completionCount * job.price);\r\n      }\r\n      return total + job.price;\r\n    }, 0);\r\n\r\n    return analyticsData;\r\n  } catch (error) {\r\n    return handleApiError(error, 'Error fetching analytics:');\r\n  }\r\n};\r\n\r\nexport const fetchCustomerGrowth = async (startDate, endDate) => {\r\n  const response = await axios.get(`${API_URL}/analytics/customer-growth?startDate=${startDate}&endDate=${endDate}`, getHeaders());\r\n  return response.data;\r\n};\r\n\r\nexport const fetchRevenue = async (startDate, endDate) => {\r\n  const url = `${API_URL}/analytics/revenue?startDate=${startDate}&endDate=${endDate}`;\r\n  try {\r\n    const response = await axios.get(url, getHeaders());\r\n\r\n    // Calculate total revenue considering recurring jobs\r\n    const revenueData = response.data;\r\n    revenueData.totalRevenue = revenueData.jobs.reduce((total, job) => {\r\n      if (job.isRecurring) {\r\n        return total + (job.completionCount * job.price);\r\n      }\r\n      return total + job.price;\r\n    }, 0);\r\n\r\n    return revenueData;\r\n  } catch (error) {\r\n    return handleApiError(error, 'Error fetching revenue:');\r\n  }\r\n};\r\n\r\n\r\nexport const fetchJobStatistics = async (startDate, endDate) => {\r\n  const url = `${API_URL}/analytics/job-statistics?startDate=${startDate}&endDate=${endDate}`;\r\n  try {\r\n    const response = await axios.get(url, getHeaders());\r\n\r\n    // Adjust job statistics to account for recurring jobs\r\n    const jobStats = response.data;\r\n    jobStats.totalRevenue = jobStats.jobs.reduce((total, job) => {\r\n      if (job.isRecurring) {\r\n        return total + (job.completionCount * job.price);\r\n      }\r\n      return total + job.price;\r\n    }, 0);\r\n\r\n    jobStats.jobStatusDistribution = jobStats.jobs.reduce((acc, job) => {\r\n      if (job.isRecurring) {\r\n        acc[job.recurringStatus] = (acc[job.recurringStatus] || 0) + 1;\r\n      } else {\r\n        acc[job.status] = (acc[job.status] || 0) + 1;\r\n      }\r\n      return acc;\r\n    }, {});\r\n\r\n    return jobStats;\r\n  } catch (error) {\r\n    return handleApiError(error, 'Error fetching job statistics:');\r\n  }\r\n};\r\n\r\nexport const fetchEmployeePerformance = async (startDate, endDate) => {\r\n  const response = await axios.get(`${API_URL}/analytics/employee-performance?startDate=${startDate}&endDate=${endDate}`, getHeaders());\r\n  return response.data;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}