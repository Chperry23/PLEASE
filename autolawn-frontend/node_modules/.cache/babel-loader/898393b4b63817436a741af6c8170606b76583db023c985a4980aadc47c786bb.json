{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api';\nconst axiosInstance = axios.create({\n  baseURL: API_BASE_URL\n});\nconst getToken = () => localStorage.getItem('token');\naxiosInstance.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\naxiosInstance.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // Implement your token refresh logic here\n      // const refreshToken = localStorage.getItem('refreshToken');\n      // const response = await axios.post(`${API_BASE_URL}/auth/refresh`, { refreshToken });\n      // const { token } = response.data;\n      // localStorage.setItem('token', token);\n      // originalRequest.headers['Authorization'] = `Bearer ${token}`;\n      // return axiosInstance(originalRequest);\n\n      // For now, we'll just redirect to login\n      window.location.href = '/login';\n      return Promise.reject(error);\n    } catch (refreshError) {\n      console.error('Error refreshing token:', refreshError);\n      // Redirect to login page\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport const fetchJobs = () => axiosInstance.get('/jobs');\nexport const fetchRoutes = () => axiosInstance.get('/routes');\nexport const saveRoute = route => axiosInstance.post('/routes', route);\nexport const deleteRoute = routeId => axiosInstance.delete(`/routes/${routeId}`);\nexport const fetchCalendarEvents = () => axiosInstance.get('/calendar-events');\nexport const createCalendarEvent = eventData => axiosInstance.post('/calendar-events', eventData);\nexport const updateCalendarEvent = (eventId, eventData) => axiosInstance.put(`/calendar-events/${eventId}`, eventData);\nexport const deleteCalendarEvent = eventId => axiosInstance.delete(`/calendar-events/${eventId}`);\nexport const updateRoute = (routeId, updatedData) => axiosInstance.put(`/routes/${routeId}`, updatedData);\nexport const updateJob = (jobId, updatedData) => axiosInstance.put(`/jobs/${jobId}`, updatedData);\nexport const scheduleRoute = (routeId, scheduleData) => axiosInstance.post(`/routes/${routeId}/schedule`, scheduleData);\nexport const calculateRouteTotal = routeId => axiosInstance.get(`/routes/${routeId}/total`);","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","axiosInstance","create","baseURL","getToken","localStorage","getItem","interceptors","request","use","config","token","headers","error","Promise","reject","response","originalRequest","status","_retry","window","location","href","refreshError","console","fetchJobs","get","fetchRoutes","saveRoute","route","post","deleteRoute","routeId","delete","fetchCalendarEvents","createCalendarEvent","eventData","updateCalendarEvent","eventId","put","deleteCalendarEvent","updateRoute","updatedData","updateJob","jobId","scheduleRoute","scheduleData","calculateRouteTotal"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/pages/BuildRoutes/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: API_BASE_URL,\r\n});\r\n\r\nconst getToken = () => localStorage.getItem('token');\r\n\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = getToken();\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\naxiosInstance.interceptors.response.use(\r\n  (response) => response,\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    if (error.response.status === 401 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      try {\r\n        // Implement your token refresh logic here\r\n        // const refreshToken = localStorage.getItem('refreshToken');\r\n        // const response = await axios.post(`${API_BASE_URL}/auth/refresh`, { refreshToken });\r\n        // const { token } = response.data;\r\n        // localStorage.setItem('token', token);\r\n        // originalRequest.headers['Authorization'] = `Bearer ${token}`;\r\n        // return axiosInstance(originalRequest);\r\n        \r\n        // For now, we'll just redirect to login\r\n        window.location.href = '/login';\r\n        return Promise.reject(error);\r\n      } catch (refreshError) {\r\n        console.error('Error refreshing token:', refreshError);\r\n        // Redirect to login page\r\n        window.location.href = '/login';\r\n        return Promise.reject(refreshError);\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const fetchJobs = () => axiosInstance.get('/jobs');\r\nexport const fetchRoutes = () => axiosInstance.get('/routes');\r\nexport const saveRoute = (route) => axiosInstance.post('/routes', route);\r\nexport const deleteRoute = (routeId) => axiosInstance.delete(`/routes/${routeId}`);\r\nexport const fetchCalendarEvents = () => axiosInstance.get('/calendar-events');\r\nexport const createCalendarEvent = (eventData) => axiosInstance.post('/calendar-events', eventData);\r\nexport const updateCalendarEvent = (eventId, eventData) => axiosInstance.put(`/calendar-events/${eventId}`, eventData);\r\nexport const deleteCalendarEvent = (eventId) => axiosInstance.delete(`/calendar-events/${eventId}`);\r\nexport const updateRoute = (routeId, updatedData) => axiosInstance.put(`/routes/${routeId}`, updatedData);\r\nexport const updateJob = (jobId, updatedData) => axiosInstance.put(`/jobs/${jobId}`, updatedData);\r\nexport const scheduleRoute = (routeId, scheduleData) => axiosInstance.post(`/routes/${routeId}/schedule`, scheduleData);\r\nexport const calculateRouteTotal = (routeId) => axiosInstance.get(`/routes/${routeId}/total`);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}