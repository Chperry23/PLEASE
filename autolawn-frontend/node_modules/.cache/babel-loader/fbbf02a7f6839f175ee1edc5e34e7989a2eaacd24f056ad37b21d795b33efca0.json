{"ast":null,"code":"var _jsxFileName = \"C:\\\\AUTOLAWN\\\\autolawn-frontend\\\\src\\\\components\\\\CustomerMap.js\",\n  _s = $RefreshSig$();\n// components/CustomerMap.js\nimport React, { useEffect, useRef } from 'react';\nimport { Loader } from '@googlemaps/js-api-loader';\n/* global google */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomerMap = ({\n  jobs,\n  route,\n  onOptimizeRoute\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  useEffect(() => {\n    console.log('Jobs passed to CustomerMap:', jobs); // Add this line to log the jobs data\n\n    const loader = new Loader({\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      version: \"weekly\"\n    });\n    loader.load().then(() => {\n      const map = new google.maps.Map(mapRef.current, {\n        center: {\n          lat: 0,\n          lng: 0\n        },\n        zoom: 2\n      });\n      const bounds = new google.maps.LatLngBounds();\n      jobs.forEach((job, index) => {\n        console.log('Processing job:', job); // Add this line to log each job\n        if (job.customer && job.customer.address && job.customer.address.lat && job.customer.address.lng) {\n          const position = new google.maps.LatLng(job.customer.address.lat, job.customer.address.lng);\n          const marker = new google.maps.Marker({\n            position: position,\n            map: map,\n            title: `${job.title} - ${job.customer.name}`,\n            label: (index + 1).toString()\n          });\n\n          // Add an info window to show job details\n          const infoWindow = new google.maps.InfoWindow({\n            content: `\n              <div>\n                <h3>${job.title}</h3>\n                <p>Customer: ${job.customer.name}</p>\n                <p>Address: ${job.customer.address.street}, ${job.customer.address.city}</p>\n                <p>Status: ${job.status}</p>\n              </div>\n            `\n          });\n          marker.addListener('click', () => {\n            infoWindow.open(map, marker);\n          });\n          bounds.extend(position);\n        } else {\n          console.log('Job missing required address data:', job); // Add this line to log jobs with missing data\n        }\n      });\n      if (bounds.isEmpty()) {\n        map.setCenter({\n          lat: 0,\n          lng: 0\n        });\n        map.setZoom(2);\n      } else {\n        map.fitBounds(bounds);\n      }\n    });\n  }, [jobs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        width: '100%',\n        height: '400px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), onOptimizeRoute && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onOptimizeRoute,\n      className: \"mt-2 bg-primary text-white px-4 py-2 rounded hover:bg-opacity-90\",\n      children: \"Optimize Route\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomerMap, \"9mn7MMe4fPaZ50ApsOpRWF2HbFg=\");\n_c = CustomerMap;\nexport default CustomerMap;\nvar _c;\n$RefreshReg$(_c, \"CustomerMap\");","map":{"version":3,"names":["React","useEffect","useRef","Loader","jsxDEV","_jsxDEV","CustomerMap","jobs","route","onOptimizeRoute","_s","mapRef","console","log","loader","apiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","version","load","then","map","google","maps","Map","current","center","lat","lng","zoom","bounds","LatLngBounds","forEach","job","index","customer","address","position","LatLng","marker","Marker","title","name","label","toString","infoWindow","InfoWindow","content","street","city","status","addListener","open","extend","isEmpty","setCenter","setZoom","fitBounds","children","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","_c","$RefreshReg$"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/components/CustomerMap.js"],"sourcesContent":["// components/CustomerMap.js\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { Loader } from '@googlemaps/js-api-loader';\r\n/* global google */\r\nconst CustomerMap = ({ jobs, route, onOptimizeRoute }) => {\r\n  const mapRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    console.log('Jobs passed to CustomerMap:', jobs); // Add this line to log the jobs data\r\n\r\n    const loader = new Loader({\r\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n      version: \"weekly\",\r\n    });\r\n\r\n    loader.load().then(() => {\r\n      const map = new google.maps.Map(mapRef.current, {\r\n        center: { lat: 0, lng: 0 },\r\n        zoom: 2,\r\n      });\r\n\r\n      const bounds = new google.maps.LatLngBounds();\r\n\r\n      jobs.forEach((job, index) => {\r\n        console.log('Processing job:', job); // Add this line to log each job\r\n        if (job.customer && job.customer.address && job.customer.address.lat && job.customer.address.lng) {\r\n          const position = new google.maps.LatLng(job.customer.address.lat, job.customer.address.lng);\r\n          const marker = new google.maps.Marker({\r\n            position: position,\r\n            map: map,\r\n            title: `${job.title} - ${job.customer.name}`,\r\n            label: (index + 1).toString(),\r\n          });\r\n\r\n          // Add an info window to show job details\r\n          const infoWindow = new google.maps.InfoWindow({\r\n            content: `\r\n              <div>\r\n                <h3>${job.title}</h3>\r\n                <p>Customer: ${job.customer.name}</p>\r\n                <p>Address: ${job.customer.address.street}, ${job.customer.address.city}</p>\r\n                <p>Status: ${job.status}</p>\r\n              </div>\r\n            `\r\n          });\r\n\r\n          marker.addListener('click', () => {\r\n            infoWindow.open(map, marker);\r\n          });\r\n\r\n          bounds.extend(position);\r\n        } else {\r\n          console.log('Job missing required address data:', job); // Add this line to log jobs with missing data\r\n        }\r\n      });\r\n\r\n      if (bounds.isEmpty()) {\r\n        map.setCenter({ lat: 0, lng: 0 });\r\n        map.setZoom(2);\r\n      } else {\r\n        map.fitBounds(bounds);\r\n      }\r\n    });\r\n  }, [jobs]);\r\n\r\n  return (\r\n    <div>\r\n      <div ref={mapRef} style={{ width: '100%', height: '400px' }}></div>\r\n      {onOptimizeRoute && (\r\n        <button \r\n          onClick={onOptimizeRoute}\r\n          className=\"mt-2 bg-primary text-white px-4 py-2 rounded hover:bg-opacity-90\"\r\n        >\r\n          Optimize Route\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomerMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}