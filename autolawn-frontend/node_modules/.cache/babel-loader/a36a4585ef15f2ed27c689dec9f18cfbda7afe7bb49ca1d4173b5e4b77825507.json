{"ast":null,"code":"var _jsxFileName = \"C:\\\\AUTOLAWN\\\\autolawn-frontend\\\\src\\\\pages\\\\BuildRoutes\\\\Scheduling.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchJobs, saveSchedule } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Scheduling = ({\n  routes,\n  setSuccessMessage\n}) => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [selectedRoute, setSelectedRoute] = useState(null);\n  const [scheduleDate, setScheduleDate] = useState('');\n  useEffect(() => {\n    loadJobs();\n  }, []);\n  const loadJobs = async () => {\n    try {\n      const jobsData = await fetchJobs();\n      setJobs(jobsData);\n    } catch (error) {\n      console.error('Error loading jobs:', error);\n    }\n  };\n  const handleSchedule = async () => {\n    if (!selectedRoute || !scheduleDate) {\n      setSuccessMessage('Please select a route and date');\n      return;\n    }\n    try {\n      await saveSchedule(selectedRoute._id, {\n        date: scheduleDate\n      });\n      setSuccessMessage('Route scheduled successfully!');\n    } catch (error) {\n      console.error('Error scheduling route:', error);\n      setSuccessMessage('Failed to schedule route');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Scheduling\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Route\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => setSelectedRoute(routes.find(r => r._id === e.target.value)),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a route\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), routes.map(route => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: route._id,\n          children: route.name\n        }, route._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: scheduleDate,\n        onChange: e => setScheduleDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSchedule,\n      children: \"Schedule Route\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Jobs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: jobs.map(job => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [job.title, \" - \", job.scheduledDate]\n        }, job._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Scheduling, \"Fun5QsKDcT9t2mRR/MEIcDJEAcA=\");\n_c = Scheduling;\nexport default Scheduling;\nvar _c;\n$RefreshReg$(_c, \"Scheduling\");","map":{"version":3,"names":["React","useState","useEffect","fetchJobs","saveSchedule","jsxDEV","_jsxDEV","Scheduling","routes","setSuccessMessage","_s","jobs","setJobs","selectedRoute","setSelectedRoute","scheduleDate","setScheduleDate","loadJobs","jobsData","error","console","handleSchedule","_id","date","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","find","r","target","value","map","route","name","type","onClick","job","title","scheduledDate","_c","$RefreshReg$"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/pages/BuildRoutes/Scheduling.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { fetchJobs, saveSchedule } from './api';\r\n\r\nconst Scheduling = ({ routes, setSuccessMessage }) => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [selectedRoute, setSelectedRoute] = useState(null);\r\n  const [scheduleDate, setScheduleDate] = useState('');\r\n\r\n  useEffect(() => {\r\n    loadJobs();\r\n  }, []);\r\n\r\n  const loadJobs = async () => {\r\n    try {\r\n      const jobsData = await fetchJobs();\r\n      setJobs(jobsData);\r\n    } catch (error) {\r\n      console.error('Error loading jobs:', error);\r\n    }\r\n  };\r\n\r\n  const handleSchedule = async () => {\r\n    if (!selectedRoute || !scheduleDate) {\r\n      setSuccessMessage('Please select a route and date');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await saveSchedule(selectedRoute._id, { date: scheduleDate });\r\n      setSuccessMessage('Route scheduled successfully!');\r\n    } catch (error) {\r\n      console.error('Error scheduling route:', error);\r\n      setSuccessMessage('Failed to schedule route');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Scheduling</h2>\r\n      <div>\r\n        <h3>Select Route</h3>\r\n        <select onChange={(e) => setSelectedRoute(routes.find(r => r._id === e.target.value))}>\r\n          <option value=\"\">Select a route</option>\r\n          {routes.map(route => (\r\n            <option key={route._id} value={route._id}>{route.name}</option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <h3>Select Date</h3>\r\n        <input type=\"date\" value={scheduleDate} onChange={(e) => setScheduleDate(e.target.value)} />\r\n      </div>\r\n      <button onClick={handleSchedule}>Schedule Route</button>\r\n      \r\n      <div>\r\n        <h3>Jobs</h3>\r\n        <ul>\r\n          {jobs.map(job => (\r\n            <li key={job._id}>{job.title} - {job.scheduledDate}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scheduling;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}