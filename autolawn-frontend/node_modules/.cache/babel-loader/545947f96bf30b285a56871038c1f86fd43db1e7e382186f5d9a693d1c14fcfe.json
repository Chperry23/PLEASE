{"ast":null,"code":"var _jsxFileName = \"C:\\\\AUTOLAWN\\\\autolawn-frontend\\\\src\\\\components\\\\CustomerMap.js\",\n  _s = $RefreshSig$();\n// components/CustomerMap.js\nimport React, { useEffect, useRef } from 'react';\nimport { Loader } from '@googlemaps/js-api-loader';\n/* global google */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomerMap = ({\n  route\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  useEffect(() => {\n    console.log('Route passed to CustomerMap:', route);\n    if (!route || !route.jobs || !Array.isArray(route.jobs)) {\n      console.error('Invalid route data:', route);\n      return;\n    }\n    const loader = new Loader({\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      version: \"weekly\"\n    });\n    loader.load().then(() => {\n      const map = new google.maps.Map(mapRef.current, {\n        center: {\n          lat: 0,\n          lng: 0\n        },\n        zoom: 2\n      });\n      const bounds = new google.maps.LatLngBounds();\n      route.jobs.forEach((jobItem, index) => {\n        const job = jobItem.job;\n        console.log('Processing job:', job);\n        if (job && job.customer && job.customer.address) {\n          const {\n            lat,\n            lng\n          } = job.customer.address;\n          if (lat && lng) {\n            const position = new google.maps.LatLng(lat, lng);\n            const marker = new google.maps.Marker({\n              position: position,\n              map: map,\n              title: `${job.title} - ${job.customer.name}`,\n              label: (index + 1).toString()\n            });\n            const infoWindow = new google.maps.InfoWindow({\n              content: `\n                <div>\n                  <h3>${job.title}</h3>\n                  <p>Customer: ${job.customer.name}</p>\n                  <p>Address: ${job.customer.address.street}, ${job.customer.address.city}</p>\n                  <p>Status: ${job.status}</p>\n                </div>\n              `\n            });\n            marker.addListener('click', () => {\n              infoWindow.open(map, marker);\n            });\n            bounds.extend(position);\n          } else {\n            console.log('Job missing lat/lng:', job);\n          }\n        } else {\n          console.log('Job missing required data:', job);\n        }\n      });\n      if (!bounds.isEmpty()) {\n        map.fitBounds(bounds);\n      } else {\n        map.setCenter({\n          lat: 0,\n          lng: 0\n        });\n        map.setZoom(2);\n      }\n    });\n  }, [route]);\n  if (!route || !route.jobs || !Array.isArray(route.jobs)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No valid route data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        width: '100%',\n        height: '400px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomerMap, \"9mn7MMe4fPaZ50ApsOpRWF2HbFg=\");\n_c = CustomerMap;\nexport default CustomerMap;\nvar _c;\n$RefreshReg$(_c, \"CustomerMap\");","map":{"version":3,"names":["React","useEffect","useRef","Loader","jsxDEV","_jsxDEV","CustomerMap","route","_s","mapRef","console","log","jobs","Array","isArray","error","loader","apiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","version","load","then","map","google","maps","Map","current","center","lat","lng","zoom","bounds","LatLngBounds","forEach","jobItem","index","job","customer","address","position","LatLng","marker","Marker","title","name","label","toString","infoWindow","InfoWindow","content","street","city","status","addListener","open","extend","isEmpty","fitBounds","setCenter","setZoom","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","width","height","_c","$RefreshReg$"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/components/CustomerMap.js"],"sourcesContent":["// components/CustomerMap.js\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { Loader } from '@googlemaps/js-api-loader';\r\n/* global google */\r\nconst CustomerMap = ({ route }) => {\r\n  const mapRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    console.log('Route passed to CustomerMap:', route);\r\n\r\n    if (!route || !route.jobs || !Array.isArray(route.jobs)) {\r\n      console.error('Invalid route data:', route);\r\n      return;\r\n    }\r\n\r\n    const loader = new Loader({\r\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n      version: \"weekly\",\r\n    });\r\n\r\n    loader.load().then(() => {\r\n      const map = new google.maps.Map(mapRef.current, {\r\n        center: { lat: 0, lng: 0 },\r\n        zoom: 2,\r\n      });\r\n\r\n      const bounds = new google.maps.LatLngBounds();\r\n\r\n      route.jobs.forEach((jobItem, index) => {\r\n        const job = jobItem.job;\r\n        console.log('Processing job:', job);\r\n        if (job && job.customer && job.customer.address) {\r\n          const { lat, lng } = job.customer.address;\r\n          if (lat && lng) {\r\n            const position = new google.maps.LatLng(lat, lng);\r\n            const marker = new google.maps.Marker({\r\n              position: position,\r\n              map: map,\r\n              title: `${job.title} - ${job.customer.name}`,\r\n              label: (index + 1).toString(),\r\n            });\r\n\r\n            const infoWindow = new google.maps.InfoWindow({\r\n              content: `\r\n                <div>\r\n                  <h3>${job.title}</h3>\r\n                  <p>Customer: ${job.customer.name}</p>\r\n                  <p>Address: ${job.customer.address.street}, ${job.customer.address.city}</p>\r\n                  <p>Status: ${job.status}</p>\r\n                </div>\r\n              `\r\n            });\r\n\r\n            marker.addListener('click', () => {\r\n              infoWindow.open(map, marker);\r\n            });\r\n\r\n            bounds.extend(position);\r\n          } else {\r\n            console.log('Job missing lat/lng:', job);\r\n          }\r\n        } else {\r\n          console.log('Job missing required data:', job);\r\n        }\r\n      });\r\n\r\n      if (!bounds.isEmpty()) {\r\n        map.fitBounds(bounds);\r\n      } else {\r\n        map.setCenter({ lat: 0, lng: 0 });\r\n        map.setZoom(2);\r\n      }\r\n    });\r\n  }, [route]);\r\n\r\n  if (!route || !route.jobs || !Array.isArray(route.jobs)) {\r\n    return <div>No valid route data available</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div ref={mapRef} style={{ width: '100%', height: '400px' }}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomerMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}