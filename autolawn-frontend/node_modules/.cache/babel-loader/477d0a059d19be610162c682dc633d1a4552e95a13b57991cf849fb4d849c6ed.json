{"ast":null,"code":"var _jsxFileName = \"C:\\\\AUTOLAWN\\\\autolawn-frontend\\\\src\\\\pages\\\\BuildRoutes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ChevronLeftIcon, ChevronRightIcon, PlusIcon, TrashIcon, ChevronDownIcon, ChevronUpIcon } from '@heroicons/react/24/outline';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { CheckIcon } from '@heroicons/react/24/solid';\nimport { API_BASE_URL, DAYS_OF_WEEK, defaultRoutes, validateRoutesStructure, fetchWithAuth } from '../components/utils';\nimport Header from '../components/Header';\nimport debounce from 'lodash/debounce';\nimport { ClipLoader } from 'react-spinners';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BuildRoutes = () => {\n  _s();\n  const [routes, setRoutes] = useState(defaultRoutes);\n  const [jobPool, setJobPool] = useState([]);\n  const [selectedDay, setSelectedDay] = useState(DAYS_OF_WEEK[0]);\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(''); // New state for success messages\n  const [visibleRoutesRange, setVisibleRoutesRange] = useState({\n    start: 0,\n    end: 3\n  });\n  const [expandedJobs, setExpandedJobs] = useState({});\n  const [selectedJobs, setSelectedJobs] = useState([]);\n  const [employees, setEmployees] = useState([]);\n  const [crews, setCrews] = useState([]);\n  const [confirmDialog, setConfirmDialog] = useState({\n    isOpen: false,\n    routeIndex: null\n  });\n  const initializeData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const [fetchedRoutesResponse, fetchedJobsResponse, fetchedEmployeesResponse, fetchedCrewsResponse] = await Promise.all([fetchWithAuth('/routes'), fetchWithAuth('/routes/jobs/available'), fetchWithAuth('/employees'), fetchWithAuth('/crews')]);\n      const fetchedRoutes = (fetchedRoutesResponse === null || fetchedRoutesResponse === void 0 ? void 0 : fetchedRoutesResponse.routes) || defaultRoutes;\n      let fetchedJobs = fetchedJobsResponse || [];\n      const fetchedEmployees = fetchedEmployeesResponse || [];\n      const fetchedCrews = fetchedCrewsResponse || [];\n      const validatedRoutes = validateRoutesStructure(fetchedRoutes);\n\n      // Filter and process jobs\n      const now = new Date();\n      const normalizeDate = date => new Date(date.getFullYear(), date.getMonth(), date.getDate());\n      const today = normalizeDate(now);\n      fetchedJobs = fetchedJobs.filter(job => {\n        // Filter out jobs with future last service dates\n        if (job.lastServiceDate) {\n          const lastServiceDate = normalizeDate(new Date(job.lastServiceDate));\n          if (lastServiceDate > today) {\n            console.warn(`Job ${job._id} has a future last service date: ${job.lastServiceDate}`);\n            return false;\n          }\n        }\n\n        // Filter out completed jobs\n        if (job.status === 'Completed') {\n          return false;\n        }\n\n        // Include jobs that haven't been serviced yet (no lastServiceDate)\n        if (!job.lastServiceDate) {\n          return true;\n        }\n\n        // Calculate days since last service\n        const lastServiceDate = normalizeDate(new Date(job.lastServiceDate));\n        const daysSinceLastService = Math.floor((today - lastServiceDate) / (1000 * 60 * 60 * 24));\n\n        // Apply recurrence pattern logic\n        switch (job.recurrencePattern) {\n          case 'Weekly':\n            return daysSinceLastService >= 7;\n          case 'Bi-weekly':\n            return daysSinceLastService >= 14;\n          case 'Monthly':\n            return daysSinceLastService >= 30;\n          default:\n            // For one-time jobs or other patterns\n            return !job.isRecurring;\n        }\n      });\n\n      // Process routes to remove completed jobs\n      const processedRoutes = Object.fromEntries(Object.entries(validatedRoutes).map(([day, routes]) => [day, routes.map(route => ({\n        ...route,\n        jobs: route.jobs.filter(job => job.status !== 'Completed')\n      }))]));\n      setRoutes(processedRoutes);\n      setJobPool(fetchedJobs);\n      setEmployees(fetchedEmployees);\n      setCrews(fetchedCrews);\n      console.log('Initialized data:', {\n        routes: processedRoutes,\n        jobPool: fetchedJobs,\n        employees: fetchedEmployees,\n        crews: fetchedCrews\n      });\n    } catch (err) {\n      console.error('Error fetching data:', err);\n      setError('Failed to load routes, jobs, employees, and crews. Please refresh the page.');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    initializeData();\n  }, [initializeData]);\n  const saveRoutes = useCallback(async (updatedRoutes = routes) => {\n    setSaving(true);\n    try {\n      const routesToSave = Object.entries(updatedRoutes).reduce((acc, [day, dayRoutes]) => {\n        acc[day] = dayRoutes.map(route => {\n          var _route$employee, _route$crew;\n          return {\n            index: route.index,\n            jobs: route.jobs.map(job => typeof job === 'string' ? job : job._id),\n            employee: (_route$employee = route.employee) === null || _route$employee === void 0 ? void 0 : _route$employee._id,\n            crew: (_route$crew = route.crew) === null || _route$crew === void 0 ? void 0 : _route$crew._id\n          };\n        });\n        return acc;\n      }, {});\n      await fetchWithAuth('/routes', 'PUT', {\n        routes: routesToSave\n      });\n      console.log('Routes saved successfully:', routesToSave);\n    } catch (err) {\n      console.error('Error saving routes:', err);\n      setError('Failed to save routes. Please try again.');\n    } finally {\n      setSaving(false);\n    }\n  }, [routes]);\n  const debouncedSaveRoutes = useCallback(debounce(saveRoutes, 1000), [saveRoutes]);\n  const onDragEnd = useCallback(result => {\n    const {\n      source,\n      destination\n    } = result;\n    if (!destination) {\n      console.log(\"Drag operation cancelled or no destination found.\");\n      return;\n    }\n    console.log(\"Drag started from:\", source.droppableId, \"to\", destination.droppableId);\n    console.log(\"Before moving jobs:\", {\n      jobPool,\n      routes\n    });\n    setRoutes(prevRoutes => {\n      const updatedRoutes = {\n        ...prevRoutes\n      };\n      const sourceId = source.droppableId.split('-');\n      const destId = destination.droppableId.split('-');\n      const sourceRouteIndex = sourceId[0] === 'route' ? parseInt(sourceId[1], 10) : null;\n      const destRouteIndex = destId[0] === 'route' ? parseInt(destId[1], 10) : null;\n\n      // Moving from job pool to a route\n      if (source.droppableId === 'jobPool-0' && destRouteIndex !== null) {\n        console.log(\"Moving jobs from job pool to route:\", destRouteIndex);\n        const selectedJobsToMove = selectedJobs.length > 0 ? jobPool.filter(job => selectedJobs.includes(job._id)) : [jobPool[source.index]]; // Only the single dragged job\n\n        console.log(\"Selected jobs to move from job pool:\", selectedJobsToMove);\n\n        // Add jobs to the route\n        selectedJobsToMove.forEach((job, index) => {\n          updatedRoutes[selectedDay][destRouteIndex].jobs.splice(destination.index + index, 0, job);\n          console.log(`Job added to route ${destRouteIndex}:`, job);\n        });\n\n        // Remove moved jobs from job pool\n        const updatedJobPool = jobPool.filter(job => !selectedJobs.includes(job._id));\n        if (selectedJobs.length === 0) {\n          // If no jobs were selected, remove the single dragged job from the pool\n          updatedJobPool.splice(source.index, 1);\n        }\n        setJobPool(updatedJobPool);\n        console.log(\"Updated job pool after move:\", updatedJobPool);\n      }\n\n      // Moving between routes or within the same route\n      if (sourceRouteIndex !== null && destRouteIndex !== null) {\n        console.log(`Moving jobs from route ${sourceRouteIndex} to route ${destRouteIndex}`);\n        selectedJobs.forEach((jobId, index) => {\n          // Find job in the source route\n          const jobIndex = updatedRoutes[selectedDay][sourceRouteIndex].jobs.findIndex(job => job._id === jobId);\n          const [removedJob] = updatedRoutes[selectedDay][sourceRouteIndex].jobs.splice(jobIndex, 1);\n          console.log(`Removed job ${jobId} from route ${sourceRouteIndex}`, removedJob);\n\n          // Add job to destination route\n          if (removedJob) {\n            updatedRoutes[selectedDay][destRouteIndex].jobs.splice(destination.index, 0, removedJob);\n            console.log(`Added job ${jobId} to route ${destRouteIndex}`);\n          }\n        });\n      }\n      console.log(\"After moving jobs:\", {\n        jobPool,\n        updatedRoutes\n      });\n      setSelectedJobs([]); // Clear selected jobs after moving\n      return updatedRoutes;\n    });\n    debouncedSaveRoutes();\n  }, [jobPool, selectedJobs, selectedDay, debouncedSaveRoutes]);\n  const addNewRoute = useCallback(async () => {\n    const newRouteState = {\n      ...routes,\n      [selectedDay]: [...routes[selectedDay], {\n        index: routes[selectedDay].length,\n        jobs: []\n      }]\n    };\n    setRoutes(newRouteState);\n    await saveRoutes(newRouteState);\n  }, [routes, selectedDay, saveRoutes]);\n  const deleteRoute = useCallback(async routeIndex => {\n    try {\n      setRoutes(prevRoutes => {\n        const updatedRoutes = {\n          ...prevRoutes\n        };\n        const deletedRoute = updatedRoutes[selectedDay].splice(routeIndex, 1)[0];\n        setJobPool(prevJobPool => [...prevJobPool, ...deletedRoute.jobs]);\n        updatedRoutes[selectedDay] = updatedRoutes[selectedDay].map((route, idx) => ({\n          ...route,\n          index: idx\n        }));\n        return updatedRoutes;\n      });\n      await fetchWithAuth(`/routes/${selectedDay}/${routeIndex}`, 'DELETE');\n      await saveRoutes(); // Ensure routes are saved to keep consistent state\n    } catch (error) {\n      console.error('Error deleting route:', error);\n      setError('Failed to delete route. Please try again.');\n    }\n  }, [selectedDay, saveRoutes]);\n  const removeJobFromRoute = async (routeIndex, jobIndex) => {\n    try {\n      setRoutes(prevRoutes => {\n        const updatedRoutes = {\n          ...prevRoutes\n        };\n        const removedJob = updatedRoutes[selectedDay][routeIndex].jobs.splice(jobIndex, 1)[0];\n        setJobPool(prevJobPool => [...prevJobPool, removedJob]);\n        return updatedRoutes;\n      });\n      await fetchWithAuth(`/routes/${selectedDay}/${routeIndex}`, 'PUT', {\n        index: routeIndex,\n        jobs: routes[selectedDay][routeIndex].jobs\n      });\n      await saveRoutes();\n    } catch (error) {\n      console.error('Error removing job from route:', error);\n      setError('Failed to remove job from route. Please try again.');\n    }\n  };\n  const [assigningRoutes, setAssigningRoutes] = useState({});\n  const assignRoute = async (routeIndex, assigneeId) => {\n    const [type, id] = assigneeId.split('-');\n    setAssigningRoutes(prev => ({\n      ...prev,\n      [routeIndex]: true\n    }));\n    try {\n      console.log(`Assigning ${type} with ID: ${id} to route ${routeIndex} for day ${selectedDay}`);\n\n      // Sending the appropriate payload to the API\n      const response = await fetchWithAuth(`/routes/${selectedDay}/${routeIndex}/assign`, 'PUT', {\n        [type]: id\n      });\n\n      // Since fetchWithAuth returns parsed data directly, no need to check response.ok or status\n      console.log('Response from server:', response);\n\n      // Ensure the response contains the expected fields, otherwise consider it an error\n      if (!response || !response._id) {\n        throw new Error('Invalid response format');\n      }\n\n      // Assuming the response is valid and contains the updated route\n      const updatedRoute = response; // Use the response directly since fetchWithAuth returns the data\n      setRoutes(prevRoutes => {\n        const updatedDayRoutes = prevRoutes[selectedDay].map(route => {\n          if (route.index === routeIndex) {\n            var _employees$find, _crews$find;\n            return {\n              ...route,\n              employee: type === 'employee' ? {\n                _id: id,\n                name: (_employees$find = employees.find(e => e._id === id)) === null || _employees$find === void 0 ? void 0 : _employees$find.name\n              } : null,\n              crew: type === 'crew' ? {\n                _id: id,\n                name: (_crews$find = crews.find(c => c._id === id)) === null || _crews$find === void 0 ? void 0 : _crews$find.name\n              } : null\n            };\n          }\n          return route;\n        });\n        return {\n          ...prevRoutes,\n          [selectedDay]: updatedDayRoutes\n        };\n      });\n      console.log(`Route assigned successfully: day ${selectedDay}, index ${routeIndex}, ${type}: ${id}`);\n    } catch (error) {\n      console.error('Error assigning route:', error);\n      setError('Failed to assign route. Please try again.');\n    } finally {\n      setAssigningRoutes(prev => ({\n        ...prev,\n        [routeIndex]: false\n      }));\n    }\n  };\n  const handleJobSelection = job => {\n    setSelectedJobs(prevSelectedJobs => {\n      if (prevSelectedJobs.includes(job._id)) {\n        return prevSelectedJobs.filter(id => id !== job._id);\n      } else {\n        return [...prevSelectedJobs, job._id];\n      }\n    });\n  };\n  const toggleJobExpansion = jobId => {\n    setExpandedJobs(prev => ({\n      ...prev,\n      [jobId]: !prev[jobId]\n    }));\n  };\n  const changeSelectedDay = direction => {\n    setSelectedDay(prevDay => {\n      const currentIndex = DAYS_OF_WEEK.indexOf(prevDay);\n      const newIndex = (currentIndex + direction + DAYS_OF_WEEK.length) % DAYS_OF_WEEK.length;\n      return DAYS_OF_WEEK[newIndex];\n    });\n    setVisibleRoutesRange({\n      start: 0,\n      end: 3\n    });\n  };\n  const cycleVisibleRoutes = direction => {\n    setVisibleRoutesRange(prevRange => {\n      const totalRoutes = routes[selectedDay].length;\n      const newStart = (prevRange.start + direction + totalRoutes) % totalRoutes;\n      const newEnd = Math.min(newStart + 3, totalRoutes);\n      return {\n        start: newStart,\n        end: newEnd\n      };\n    });\n  };\n  const renderLegend = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-2 p-2 bg-gray-800 rounded-lg text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"font-bold mb-2\",\n      children: \"Job Color Legend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"space-y-1\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"w-4 h-4 inline-block bg-green-600 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this), \" One-time job\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"w-4 h-4 inline-block bg-blue-600 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this), \" Weekly recurring job\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"w-4 h-4 inline-block bg-yellow-600 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this), \" Bi-weekly recurring job\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"w-4 h-4 inline-block bg-purple-600 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this), \" Monthly recurring job\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 378,\n    columnNumber: 5\n  }, this);\n  const shouldReturnToPool = (job, now) => {\n    if (!job.isRecurring) return false;\n    const normalizeDate = date => new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    const lastServiceDate = normalizeDate(new Date(job.lastServiceDate));\n    const today = normalizeDate(now);\n    const daysSinceLastService = Math.floor((today - lastServiceDate) / (1000 * 60 * 60 * 24));\n    switch (job.recurrencePattern) {\n      case 'Weekly':\n        return daysSinceLastService >= 7;\n      case 'Bi-weekly':\n        return daysSinceLastService >= 14;\n      case 'Monthly':\n        return daysSinceLastService >= 30;\n      default:\n        return false;\n    }\n  };\n\n  // Updated handleCompleteJob function\n  const handleCompleteJob = async jobIds => {\n    try {\n      const jobsToComplete = jobIds.filter(jobId => {\n        const job = jobPool.find(j => j._id === jobId) || Object.values(routes).flatMap(dayRoutes => dayRoutes.flatMap(route => route.jobs)).find(j => j._id === jobId);\n        return job && job.status !== 'Completed';\n      });\n      if (jobsToComplete.length === 0) {\n        setError(\"All selected jobs are already completed.\");\n        return;\n      }\n      const completedJobs = await Promise.all(jobsToComplete.map(async jobId => {\n        // fetchWithAuth returns data directly\n        const data = await fetchWithAuth(`/jobs/${jobId}/complete`, 'POST', {});\n        return data; // data contains the updated job\n      }));\n      console.log('Completed jobs:', completedJobs);\n\n      // Update job pool by removing completed jobs\n      setJobPool(prevJobs => prevJobs.filter(j => !jobsToComplete.includes(j._id)));\n\n      // Update routes by removing completed jobs\n      setRoutes(prevRoutes => {\n        const updatedRoutes = {\n          ...prevRoutes\n        };\n        for (const day in updatedRoutes) {\n          updatedRoutes[day] = updatedRoutes[day].map(route => ({\n            ...route,\n            jobs: route.jobs.filter(job => !jobsToComplete.includes(job._id))\n          }));\n        }\n        return updatedRoutes;\n      });\n      setSelectedJobs([]);\n      setSuccessMessage(\"Jobs completed successfully!\");\n      await saveRoutes(); // Ensure routes are saved after completion\n    } catch (error) {\n      console.error('Error completing jobs:', error);\n      setError(`Failed to complete jobs: ${error.message}`);\n    }\n  };\n  const renderJobCard = (job, isInRoute = false, routeIndex, jobIndex) => {\n    var _job$customer, _job$location;\n    if (!job) return null; // Safeguard against undefined jobs\n\n    const isExpanded = expandedJobs[job._id];\n    const customerName = ((_job$customer = job.customer) === null || _job$customer === void 0 ? void 0 : _job$customer.name) || 'No Customer';\n    const isSelected = selectedJobs.includes(job._id);\n    const lastServiceDate = job.lastServiceDate ? new Date(job.lastServiceDate).toLocaleDateString() : 'No Service Date';\n    const jobColors = {\n      oneTime: 'bg-green-600 hover:bg-green-700',\n      weekly: 'bg-blue-600 hover:bg-blue-700',\n      biWeekly: 'bg-teal-600 hover:bg-teal-700',\n      monthly: 'bg-cyan-600 hover:bg-cyan-700'\n    };\n    const jobStyle = {\n      backgroundColor: job.isRecurring ? job.recurrencePattern === 'Weekly' ? jobColors.weekly : job.recurrencePattern === 'Bi-weekly' ? jobColors.biWeekly : job.recurrencePattern === 'Monthly' ? jobColors.monthly : jobColors.recurring : jobColors.oneTime,\n      border: isSelected ? '2px solid white' : 'none'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `p-2 rounded-md shadow-md ${jobStyle.backgroundColor}`,\n      style: {\n        border: jobStyle.border\n      },\n      onClick: () => handleJobSelection(job),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-bold text-white\",\n          children: customerName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2\",\n          children: [isInRoute && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => {\n              e.stopPropagation();\n              removeJobFromRoute(routeIndex, jobIndex);\n            },\n            className: \"text-red-500 hover:text-red-700\",\n            children: /*#__PURE__*/_jsxDEV(TrashIcon, {\n              className: \"h-5 w-5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 512,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => {\n              e.stopPropagation();\n              toggleJobExpansion(job._id);\n            },\n            children: isExpanded ? /*#__PURE__*/_jsxDEV(ChevronUpIcon, {\n              className: \"h-5 w-5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(ChevronDownIcon, {\n              className: \"h-5 w-5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 69\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 9\n      }, this), isExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-300\",\n          children: job.title || 'No Title'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-400\",\n          children: ((_job$location = job.location) === null || _job$location === void 0 ? void 0 : _job$location.address) || 'No Address'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-400\",\n          children: [\"Revenue: $\", job.cost || 'No Price']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-400\",\n          children: [\"Type: \", job.isRecurring ? 'Recurring' : 'One-time']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-400\",\n          children: [\"Last Service Date: \", lastServiceDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 7\n    }, this);\n  };\n  const handleCompleteRoute = async routeIndex => {\n    try {\n      const now = new Date();\n      const routeJobs = routes[selectedDay][routeIndex].jobs.filter(job => job.status !== 'Completed');\n      const completedJobs = await Promise.all(routeJobs.map(async job => {\n        const data = await fetchWithAuth(`/jobs/${job._id}/complete`, 'POST', {});\n        return data; // data is the updated job\n      }));\n\n      // Update route by removing all jobs\n      setRoutes(prevRoutes => {\n        const updatedRoutes = {\n          ...prevRoutes\n        };\n        updatedRoutes[selectedDay][routeIndex].jobs = [];\n        return updatedRoutes;\n      });\n\n      // Add recurring jobs back to pool if they meet criteria\n      const jobsToReturnToPool = completedJobs.filter(job => shouldReturnToPool(job, now));\n      if (jobsToReturnToPool.length > 0) {\n        setJobPool(prevPool => [...prevPool, ...jobsToReturnToPool]);\n      }\n      await saveRoutes(); // Ensure routes are saved after completion\n      setSuccessMessage(\"Route completed successfully!\");\n    } catch (error) {\n      console.error('Error completing route:', error);\n      setError('Failed to complete the route. Please try again.');\n    }\n  };\n  const renderDroppableArea = (id, jobs, isJobPool = false) => {\n    const routeIndex = parseInt(id.split('-')[1], 10);\n    const route = routes[selectedDay][routeIndex];\n    return /*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: id,\n      children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: provided.innerRef,\n        ...provided.droppableProps,\n        className: `bg-gray-800 p-4 rounded-lg min-h-[200px] ${isJobPool ? 'grid grid-cols-3 gap-4' : 'space-y-2'}`,\n        children: [!isJobPool && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"w-full p-2 bg-gray-700 text-white rounded\",\n            onChange: e => assignRoute(routeIndex, e.target.value),\n            value: route.employee ? `employee-${route.employee._id}` : route.crew ? `crew-${route.crew._id}` : '',\n            disabled: assigningRoutes[routeIndex],\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Assign to...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n              label: \"Employees\",\n              children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: `employee-${employee._id}`,\n                children: employee.name\n              }, employee._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 590,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 588,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n              label: \"Crews\",\n              children: crews.map(crew => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: `crew-${crew._id}`,\n                children: crew.name\n              }, crew._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 595,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 593,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 15\n        }, this), jobs.length > 0 ? jobs.map((job, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n          draggableId: job._id,\n          index: index,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            ...provided.draggableProps,\n            ...provided.dragHandleProps,\n            children: renderJobCard(job, !isJobPool, routeIndex, index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 606,\n            columnNumber: 21\n          }, this)\n        }, job._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-white text-center\",\n          children: \"No jobs available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 15\n        }, this), provided.placeholder, !isJobPool && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 text-right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 7\n    }, this);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-gray-900 flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white text-xl\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-gray-900 flex flex-col items-center justify-center space-y-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-500 text-xl\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        className: \"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition\",\n        children: \"Refresh Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-900 text-white\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-7xl mx-auto py-8 px-4\",\n      children: [successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-green-500 text-white p-4 rounded-lg mb-4\",\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-red-500 text-white p-4 rounded-lg mb-4\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changeSelectedDay(-1),\n          className: \"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\",\n          children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 679,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-3xl font-bold\",\n          children: selectedDay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changeSelectedDay(1),\n          className: \"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\",\n          children: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => cycleVisibleRoutes(-1),\n          className: \"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\",\n          children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 696,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNewRoute,\n          className: \"px-4 py-2 bg-green-500 rounded-md hover:bg-green-600 transition flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(PlusIcon, {\n            className: \"w-5 h-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Add Route\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 703,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => cycleVisibleRoutes(1),\n          className: \"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\",\n          children: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 709,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: onDragEnd,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\",\n          children: routes[selectedDay].slice(visibleRoutesRange.start, visibleRoutesRange.end).map(route => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-800 p-4 rounded-lg shadow-lg\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center justify-between mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"text-xl font-semibold\",\n                children: [\"Route \", route.index + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 721,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => deleteRoute(route.index),\n                className: \"p-2 bg-red-500 rounded-md hover:bg-red-600 transition\",\n                children: /*#__PURE__*/_jsxDEV(TrashIcon, {\n                  className: \"w-5 h-5\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 726,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 722,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 720,\n              columnNumber: 19\n            }, this), renderDroppableArea(`route-${route.index}`, route.jobs), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-4 text-right\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setConfirmDialog({\n                  isOpen: true,\n                  routeIndex: route.index\n                }),\n                className: \"bg-green-500 text-white px-2 py-1 rounded-md hover:bg-green-600 transition\",\n                children: \"Complete Route\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 733,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 732,\n              columnNumber: 19\n            }, this)]\n          }, route.index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 719,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 715,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-8\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-2xl font-semibold mb-4 flex justify-between items-center\",\n            children: [\"Job Pool\", selectedJobs.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex space-x-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setSelectedJobs([]),\n                className: \"px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition\",\n                children: \"Clear Selection\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 750,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleCompleteJob(selectedJobs),\n                className: \"px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition\",\n                children: \"Complete Selected Jobs\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 756,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 749,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 746,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-400 mb-2\",\n            children: \"Click on jobs to select multiple, then drag to a route or complete.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 765,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-2 p-2 bg-gray-800 rounded-lg text-white\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-bold mb-2\",\n              children: \"Job Color Legend\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 771,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"flex space-x-8\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"flex items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-4 h-4 inline-block bg-green-600 mr-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 774,\n                  columnNumber: 19\n                }, this), \" One-time job\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 773,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"flex items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-4 h-4 inline-block bg-blue-600 mr-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 777,\n                  columnNumber: 19\n                }, this), \" Weekly\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 776,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"flex items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-4 h-4 inline-block bg-yellow-600 mr-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 780,\n                  columnNumber: 19\n                }, this), \" Bi-weekly\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 779,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"flex items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-4 h-4 inline-block bg-purple-600 mr-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 783,\n                  columnNumber: 19\n                }, this), \" Monthly\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 782,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 772,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 770,\n            columnNumber: 13\n          }, this), renderDroppableArea('jobPool-0', jobPool, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 9\n      }, this), saving && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 z-50\",\n        children: [/*#__PURE__*/_jsxDEV(ClipLoader, {\n          color: \"#ffffff\",\n          loading: saving,\n          size: 50\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 794,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-white mt-4\",\n          children: \"Saving...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 795,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 793,\n        columnNumber: 11\n      }, this), confirmDialog.isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gray-800 p-6 rounded-lg text-white shadow-lg\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-xl font-semibold\",\n            children: \"Confirm Route Completion\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 803,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-4\",\n            children: \"Are you sure you want to complete all jobs in this route?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 804,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-6 flex justify-end space-x-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setConfirmDialog({\n                isOpen: false,\n                routeIndex: null\n              }),\n              className: \"px-4 py-2 bg-gray-600 rounded-md hover:bg-gray-700\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 806,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                handleCompleteRoute(confirmDialog.routeIndex);\n                setConfirmDialog({\n                  isOpen: false,\n                  routeIndex: null\n                }); // Close after confirming\n              },\n              className: \"px-4 py-2 bg-green-500 rounded-md hover:bg-green-600\",\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 812,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 805,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 801,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 656,\n    columnNumber: 5\n  }, this);\n};\n_s(BuildRoutes, \"LWeO0WH1052qK8dfMkPXZw+pkeE=\");\n_c = BuildRoutes;\nexport default BuildRoutes;\nvar _c;\n$RefreshReg$(_c, \"BuildRoutes\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ChevronLeftIcon","ChevronRightIcon","PlusIcon","TrashIcon","ChevronDownIcon","ChevronUpIcon","DragDropContext","Droppable","Draggable","CheckIcon","API_BASE_URL","DAYS_OF_WEEK","defaultRoutes","validateRoutesStructure","fetchWithAuth","Header","debounce","ClipLoader","jsxDEV","_jsxDEV","BuildRoutes","_s","routes","setRoutes","jobPool","setJobPool","selectedDay","setSelectedDay","loading","setLoading","saving","setSaving","error","setError","successMessage","setSuccessMessage","visibleRoutesRange","setVisibleRoutesRange","start","end","expandedJobs","setExpandedJobs","selectedJobs","setSelectedJobs","employees","setEmployees","crews","setCrews","confirmDialog","setConfirmDialog","isOpen","routeIndex","initializeData","fetchedRoutesResponse","fetchedJobsResponse","fetchedEmployeesResponse","fetchedCrewsResponse","Promise","all","fetchedRoutes","fetchedJobs","fetchedEmployees","fetchedCrews","validatedRoutes","now","Date","normalizeDate","date","getFullYear","getMonth","getDate","today","filter","job","lastServiceDate","console","warn","_id","status","daysSinceLastService","Math","floor","recurrencePattern","isRecurring","processedRoutes","Object","fromEntries","entries","map","day","route","jobs","log","err","saveRoutes","updatedRoutes","routesToSave","reduce","acc","dayRoutes","_route$employee","_route$crew","index","employee","crew","debouncedSaveRoutes","onDragEnd","result","source","destination","droppableId","prevRoutes","sourceId","split","destId","sourceRouteIndex","parseInt","destRouteIndex","selectedJobsToMove","length","includes","forEach","splice","updatedJobPool","jobId","jobIndex","findIndex","removedJob","addNewRoute","newRouteState","deleteRoute","deletedRoute","prevJobPool","idx","removeJobFromRoute","assigningRoutes","setAssigningRoutes","assignRoute","assigneeId","type","id","prev","response","Error","updatedRoute","updatedDayRoutes","_employees$find","_crews$find","name","find","e","c","handleJobSelection","prevSelectedJobs","toggleJobExpansion","changeSelectedDay","direction","prevDay","currentIndex","indexOf","newIndex","cycleVisibleRoutes","prevRange","totalRoutes","newStart","newEnd","min","renderLegend","className","children","fileName","_jsxFileName","lineNumber","columnNumber","shouldReturnToPool","handleCompleteJob","jobIds","jobsToComplete","j","values","flatMap","completedJobs","data","prevJobs","message","renderJobCard","isInRoute","_job$customer","_job$location","isExpanded","customerName","customer","isSelected","toLocaleDateString","jobColors","oneTime","weekly","biWeekly","monthly","jobStyle","backgroundColor","recurring","border","style","onClick","stopPropagation","title","location","address","cost","handleCompleteRoute","routeJobs","jobsToReturnToPool","prevPool","renderDroppableArea","isJobPool","provided","ref","innerRef","droppableProps","onChange","target","value","disabled","label","draggableId","draggableProps","dragHandleProps","placeholder","window","reload","slice","color","size","_c","$RefreshReg$"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/pages/BuildRoutes.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  ChevronLeftIcon,\r\n  ChevronRightIcon,\r\n  PlusIcon,\r\n  TrashIcon,\r\n  ChevronDownIcon,\r\n  ChevronUpIcon,\r\n} from '@heroicons/react/24/outline';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { CheckIcon } from '@heroicons/react/24/solid';\r\nimport {\r\n  API_BASE_URL,\r\n  DAYS_OF_WEEK,\r\n  defaultRoutes,\r\n  validateRoutesStructure,\r\n  fetchWithAuth,\r\n} from '../components/utils';\r\nimport Header from '../components/Header';\r\nimport debounce from 'lodash/debounce';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nconst BuildRoutes = () => {\r\n  const [routes, setRoutes] = useState(defaultRoutes);\r\n  const [jobPool, setJobPool] = useState([]);\r\n  const [selectedDay, setSelectedDay] = useState(DAYS_OF_WEEK[0]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState(null);\r\n   const [successMessage, setSuccessMessage] = useState('');  // New state for success messages\r\n  const [visibleRoutesRange, setVisibleRoutesRange] = useState({ start: 0, end: 3 });\r\n  const [expandedJobs, setExpandedJobs] = useState({});\r\n  const [selectedJobs, setSelectedJobs] = useState([]);\r\n  const [employees, setEmployees] = useState([]);\r\n  const [crews, setCrews] = useState([]);\r\n  const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, routeIndex: null });\r\n  \r\n  const initializeData = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      const [\r\n        fetchedRoutesResponse,\r\n        fetchedJobsResponse,\r\n        fetchedEmployeesResponse,\r\n        fetchedCrewsResponse,\r\n      ] = await Promise.all([\r\n        fetchWithAuth('/routes'),\r\n        fetchWithAuth('/routes/jobs/available'),\r\n        fetchWithAuth('/employees'),\r\n        fetchWithAuth('/crews'),\r\n      ]);\r\n  \r\n      const fetchedRoutes = fetchedRoutesResponse?.routes || defaultRoutes;\r\n      let fetchedJobs = fetchedJobsResponse || [];\r\n      const fetchedEmployees = fetchedEmployeesResponse || [];\r\n      const fetchedCrews = fetchedCrewsResponse || [];\r\n  \r\n      const validatedRoutes = validateRoutesStructure(fetchedRoutes);\r\n  \r\n      // Filter and process jobs\r\n      const now = new Date();\r\n      const normalizeDate = (date) => new Date(date.getFullYear(), date.getMonth(), date.getDate());\r\n      const today = normalizeDate(now);\r\n  \r\n      fetchedJobs = fetchedJobs.filter((job) => {\r\n        // Filter out jobs with future last service dates\r\n        if (job.lastServiceDate) {\r\n          const lastServiceDate = normalizeDate(new Date(job.lastServiceDate));\r\n          if (lastServiceDate > today) {\r\n            console.warn(`Job ${job._id} has a future last service date: ${job.lastServiceDate}`);\r\n            return false;\r\n          }\r\n        }\r\n  \r\n        // Filter out completed jobs\r\n        if (job.status === 'Completed') {\r\n          return false;\r\n        }\r\n  \r\n        // Include jobs that haven't been serviced yet (no lastServiceDate)\r\n        if (!job.lastServiceDate) {\r\n          return true;\r\n        }\r\n  \r\n        // Calculate days since last service\r\n        const lastServiceDate = normalizeDate(new Date(job.lastServiceDate));\r\n        const daysSinceLastService = Math.floor((today - lastServiceDate) / (1000 * 60 * 60 * 24));\r\n  \r\n        // Apply recurrence pattern logic\r\n        switch (job.recurrencePattern) {\r\n          case 'Weekly':\r\n            return daysSinceLastService >= 7;\r\n          case 'Bi-weekly':\r\n            return daysSinceLastService >= 14;\r\n          case 'Monthly':\r\n            return daysSinceLastService >= 30;\r\n          default:\r\n            // For one-time jobs or other patterns\r\n            return !job.isRecurring;\r\n        }\r\n      });\r\n  \r\n      // Process routes to remove completed jobs\r\n      const processedRoutes = Object.fromEntries(\r\n        Object.entries(validatedRoutes).map(([day, routes]) => [\r\n          day,\r\n          routes.map(route => ({\r\n            ...route,\r\n            jobs: route.jobs.filter(job => job.status !== 'Completed')\r\n          }))\r\n        ])\r\n      );\r\n  \r\n      setRoutes(processedRoutes);\r\n      setJobPool(fetchedJobs);\r\n      setEmployees(fetchedEmployees);\r\n      setCrews(fetchedCrews);\r\n  \r\n      console.log('Initialized data:', {\r\n        routes: processedRoutes,\r\n        jobPool: fetchedJobs,\r\n        employees: fetchedEmployees,\r\n        crews: fetchedCrews\r\n      });\r\n  \r\n    } catch (err) {\r\n      console.error('Error fetching data:', err);\r\n      setError('Failed to load routes, jobs, employees, and crews. Please refresh the page.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n  \r\n\r\n  useEffect(() => {\r\n    initializeData();\r\n  }, [initializeData]);\r\n\r\n  const saveRoutes = useCallback(async (updatedRoutes = routes) => {\r\n    setSaving(true);\r\n    try {\r\n      const routesToSave = Object.entries(updatedRoutes).reduce((acc, [day, dayRoutes]) => {\r\n        acc[day] = dayRoutes.map(route => ({\r\n          index: route.index,\r\n          jobs: route.jobs.map(job => (typeof job === 'string' ? job : job._id)),\r\n          employee: route.employee?._id,\r\n          crew: route.crew?._id,\r\n        }));\r\n        return acc;\r\n      }, {});\r\n  \r\n      await fetchWithAuth('/routes', 'PUT', { routes: routesToSave });\r\n      console.log('Routes saved successfully:', routesToSave);\r\n    } catch (err) {\r\n      console.error('Error saving routes:', err);\r\n      setError('Failed to save routes. Please try again.');\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  }, [routes]);\r\n\r\n  const debouncedSaveRoutes = useCallback(debounce(saveRoutes, 1000), [saveRoutes]);\r\n\r\n  const onDragEnd = useCallback((result) => {\r\n    const { source, destination } = result;\r\n  \r\n    if (!destination) {\r\n      console.log(\"Drag operation cancelled or no destination found.\");\r\n      return;\r\n    }\r\n  \r\n    console.log(\"Drag started from:\", source.droppableId, \"to\", destination.droppableId);\r\n    console.log(\"Before moving jobs:\", { jobPool, routes });\r\n\r\n    setRoutes((prevRoutes) => {\r\n      const updatedRoutes = { ...prevRoutes };\r\n      const sourceId = source.droppableId.split('-');\r\n      const destId = destination.droppableId.split('-');\r\n  \r\n      const sourceRouteIndex = sourceId[0] === 'route' ? parseInt(sourceId[1], 10) : null;\r\n      const destRouteIndex = destId[0] === 'route' ? parseInt(destId[1], 10) : null;\r\n  \r\n      // Moving from job pool to a route\r\n      if (source.droppableId === 'jobPool-0' && destRouteIndex !== null) {\r\n        console.log(\"Moving jobs from job pool to route:\", destRouteIndex);\r\n  \r\n        const selectedJobsToMove = selectedJobs.length > 0 \r\n          ? jobPool.filter(job => selectedJobs.includes(job._id)) \r\n          : [jobPool[source.index]];  // Only the single dragged job\r\n  \r\n        console.log(\"Selected jobs to move from job pool:\", selectedJobsToMove);\r\n  \r\n        // Add jobs to the route\r\n        selectedJobsToMove.forEach((job, index) => {\r\n          updatedRoutes[selectedDay][destRouteIndex].jobs.splice(destination.index + index, 0, job);\r\n          console.log(`Job added to route ${destRouteIndex}:`, job);\r\n        });\r\n  \r\n        // Remove moved jobs from job pool\r\n        const updatedJobPool = jobPool.filter(job => !selectedJobs.includes(job._id));\r\n        if (selectedJobs.length === 0) {\r\n          // If no jobs were selected, remove the single dragged job from the pool\r\n          updatedJobPool.splice(source.index, 1);\r\n        }\r\n        setJobPool(updatedJobPool);\r\n  \r\n        console.log(\"Updated job pool after move:\", updatedJobPool);\r\n      }\r\n  \r\n      // Moving between routes or within the same route\r\n      if (sourceRouteIndex !== null && destRouteIndex !== null) {\r\n        console.log(`Moving jobs from route ${sourceRouteIndex} to route ${destRouteIndex}`);\r\n  \r\n        selectedJobs.forEach((jobId, index) => {\r\n          // Find job in the source route\r\n          const jobIndex = updatedRoutes[selectedDay][sourceRouteIndex].jobs.findIndex(job => job._id === jobId);\r\n          const [removedJob] = updatedRoutes[selectedDay][sourceRouteIndex].jobs.splice(jobIndex, 1);\r\n  \r\n          console.log(`Removed job ${jobId} from route ${sourceRouteIndex}`, removedJob);\r\n  \r\n          // Add job to destination route\r\n          if (removedJob) {\r\n            updatedRoutes[selectedDay][destRouteIndex].jobs.splice(destination.index, 0, removedJob);\r\n            console.log(`Added job ${jobId} to route ${destRouteIndex}`);\r\n          }\r\n        });\r\n      }\r\n  \r\n      console.log(\"After moving jobs:\", { jobPool, updatedRoutes });\r\n  \r\n      setSelectedJobs([]); // Clear selected jobs after moving\r\n      return updatedRoutes;\r\n    });\r\n\r\n    debouncedSaveRoutes();\r\n  }, [jobPool, selectedJobs, selectedDay, debouncedSaveRoutes]);\r\n\r\n  const addNewRoute = useCallback(async () => {\r\n    const newRouteState = {\r\n      ...routes,\r\n      [selectedDay]: [\r\n        ...routes[selectedDay],\r\n        { index: routes[selectedDay].length, jobs: [] },\r\n      ],\r\n    };\r\n    setRoutes(newRouteState);\r\n    await saveRoutes(newRouteState);\r\n  }, [routes, selectedDay, saveRoutes]);\r\n\r\n  const deleteRoute = useCallback(async (routeIndex) => {\r\n    try {\r\n      setRoutes(prevRoutes => {\r\n        const updatedRoutes = { ...prevRoutes };\r\n        const deletedRoute = updatedRoutes[selectedDay].splice(routeIndex, 1)[0];\r\n        \r\n        setJobPool(prevJobPool => [...prevJobPool, ...deletedRoute.jobs]);\r\n        \r\n        updatedRoutes[selectedDay] = updatedRoutes[selectedDay].map((route, idx) => ({\r\n          ...route,\r\n          index: idx,\r\n        }));\r\n        \r\n        return updatedRoutes;\r\n      });\r\n  \r\n      await fetchWithAuth(`/routes/${selectedDay}/${routeIndex}`, 'DELETE');\r\n  \r\n      await saveRoutes(); // Ensure routes are saved to keep consistent state\r\n    } catch (error) {\r\n      console.error('Error deleting route:', error);\r\n      setError('Failed to delete route. Please try again.');\r\n    }\r\n  }, [selectedDay, saveRoutes]);\r\n\r\n  const removeJobFromRoute = async (routeIndex, jobIndex) => {\r\n    try {\r\n      setRoutes(prevRoutes => {\r\n        const updatedRoutes = { ...prevRoutes };\r\n        const removedJob = updatedRoutes[selectedDay][routeIndex].jobs.splice(jobIndex, 1)[0];\r\n        setJobPool(prevJobPool => [...prevJobPool, removedJob]);\r\n        return updatedRoutes;\r\n      });\r\n  \r\n      await fetchWithAuth(`/routes/${selectedDay}/${routeIndex}`, 'PUT', {\r\n        index: routeIndex,\r\n        jobs: routes[selectedDay][routeIndex].jobs\r\n      });\r\n  \r\n      await saveRoutes();\r\n    } catch (error) {\r\n      console.error('Error removing job from route:', error);\r\n      setError('Failed to remove job from route. Please try again.');\r\n    }\r\n  };\r\n\r\n  const [assigningRoutes, setAssigningRoutes] = useState({});\r\n  const assignRoute = async (routeIndex, assigneeId) => {\r\n    const [type, id] = assigneeId.split('-');\r\n    setAssigningRoutes(prev => ({ ...prev, [routeIndex]: true }));\r\n  \r\n    try {\r\n      console.log(`Assigning ${type} with ID: ${id} to route ${routeIndex} for day ${selectedDay}`);\r\n      \r\n      // Sending the appropriate payload to the API\r\n      const response = await fetchWithAuth(`/routes/${selectedDay}/${routeIndex}/assign`, 'PUT', {\r\n        [type]: id,\r\n      });\r\n  \r\n      // Since fetchWithAuth returns parsed data directly, no need to check response.ok or status\r\n      console.log('Response from server:', response);\r\n  \r\n      // Ensure the response contains the expected fields, otherwise consider it an error\r\n      if (!response || !response._id) {\r\n        throw new Error('Invalid response format');\r\n      }\r\n  \r\n      // Assuming the response is valid and contains the updated route\r\n      const updatedRoute = response; // Use the response directly since fetchWithAuth returns the data\r\n      setRoutes((prevRoutes) => {\r\n        const updatedDayRoutes = prevRoutes[selectedDay].map((route) => {\r\n          if (route.index === routeIndex) {\r\n            return {\r\n              ...route,\r\n              employee: type === 'employee' ? { _id: id, name: employees.find(e => e._id === id)?.name } : null,\r\n              crew: type === 'crew' ? { _id: id, name: crews.find(c => c._id === id)?.name } : null,\r\n            };\r\n          }\r\n          return route;\r\n        });\r\n  \r\n        return {\r\n          ...prevRoutes,\r\n          [selectedDay]: updatedDayRoutes,\r\n        };\r\n      });\r\n      console.log(`Route assigned successfully: day ${selectedDay}, index ${routeIndex}, ${type}: ${id}`);\r\n    } catch (error) {\r\n      console.error('Error assigning route:', error);\r\n      setError('Failed to assign route. Please try again.');\r\n    } finally {\r\n      setAssigningRoutes(prev => ({ ...prev, [routeIndex]: false }));\r\n    }\r\n  };\r\n  \r\n  const handleJobSelection = (job) => {\r\n    setSelectedJobs(prevSelectedJobs => {\r\n      if (prevSelectedJobs.includes(job._id)) {\r\n        return prevSelectedJobs.filter(id => id !== job._id);\r\n      } else {\r\n        return [...prevSelectedJobs, job._id];\r\n      }\r\n    });\r\n  };\r\n\r\n  const toggleJobExpansion = (jobId) => {\r\n    setExpandedJobs((prev) => ({ ...prev, [jobId]: !prev[jobId] }));\r\n  };\r\n\r\n  const changeSelectedDay = (direction) => {\r\n    setSelectedDay((prevDay) => {\r\n      const currentIndex = DAYS_OF_WEEK.indexOf(prevDay);\r\n      const newIndex = (currentIndex + direction + DAYS_OF_WEEK.length) % DAYS_OF_WEEK.length;\r\n      return DAYS_OF_WEEK[newIndex];\r\n    });\r\n    setVisibleRoutesRange({ start: 0, end: 3 });\r\n  };\r\n\r\n  const cycleVisibleRoutes = (direction) => {\r\n    setVisibleRoutesRange((prevRange) => {\r\n      const totalRoutes = routes[selectedDay].length;\r\n      const newStart = (prevRange.start + direction + totalRoutes) % totalRoutes;\r\n      const newEnd = Math.min(newStart + 3, totalRoutes);\r\n      return { start: newStart, end: newEnd };\r\n    });\r\n  };\r\n\r\n  const renderLegend = () => (\r\n    <div className=\"mt-2 p-2 bg-gray-800 rounded-lg text-white\">\r\n      <h3 className=\"font-bold mb-2\">Job Color Legend</h3>\r\n      <ul className=\"space-y-1\">\r\n        <li className=\"flex items-center\">\r\n          <span className=\"w-4 h-4 inline-block bg-green-600 mr-2\" /> One-time job\r\n        </li>\r\n        <li className=\"flex items-center\">\r\n          <span className=\"w-4 h-4 inline-block bg-blue-600 mr-2\" /> Weekly recurring job\r\n        </li>\r\n        <li className=\"flex items-center\">\r\n          <span className=\"w-4 h-4 inline-block bg-yellow-600 mr-2\" /> Bi-weekly recurring job\r\n        </li>\r\n        <li className=\"flex items-center\">\r\n          <span className=\"w-4 h-4 inline-block bg-purple-600 mr-2\" /> Monthly recurring job\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );  \r\n\r\n  const shouldReturnToPool = (job, now) => {\r\n    if (!job.isRecurring) return false;\r\n    \r\n    const normalizeDate = (date) => new Date(date.getFullYear(), date.getMonth(), date.getDate());\r\n    const lastServiceDate = normalizeDate(new Date(job.lastServiceDate));\r\n    const today = normalizeDate(now);\r\n    \r\n    const daysSinceLastService = Math.floor((today - lastServiceDate) / (1000 * 60 * 60 * 24));\r\n    \r\n    switch (job.recurrencePattern) {\r\n      case 'Weekly':\r\n        return daysSinceLastService >= 7;\r\n      case 'Bi-weekly':\r\n        return daysSinceLastService >= 14;\r\n      case 'Monthly':\r\n        return daysSinceLastService >= 30;\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n  \r\n  \r\n  // Updated handleCompleteJob function\r\n  const handleCompleteJob = async (jobIds) => {\r\n    try {\r\n      const jobsToComplete = jobIds.filter(jobId => {\r\n        const job = jobPool.find(j => j._id === jobId) || \r\n                    Object.values(routes).flatMap(dayRoutes => \r\n                      dayRoutes.flatMap(route => route.jobs)\r\n                    ).find(j => j._id === jobId);\r\n        return job && job.status !== 'Completed';\r\n      });\r\n  \r\n      if (jobsToComplete.length === 0) {\r\n        setError(\"All selected jobs are already completed.\");\r\n        return;\r\n      }\r\n  \r\n      const completedJobs = await Promise.all(\r\n        jobsToComplete.map(async jobId => {\r\n          // fetchWithAuth returns data directly\r\n          const data = await fetchWithAuth(`/jobs/${jobId}/complete`, 'POST', {});\r\n          return data; // data contains the updated job\r\n        })\r\n      );\r\n  \r\n      console.log('Completed jobs:', completedJobs);\r\n  \r\n      // Update job pool by removing completed jobs\r\n      setJobPool(prevJobs => prevJobs.filter(j => !jobsToComplete.includes(j._id)));\r\n  \r\n      // Update routes by removing completed jobs\r\n      setRoutes(prevRoutes => {\r\n        const updatedRoutes = { ...prevRoutes };\r\n        for (const day in updatedRoutes) {\r\n          updatedRoutes[day] = updatedRoutes[day].map(route => ({\r\n            ...route,\r\n            jobs: route.jobs.filter(job => !jobsToComplete.includes(job._id))\r\n          }));\r\n        }\r\n        return updatedRoutes;\r\n      });\r\n  \r\n      setSelectedJobs([]);\r\n      setSuccessMessage(\"Jobs completed successfully!\");\r\n      await saveRoutes(); // Ensure routes are saved after completion\r\n  \r\n    } catch (error) {\r\n      console.error('Error completing jobs:', error);\r\n      setError(`Failed to complete jobs: ${error.message}`);\r\n    }\r\n  };\r\n  \r\n  const renderJobCard = (job, isInRoute = false, routeIndex, jobIndex) => {\r\n    if (!job) return null; // Safeguard against undefined jobs\r\n  \r\n    const isExpanded = expandedJobs[job._id];\r\n    const customerName = job.customer?.name || 'No Customer';\r\n    const isSelected = selectedJobs.includes(job._id);\r\n    const lastServiceDate = job.lastServiceDate ? new Date(job.lastServiceDate).toLocaleDateString() : 'No Service Date';\r\n  \r\n    const jobColors = {\r\n      oneTime: 'bg-green-600 hover:bg-green-700',\r\n      weekly: 'bg-blue-600 hover:bg-blue-700',\r\n      biWeekly: 'bg-teal-600 hover:bg-teal-700',\r\n      monthly: 'bg-cyan-600 hover:bg-cyan-700',\r\n    };\r\n  \r\n    const jobStyle = {\r\n      backgroundColor: job.isRecurring\r\n        ? job.recurrencePattern === 'Weekly'\r\n          ? jobColors.weekly\r\n          : job.recurrencePattern === 'Bi-weekly'\r\n          ? jobColors.biWeekly\r\n          : job.recurrencePattern === 'Monthly'\r\n          ? jobColors.monthly\r\n          : jobColors.recurring\r\n        : jobColors.oneTime,\r\n      border: isSelected ? '2px solid white' : 'none',\r\n    };\r\n  \r\n    return (\r\n      <div\r\n        className={`p-2 rounded-md shadow-md ${jobStyle.backgroundColor}`}\r\n        style={{ border: jobStyle.border }}\r\n        onClick={() => handleJobSelection(job)}\r\n      >\r\n        <div className=\"flex justify-between items-center\">\r\n          <p className=\"font-bold text-white\">{customerName}</p>\r\n          <div className=\"flex items-center space-x-2\">\r\n            {isInRoute && (\r\n              <button\r\n                onClick={(e) => { e.stopPropagation(); removeJobFromRoute(routeIndex, jobIndex); }}\r\n                className=\"text-red-500 hover:text-red-700\"\r\n              >\r\n                <TrashIcon className=\"h-5 w-5\" />\r\n              </button>\r\n            )}\r\n            <button onClick={(e) => { e.stopPropagation(); toggleJobExpansion(job._id); }}>\r\n              {isExpanded ? <ChevronUpIcon className=\"h-5 w-5\" /> : <ChevronDownIcon className=\"h-5 w-5\" />}\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {isExpanded && (\r\n          <div className=\"mt-2\">\r\n            <p className=\"text-gray-300\">{job.title || 'No Title'}</p>\r\n            <p className=\"text-gray-400\">{job.location?.address || 'No Address'}</p>\r\n            <p className=\"text-gray-400\">Revenue: ${job.cost || 'No Price'}</p>\r\n            <p className=\"text-gray-400\">Type: {job.isRecurring ? 'Recurring' : 'One-time'}</p>\r\n            <p className=\"text-gray-400\">Last Service Date: {lastServiceDate}</p> \r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleCompleteRoute = async (routeIndex) => {\r\n    try {\r\n      const now = new Date();\r\n      const routeJobs = routes[selectedDay][routeIndex].jobs.filter(job => job.status !== 'Completed');\r\n  \r\n      const completedJobs = await Promise.all(\r\n        routeJobs.map(async job => {\r\n          const data = await fetchWithAuth(`/jobs/${job._id}/complete`, 'POST', {});\r\n          return data; // data is the updated job\r\n        })\r\n      );\r\n  \r\n      // Update route by removing all jobs\r\n      setRoutes(prevRoutes => {\r\n        const updatedRoutes = { ...prevRoutes };\r\n        updatedRoutes[selectedDay][routeIndex].jobs = [];\r\n        return updatedRoutes;\r\n      });\r\n  \r\n      // Add recurring jobs back to pool if they meet criteria\r\n      const jobsToReturnToPool = completedJobs.filter(job => shouldReturnToPool(job, now));\r\n      if (jobsToReturnToPool.length > 0) {\r\n        setJobPool(prevPool => [...prevPool, ...jobsToReturnToPool]);\r\n      }\r\n  \r\n      await saveRoutes(); // Ensure routes are saved after completion\r\n      setSuccessMessage(\"Route completed successfully!\");\r\n  \r\n    } catch (error) {\r\n      console.error('Error completing route:', error);\r\n      setError('Failed to complete the route. Please try again.');\r\n    }\r\n  };\r\n  \r\n  const renderDroppableArea = (id, jobs, isJobPool = false) => {\r\n    const routeIndex = parseInt(id.split('-')[1], 10);\r\n    const route = routes[selectedDay][routeIndex];\r\n  \r\n    return (\r\n      <Droppable droppableId={id}>\r\n        {(provided) => (\r\n          <div\r\n            ref={provided.innerRef}\r\n            {...provided.droppableProps}\r\n            className={`bg-gray-800 p-4 rounded-lg min-h-[200px] ${isJobPool ? 'grid grid-cols-3 gap-4' : 'space-y-2'}`}\r\n          >\r\n            {!isJobPool && (\r\n              <div className=\"mb-4\">\r\n                <select\r\n                  className=\"w-full p-2 bg-gray-700 text-white rounded\"\r\n                  onChange={(e) => assignRoute(routeIndex, e.target.value)}\r\n                  value={route.employee ? `employee-${route.employee._id}` : route.crew ? `crew-${route.crew._id}` : ''}\r\n                  disabled={assigningRoutes[routeIndex]}\r\n                >\r\n                  <option value=\"\">Assign to...</option>\r\n                  <optgroup label=\"Employees\">\r\n                    {employees.map((employee) => (\r\n                      <option key={employee._id} value={`employee-${employee._id}`}>{employee.name}</option>\r\n                    ))}\r\n                  </optgroup>\r\n                  <optgroup label=\"Crews\">\r\n                    {crews.map((crew) => (\r\n                      <option key={crew._id} value={`crew-${crew._id}`}>{crew.name}</option>\r\n                    ))}\r\n                  </optgroup>\r\n                </select>\r\n              </div>\r\n            )}\r\n  \r\n            {jobs.length > 0 ? (\r\n              jobs.map((job, index) => (\r\n                <Draggable key={job._id} draggableId={job._id} index={index}>\r\n                  {(provided) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                    >\r\n                      {renderJobCard(job, !isJobPool, routeIndex, index)}\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))\r\n            ) : (\r\n              <p className=\"text-white text-center\">No jobs available</p>\r\n            )}\r\n  \r\n            {provided.placeholder}\r\n  \r\n            {/* Move Complete Route button to the bottom */}\r\n            {!isJobPool && (\r\n              <div className=\"mt-4 text-right\">\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    );\r\n  };  \r\n  \r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-900 flex items-center justify-center\">\r\n        <p className=\"text-white text-xl\">Loading...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-900 flex flex-col items-center justify-center space-y-4\">\r\n        <p className=\"text-red-500 text-xl\">{error}</p>\r\n        <button\r\n          onClick={() => window.location.reload()}\r\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition\"\r\n        >\r\n          Refresh Page\r\n        </button>\r\n      </div>\r\n    );\r\n  }  \r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-900 text-white\">\r\n      <Header />\r\n  \r\n      <main className=\"max-w-7xl mx-auto py-8 px-4\">\r\n  \r\n        {/* Success and Error Messages */}\r\n        {successMessage && (\r\n          <div className=\"bg-green-500 text-white p-4 rounded-lg mb-4\">\r\n            {successMessage}\r\n          </div>\r\n        )}\r\n        {error && (\r\n          <div className=\"bg-red-500 text-white p-4 rounded-lg mb-4\">\r\n            {error}\r\n          </div>\r\n        )}\r\n  \r\n        {/* Navigation for selecting days */}\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <button\r\n            onClick={() => changeSelectedDay(-1)}\r\n            className=\"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\"\r\n          >\r\n            <ChevronLeftIcon className=\"w-6 h-6\" />\r\n          </button>\r\n          <h1 className=\"text-3xl font-bold\">{selectedDay}</h1>\r\n          <button\r\n            onClick={() => changeSelectedDay(1)}\r\n            className=\"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\"\r\n          >\r\n            <ChevronRightIcon className=\"w-6 h-6\" />\r\n          </button>\r\n        </div>\r\n  \r\n        {/* Buttons to cycle routes and add new routes */}\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <button\r\n            onClick={() => cycleVisibleRoutes(-1)}\r\n            className=\"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\"\r\n          >\r\n            <ChevronLeftIcon className=\"w-6 h-6\" />\r\n          </button>\r\n          <button\r\n            onClick={addNewRoute}\r\n            className=\"px-4 py-2 bg-green-500 rounded-md hover:bg-green-600 transition flex items-center space-x-2\"\r\n          >\r\n            <PlusIcon className=\"w-5 h-5\" />\r\n            <span>Add Route</span>\r\n          </button>\r\n          <button\r\n            onClick={() => cycleVisibleRoutes(1)}\r\n            className=\"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\"\r\n          >\r\n            <ChevronRightIcon className=\"w-6 h-6\" />\r\n          </button>\r\n        </div>\r\n  \r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          {/* Render Routes */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n            {routes[selectedDay]\r\n              .slice(visibleRoutesRange.start, visibleRoutesRange.end)\r\n              .map((route) => (\r\n                <div key={route.index} className=\"bg-gray-800 p-4 rounded-lg shadow-lg\">\r\n                  <div className=\"flex items-center justify-between mb-4\">\r\n                    <h2 className=\"text-xl font-semibold\">Route {route.index + 1}</h2>\r\n                    <button\r\n                      onClick={() => deleteRoute(route.index)}\r\n                      className=\"p-2 bg-red-500 rounded-md hover:bg-red-600 transition\"\r\n                    >\r\n                      <TrashIcon className=\"w-5 h-5\" />\r\n                    </button>\r\n                  </div>\r\n                  {renderDroppableArea(`route-${route.index}`, route.jobs)}\r\n  \r\n                  {/* Complete Route Button at the bottom of each route */}\r\n                  <div className=\"mt-4 text-right\">\r\n                    <button\r\n                      onClick={() => setConfirmDialog({ isOpen: true, routeIndex: route.index })}\r\n                      className=\"bg-green-500 text-white px-2 py-1 rounded-md hover:bg-green-600 transition\"\r\n                    >\r\n                      Complete Route\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n          </div>\r\n  \r\n          {/* Job Pool */}\r\n          <div className=\"mt-8\">\r\n            <h2 className=\"text-2xl font-semibold mb-4 flex justify-between items-center\">\r\n              Job Pool\r\n              {selectedJobs.length > 0 && (\r\n                <div className=\"flex space-x-4\">\r\n                  <button\r\n                    onClick={() => setSelectedJobs([])}\r\n                    className=\"px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition\"\r\n                  >\r\n                    Clear Selection\r\n                  </button>\r\n                  <button\r\n                    onClick={() => handleCompleteJob(selectedJobs)}\r\n                    className=\"px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition\"\r\n                  >\r\n                    Complete Selected Jobs\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </h2>\r\n            <p className=\"text-sm text-gray-400 mb-2\">\r\n              Click on jobs to select multiple, then drag to a route or complete.\r\n            </p>\r\n  \r\n            {/* Job Color Legend */}\r\n            <div className=\"mt-2 p-2 bg-gray-800 rounded-lg text-white\">\r\n              <h3 className=\"font-bold mb-2\">Job Color Legend</h3>\r\n              <ul className=\"flex space-x-8\">\r\n                <li className=\"flex items-center\">\r\n                  <span className=\"w-4 h-4 inline-block bg-green-600 mr-2\" /> One-time job\r\n                </li>\r\n                <li className=\"flex items-center\">\r\n                  <span className=\"w-4 h-4 inline-block bg-blue-600 mr-2\" /> Weekly\r\n                </li>\r\n                <li className=\"flex items-center\">\r\n                  <span className=\"w-4 h-4 inline-block bg-yellow-600 mr-2\" /> Bi-weekly\r\n                </li>\r\n                <li className=\"flex items-center\">\r\n                  <span className=\"w-4 h-4 inline-block bg-purple-600 mr-2\" /> Monthly\r\n                </li>\r\n              </ul>\r\n            </div>\r\n  \r\n            {renderDroppableArea('jobPool-0', jobPool, true)}\r\n          </div>\r\n        </DragDropContext>\r\n  \r\n        {saving && (\r\n          <div className=\"fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 z-50\">\r\n            <ClipLoader color=\"#ffffff\" loading={saving} size={50} />\r\n            <p className=\"text-white mt-4\">Saving...</p>\r\n          </div>\r\n        )}\r\n  \r\n        {/* Confirmation Dialog for Route Completion */}\r\n        {confirmDialog.isOpen && (\r\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\r\n            <div className=\"bg-gray-800 p-6 rounded-lg text-white shadow-lg\">\r\n              <h3 className=\"text-xl font-semibold\">Confirm Route Completion</h3>\r\n              <p className=\"mt-4\">Are you sure you want to complete all jobs in this route?</p>\r\n              <div className=\"mt-6 flex justify-end space-x-4\">\r\n                <button\r\n                  onClick={() => setConfirmDialog({ isOpen: false, routeIndex: null })}\r\n                  className=\"px-4 py-2 bg-gray-600 rounded-md hover:bg-gray-700\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    handleCompleteRoute(confirmDialog.routeIndex);\r\n                    setConfirmDialog({ isOpen: false, routeIndex: null }); // Close after confirming\r\n                  }}\r\n                  className=\"px-4 py-2 bg-green-500 rounded-md hover:bg-green-600\"\r\n                >\r\n                  Confirm\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );  \r\n};\r\n\r\nexport default BuildRoutes;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}