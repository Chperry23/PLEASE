{"ast":null,"code":"// utils.js\nimport axios from 'axios';\nimport debounce from 'lodash/debounce';\nexport const API_BASE_URL = 'http://localhost:5000/api';\nexport const DAYS_OF_WEEK = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\nexport const defaultRoutes = DAYS_OF_WEEK.reduce((acc, day) => {\n  acc[day] = [{\n    index: 0,\n    jobs: []\n  }];\n  return acc;\n}, {});\nexport const validateRoutesStructure = routes => {\n  const validatedRoutes = {\n    ...defaultRoutes\n  };\n  DAYS_OF_WEEK.forEach(day => {\n    if (Array.isArray(routes[day])) {\n      validatedRoutes[day] = routes[day].map((route, idx) => ({\n        index: idx,\n        jobs: Array.isArray(route.jobs) ? route.jobs : []\n      }));\n    }\n  });\n  return validatedRoutes;\n};\nconst initializeData = async () => {\n  setLoading(true);\n  try {\n    const [fetchedRoutesResponse, fetchedJobsResponse] = await Promise.all([fetchWithAuth('/routes'), fetchWithAuth('/routes/jobs/available')]);\n    console.log('Fetched Routes Response:', fetchedRoutesResponse);\n    console.log('Fetched Jobs Response:', fetchedJobsResponse);\n    const fetchedRoutes = (fetchedRoutesResponse === null || fetchedRoutesResponse === void 0 ? void 0 : fetchedRoutesResponse.routes) || defaultRoutes;\n    const fetchedJobs = (fetchedJobsResponse === null || fetchedJobsResponse === void 0 ? void 0 : fetchedJobsResponse.jobs) || [];\n    console.log('Fetched Jobs:', fetchedJobs); // Debugging line\n    setRoutes(validateRoutesStructure(fetchedRoutes));\n    setJobPool(fetchedJobs);\n    console.log('Job Pool after fetch:', fetchedJobs); // Log job pool after setting it\n  } catch (err) {\n    console.error('Error fetching data:', err);\n    setError('Failed to load routes and jobs. Please refresh the page.');\n  } finally {\n    setLoading(false);\n  }\n};","map":{"version":3,"names":["axios","debounce","API_BASE_URL","DAYS_OF_WEEK","defaultRoutes","reduce","acc","day","index","jobs","validateRoutesStructure","routes","validatedRoutes","forEach","Array","isArray","map","route","idx","initializeData","setLoading","fetchedRoutesResponse","fetchedJobsResponse","Promise","all","fetchWithAuth","console","log","fetchedRoutes","fetchedJobs","setRoutes","setJobPool","err","error","setError"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/components/utils.js"],"sourcesContent":["// utils.js\r\nimport axios from 'axios';\r\nimport debounce from 'lodash/debounce';\r\n\r\nexport const API_BASE_URL = 'http://localhost:5000/api';\r\n\r\nexport const DAYS_OF_WEEK = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\r\n\r\nexport const defaultRoutes = DAYS_OF_WEEK.reduce((acc, day) => {\r\n  acc[day] = [\r\n    {\r\n      index: 0,\r\n      jobs: [],\r\n    },\r\n  ];\r\n  return acc;\r\n}, {});\r\n\r\nexport const validateRoutesStructure = (routes) => {\r\n  const validatedRoutes = { ...defaultRoutes };\r\n  DAYS_OF_WEEK.forEach((day) => {\r\n    if (Array.isArray(routes[day])) {\r\n      validatedRoutes[day] = routes[day].map((route, idx) => ({\r\n        index: idx,\r\n        jobs: Array.isArray(route.jobs) ? route.jobs : [],\r\n      }));\r\n    }\r\n  });\r\n  return validatedRoutes;\r\n};\r\n\r\nconst initializeData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const [fetchedRoutesResponse, fetchedJobsResponse] = await Promise.all([\r\n        fetchWithAuth('/routes'),\r\n        fetchWithAuth('/routes/jobs/available'),\r\n      ]);\r\n  \r\n      console.log('Fetched Routes Response:', fetchedRoutesResponse);\r\n      console.log('Fetched Jobs Response:', fetchedJobsResponse);\r\n  \r\n      const fetchedRoutes = fetchedRoutesResponse?.routes || defaultRoutes;\r\n      const fetchedJobs = fetchedJobsResponse?.jobs || [];\r\n  \r\n      console.log('Fetched Jobs:', fetchedJobs); // Debugging line\r\n      setRoutes(validateRoutesStructure(fetchedRoutes));\r\n      setJobPool(fetchedJobs);\r\n  \r\n      console.log('Job Pool after fetch:', fetchedJobs); // Log job pool after setting it\r\n    } catch (err) {\r\n      console.error('Error fetching data:', err);\r\n      setError('Failed to load routes and jobs. Please refresh the page.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  "],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,iBAAiB;AAEtC,OAAO,MAAMC,YAAY,GAAG,2BAA2B;AAEvD,OAAO,MAAMC,YAAY,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,CAAC;AAE1G,OAAO,MAAMC,aAAa,GAAGD,YAAY,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC7DD,GAAG,CAACC,GAAG,CAAC,GAAG,CACT;IACEC,KAAK,EAAE,CAAC;IACRC,IAAI,EAAE;EACR,CAAC,CACF;EACD,OAAOH,GAAG;AACZ,CAAC,EAAE,CAAC,CAAC,CAAC;AAEN,OAAO,MAAMI,uBAAuB,GAAIC,MAAM,IAAK;EACjD,MAAMC,eAAe,GAAG;IAAE,GAAGR;EAAc,CAAC;EAC5CD,YAAY,CAACU,OAAO,CAAEN,GAAG,IAAK;IAC5B,IAAIO,KAAK,CAACC,OAAO,CAACJ,MAAM,CAACJ,GAAG,CAAC,CAAC,EAAE;MAC9BK,eAAe,CAACL,GAAG,CAAC,GAAGI,MAAM,CAACJ,GAAG,CAAC,CAACS,GAAG,CAAC,CAACC,KAAK,EAAEC,GAAG,MAAM;QACtDV,KAAK,EAAEU,GAAG;QACVT,IAAI,EAAEK,KAAK,CAACC,OAAO,CAACE,KAAK,CAACR,IAAI,CAAC,GAAGQ,KAAK,CAACR,IAAI,GAAG;MACjD,CAAC,CAAC,CAAC;IACL;EACF,CAAC,CAAC;EACF,OAAOG,eAAe;AACxB,CAAC;AAED,MAAMO,cAAc,GAAG,MAAAA,CAAA,KAAY;EAC/BC,UAAU,CAAC,IAAI,CAAC;EAChB,IAAI;IACF,MAAM,CAACC,qBAAqB,EAAEC,mBAAmB,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACrEC,aAAa,CAAC,SAAS,CAAC,EACxBA,aAAa,CAAC,wBAAwB,CAAC,CACxC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEN,qBAAqB,CAAC;IAC9DK,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEL,mBAAmB,CAAC;IAE1D,MAAMM,aAAa,GAAG,CAAAP,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEV,MAAM,KAAIP,aAAa;IACpE,MAAMyB,WAAW,GAAG,CAAAP,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAEb,IAAI,KAAI,EAAE;IAEnDiB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEE,WAAW,CAAC,CAAC,CAAC;IAC3CC,SAAS,CAACpB,uBAAuB,CAACkB,aAAa,CAAC,CAAC;IACjDG,UAAU,CAACF,WAAW,CAAC;IAEvBH,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEE,WAAW,CAAC,CAAC,CAAC;EACrD,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZN,OAAO,CAACO,KAAK,CAAC,sBAAsB,EAAED,GAAG,CAAC;IAC1CE,QAAQ,CAAC,0DAA0D,CAAC;EACtE,CAAC,SAAS;IACRd,UAAU,CAAC,KAAK,CAAC;EACnB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}