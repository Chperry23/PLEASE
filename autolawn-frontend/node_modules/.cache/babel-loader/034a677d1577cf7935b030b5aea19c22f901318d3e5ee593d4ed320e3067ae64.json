{"ast":null,"code":"var _jsxFileName = \"C:\\\\AUTOLAWN\\\\autolawn-frontend\\\\src\\\\components\\\\CustomerMap.js\",\n  _s = $RefreshSig$();\n// src/components/CustomerMap.js\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker, Polyline } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '600px'\n};\nconst defaultCenter = {\n  lat: 40.7128,\n  lng: -74.0060\n};\nconst CustomerMap = ({\n  customers,\n  routes\n}) => {\n  _s();\n  const [center, setCenter] = useState(defaultCenter);\n  useEffect(() => {\n    console.log(\"Customers:\", customers); // Log to check customer data\n    if (customers.length > 0) {\n      const validCustomers = customers.filter(c => {\n        var _c$address, _c$address2;\n        return ((_c$address = c.address) === null || _c$address === void 0 ? void 0 : _c$address.lat) && ((_c$address2 = c.address) === null || _c$address2 === void 0 ? void 0 : _c$address2.lng);\n      });\n      if (validCustomers.length > 0) {\n        const lats = validCustomers.map(c => c.address.lat);\n        const lngs = validCustomers.map(c => c.address.lng);\n        setCenter({\n          lat: (Math.min(...lats) + Math.max(...lats)) / 2,\n          lng: (Math.min(...lngs) + Math.max(...lngs)) / 2\n        });\n      }\n    }\n  }, [customers]);\n  const getRandomColor = () => `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 10,\n      children: [customers.map(customer => {\n        var _customer$address, _customer$address2;\n        if ((_customer$address = customer.address) !== null && _customer$address !== void 0 && _customer$address.lat && (_customer$address2 = customer.address) !== null && _customer$address2 !== void 0 && _customer$address2.lng) {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            position: {\n              lat: parseFloat(customer.address.lat),\n              lng: parseFloat(customer.address.lng)\n            },\n            title: customer.name\n          }, customer._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this);\n        }\n        return null;\n      }), routes.map(route => /*#__PURE__*/_jsxDEV(Polyline, {\n        path: route.customers.filter(c => {\n          var _c$address3, _c$address4;\n          return ((_c$address3 = c.address) === null || _c$address3 === void 0 ? void 0 : _c$address3.lat) && ((_c$address4 = c.address) === null || _c$address4 === void 0 ? void 0 : _c$address4.lng);\n        }).map(c => ({\n          lat: parseFloat(c.address.lat),\n          lng: parseFloat(c.address.lng)\n        })),\n        options: {\n          strokeColor: getRandomColor(),\n          strokeOpacity: 0.8,\n          strokeWeight: 2\n        }\n      }, route._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomerMap, \"YSI8zrwIJmD1nP7udH7p0rLH1Hw=\");\n_c = CustomerMap;\nexport default CustomerMap;\nvar _c;\n$RefreshReg$(_c, \"CustomerMap\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","Polyline","jsxDEV","_jsxDEV","containerStyle","width","height","defaultCenter","lat","lng","CustomerMap","customers","routes","_s","center","setCenter","console","log","length","validCustomers","filter","c","_c$address","_c$address2","address","lats","map","lngs","Math","min","max","getRandomColor","floor","random","toString","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","children","mapContainerStyle","zoom","customer","_customer$address","_customer$address2","position","parseFloat","title","name","_id","fileName","_jsxFileName","lineNumber","columnNumber","route","path","_c$address3","_c$address4","options","strokeColor","strokeOpacity","strokeWeight","_c","$RefreshReg$"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/components/CustomerMap.js"],"sourcesContent":["// src/components/CustomerMap.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { GoogleMap, LoadScript, Marker, Polyline } from '@react-google-maps/api';\r\n\r\nconst containerStyle = {\r\n  width: '100%',\r\n  height: '600px'\r\n};\r\n\r\nconst defaultCenter = {\r\n  lat: 40.7128,\r\n  lng: -74.0060\r\n};\r\n\r\nconst CustomerMap = ({ customers, routes }) => {\r\n  const [center, setCenter] = useState(defaultCenter);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Customers:\", customers); // Log to check customer data\r\n    if (customers.length > 0) {\r\n      const validCustomers = customers.filter(c => c.address?.lat && c.address?.lng);\r\n      if (validCustomers.length > 0) {\r\n        const lats = validCustomers.map(c => c.address.lat);\r\n        const lngs = validCustomers.map(c => c.address.lng);\r\n        setCenter({\r\n          lat: (Math.min(...lats) + Math.max(...lats)) / 2,\r\n          lng: (Math.min(...lngs) + Math.max(...lngs)) / 2\r\n        });\r\n      }\r\n    }\r\n  }, [customers]);\r\n\r\n  const getRandomColor = () => `#${Math.floor(Math.random()*16777215).toString(16)}`;\r\n\r\n  return (\r\n    <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY}>\r\n      <GoogleMap\r\n        mapContainerStyle={containerStyle}\r\n        center={center}\r\n        zoom={10}\r\n      >\r\n        {customers.map((customer) => {\r\n          if (customer.address?.lat && customer.address?.lng) {\r\n            return (\r\n              <Marker\r\n                key={customer._id}\r\n                position={{\r\n                  lat: parseFloat(customer.address.lat),\r\n                  lng: parseFloat(customer.address.lng)\r\n                }}\r\n                title={customer.name}\r\n              />\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n        {routes.map((route) => (\r\n          <Polyline\r\n            key={route._id}\r\n            path={route.customers\r\n              .filter(c => c.address?.lat && c.address?.lng)\r\n              .map(c => ({ lat: parseFloat(c.address.lat), lng: parseFloat(c.address.lng) }))}\r\n            options={{\r\n              strokeColor: getRandomColor(),\r\n              strokeOpacity: 0.8,\r\n              strokeWeight: 2,\r\n            }}\r\n          />\r\n        ))}\r\n      </GoogleMap>\r\n    </LoadScript>\r\n  );\r\n};\r\n\r\nexport default CustomerMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}