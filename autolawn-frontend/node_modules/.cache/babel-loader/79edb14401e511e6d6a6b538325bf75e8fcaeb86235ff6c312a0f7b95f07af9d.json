{"ast":null,"code":"// frontend/src/api/dashboardApi.js\n\nimport axios from 'axios';\n\n// Base URL for API requests; use environment variables for flexibility\nconst API_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api';\n\n/**\r\n * Function to retrieve headers with the Authorization token\r\n * @returns {Object} - Headers object containing the Bearer token\r\n */\nconst getHeaders = () => {\n  const token = localStorage.getItem('token');\n  console.log('Using token:', token); // Remove or comment out in production\n  return {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n};\n\n/**\r\n * Fetch jobs\r\n * @returns {Promise<Array>} - Returns an array of jobs\r\n */\nexport const fetchJobs = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/jobs`, getHeaders());\n    return response.data.jobs; // Adjust based on your backend response structure\n  } catch (error) {\n    var _error$response;\n    console.error('Error fetching jobs:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\n\n/**\r\n * Fetch customers\r\n * @returns {Promise<Array>} - Returns an array of customers\r\n */\nexport const fetchCustomers = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/customers`, getHeaders());\n    return response.data.customers; // Adjust based on your backend response structure\n  } catch (error) {\n    var _error$response2;\n    console.error('Error fetching customers:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw error;\n  }\n};\n\n/**\r\n * Fetch employees\r\n * @returns {Promise<Array>} - Returns an array of employees\r\n */\nexport const fetchEmployees = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/employees`, getHeaders());\n    return response.data.employees; // Adjust based on your backend response structure\n  } catch (error) {\n    var _error$response3;\n    console.error('Error fetching employees:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw error;\n  }\n};\n\n/**\r\n * Fetch analytics data\r\n * @param {String} timeRange - e.g., '7', '30', '90', 'all', 'custom'\r\n * @param {Object} customRange - { start: 'YYYY-MM-DD', end: 'YYYY-MM-DD' }\r\n * @returns {Promise<Object>} - Returns an object containing analytics data\r\n */\nexport const fetchAnalytics = async (timeRange, customRange = null) => {\n  try {\n    let startDate, endDate;\n    if (timeRange === 'custom' && customRange) {\n      startDate = customRange.start;\n      endDate = customRange.end;\n    } else {\n      const end = new Date();\n      const start = new Date();\n      if (timeRange === 'all') {\n        start.setFullYear(end.getFullYear() - 1); // Example: last 1 year\n      } else {\n        start.setDate(end.getDate() - parseInt(timeRange));\n      }\n      startDate = start.toISOString().split('T')[0];\n      endDate = end.toISOString().split('T')[0];\n    }\n    const response = await axios.get(`${API_URL}/analytics`, {\n      ...getHeaders(),\n      params: {\n        startDate,\n        endDate\n      }\n    });\n    return response.data.data; // Adjust based on your backend response structure\n  } catch (error) {\n    var _error$response4;\n    console.error('Error fetching analytics:', ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    throw error;\n  }\n};\n\n/**\r\n * Fetch counts of customers, jobs, and employees\r\n * @returns {Promise<Object>} - Returns an object containing the counts\r\n */\nexport const fetchAnalyticsCounts = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/analytics/counts`, getHeaders());\n    if (response.data.success) {\n      return response.data.data;\n    } else {\n      throw new Error('Failed to fetch analytics counts');\n    }\n  } catch (error) {\n    var _error$response5;\n    console.error('Error fetching analytics counts:', ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_BASE_URL","getHeaders","token","localStorage","getItem","console","log","headers","Authorization","fetchJobs","response","get","data","jobs","error","_error$response","message","fetchCustomers","customers","_error$response2","fetchEmployees","employees","_error$response3","fetchAnalytics","timeRange","customRange","startDate","endDate","start","end","Date","setFullYear","getFullYear","setDate","getDate","parseInt","toISOString","split","params","_error$response4","fetchAnalyticsCounts","success","Error","_error$response5"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/api/dashboardApi.js"],"sourcesContent":["// frontend/src/api/dashboardApi.js\r\n\r\nimport axios from 'axios';\r\n\r\n// Base URL for API requests; use environment variables for flexibility\r\nconst API_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api';\r\n\r\n/**\r\n * Function to retrieve headers with the Authorization token\r\n * @returns {Object} - Headers object containing the Bearer token\r\n */\r\nconst getHeaders = () => {\r\n  const token = localStorage.getItem('token');\r\n  console.log('Using token:', token); // Remove or comment out in production\r\n  return {\r\n    headers: { Authorization: `Bearer ${token}` },\r\n  };\r\n};\r\n\r\n/**\r\n * Fetch jobs\r\n * @returns {Promise<Array>} - Returns an array of jobs\r\n */\r\nexport const fetchJobs = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/jobs`, getHeaders());\r\n    return response.data.jobs; // Adjust based on your backend response structure\r\n  } catch (error) {\r\n    console.error('Error fetching jobs:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch customers\r\n * @returns {Promise<Array>} - Returns an array of customers\r\n */\r\nexport const fetchCustomers = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/customers`, getHeaders());\r\n    return response.data.customers; // Adjust based on your backend response structure\r\n  } catch (error) {\r\n    console.error('Error fetching customers:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch employees\r\n * @returns {Promise<Array>} - Returns an array of employees\r\n */\r\nexport const fetchEmployees = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/employees`, getHeaders());\r\n    return response.data.employees; // Adjust based on your backend response structure\r\n  } catch (error) {\r\n    console.error('Error fetching employees:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch analytics data\r\n * @param {String} timeRange - e.g., '7', '30', '90', 'all', 'custom'\r\n * @param {Object} customRange - { start: 'YYYY-MM-DD', end: 'YYYY-MM-DD' }\r\n * @returns {Promise<Object>} - Returns an object containing analytics data\r\n */\r\nexport const fetchAnalytics = async (timeRange, customRange = null) => {\r\n  try {\r\n    let startDate, endDate;\r\n\r\n    if (timeRange === 'custom' && customRange) {\r\n      startDate = customRange.start;\r\n      endDate = customRange.end;\r\n    } else {\r\n      const end = new Date();\r\n      const start = new Date();\r\n      if (timeRange === 'all') {\r\n        start.setFullYear(end.getFullYear() - 1); // Example: last 1 year\r\n      } else {\r\n        start.setDate(end.getDate() - parseInt(timeRange));\r\n      }\r\n      startDate = start.toISOString().split('T')[0];\r\n      endDate = end.toISOString().split('T')[0];\r\n    }\r\n\r\n    const response = await axios.get(`${API_URL}/analytics`, {\r\n      ...getHeaders(),\r\n      params: { startDate, endDate },\r\n    });\r\n    return response.data.data; // Adjust based on your backend response structure\r\n  } catch (error) {\r\n    console.error('Error fetching analytics:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Fetch counts of customers, jobs, and employees\r\n * @returns {Promise<Object>} - Returns an object containing the counts\r\n */\r\nexport const fetchAnalyticsCounts = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/analytics/counts`, getHeaders());\r\n    if (response.data.success) {\r\n      return response.data.data;\r\n    } else {\r\n      throw new Error('Failed to fetch analytics counts');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching analytics counts:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}