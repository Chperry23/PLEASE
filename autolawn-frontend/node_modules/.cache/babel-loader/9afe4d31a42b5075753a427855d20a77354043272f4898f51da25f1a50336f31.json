{"ast":null,"code":"import axiosInstance from '../utils/axiosInstance';\nexport const fetchJobsAnalytics = async timeRange => {\n  try {\n    const response = await axiosInstance.get('/api/jobs');\n    const jobs = response.data;\n    const endDate = new Date();\n    const startDate = new Date(endDate);\n    startDate.setDate(endDate.getDate() - parseInt(timeRange));\n    const filteredJobs = jobs.filter(job => new Date(job.date) >= startDate && new Date(job.date) <= endDate);\n\n    // Revenue Over Time\n    const revenueOverTime = filteredJobs.reduce((acc, job) => {\n      const date = job.date.split('T')[0];\n      if (!acc[date]) {\n        acc[date] = 0;\n      }\n      acc[date] += job.price;\n      return acc;\n    }, {});\n\n    // Recurring vs One-Time Revenue\n    const recurringVsOneTime = filteredJobs.reduce((acc, job) => {\n      if (job.isRecurring) {\n        acc.recurring += job.price;\n      } else {\n        acc.oneTime += job.price;\n      }\n      return acc;\n    }, {\n      recurring: 0,\n      oneTime: 0\n    });\n\n    // Average Job Duration and Hourly Rate\n    const totalDuration = filteredJobs.reduce((sum, job) => sum + job.estimatedDuration, 0);\n    const totalRevenue = filteredJobs.reduce((sum, job) => sum + job.price, 0);\n    const averageDuration = totalDuration / filteredJobs.length;\n    const averageHourlyRate = totalRevenue / totalDuration * 60; // Convert to hourly rate\n\n    // Past Due Recurring Jobs\n    const now = new Date();\n    const pastDueJobs = filteredJobs.filter(job => {\n      if (!job.isRecurring) return false;\n      const lastServiceDate = new Date(job.lastServiceDate);\n      const daysSinceLastService = (now - lastServiceDate) / (1000 * 60 * 60 * 24);\n      return job.recurrencePattern === 'Weekly' && daysSinceLastService > 7 || job.recurrencePattern === 'Bi-weekly' && daysSinceLastService > 14 || job.recurrencePattern === 'Monthly' && daysSinceLastService > 30;\n    }).length;\n    return {\n      totalJobs: jobs.length,\n      totalCustomers: new Set(jobs.map(job => job.customer)).size,\n      totalEmployees: new Set(jobs.map(job => job.assignedTo)).size,\n      revenueOverTime: Object.entries(revenueOverTime).map(([date, revenue]) => ({\n        date,\n        revenue\n      })),\n      recurringVsOneTime,\n      averageDuration,\n      averageHourlyRate,\n      pastDueJobs\n    };\n  } catch (error) {\n    console.error('Error fetching jobs analytics:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axiosInstance","fetchJobsAnalytics","timeRange","response","get","jobs","data","endDate","Date","startDate","setDate","getDate","parseInt","filteredJobs","filter","job","date","revenueOverTime","reduce","acc","split","price","recurringVsOneTime","isRecurring","recurring","oneTime","totalDuration","sum","estimatedDuration","totalRevenue","averageDuration","length","averageHourlyRate","now","pastDueJobs","lastServiceDate","daysSinceLastService","recurrencePattern","totalJobs","totalCustomers","Set","map","customer","size","totalEmployees","assignedTo","Object","entries","revenue","error","console"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/api/dashboardApi.js"],"sourcesContent":["import axiosInstance from '../utils/axiosInstance';\r\n\r\nexport const fetchJobsAnalytics = async (timeRange) => {\r\n  try {\r\n    const response = await axiosInstance.get('/api/jobs');\r\n    const jobs = response.data;\r\n\r\n    const endDate = new Date();\r\n    const startDate = new Date(endDate);\r\n    startDate.setDate(endDate.getDate() - parseInt(timeRange));\r\n\r\n    const filteredJobs = jobs.filter(job => new Date(job.date) >= startDate && new Date(job.date) <= endDate);\r\n\r\n    // Revenue Over Time\r\n    const revenueOverTime = filteredJobs.reduce((acc, job) => {\r\n      const date = job.date.split('T')[0];\r\n      if (!acc[date]) {\r\n        acc[date] = 0;\r\n      }\r\n      acc[date] += job.price;\r\n      return acc;\r\n    }, {});\r\n\r\n    // Recurring vs One-Time Revenue\r\n    const recurringVsOneTime = filteredJobs.reduce((acc, job) => {\r\n      if (job.isRecurring) {\r\n        acc.recurring += job.price;\r\n      } else {\r\n        acc.oneTime += job.price;\r\n      }\r\n      return acc;\r\n    }, { recurring: 0, oneTime: 0 });\r\n\r\n    // Average Job Duration and Hourly Rate\r\n    const totalDuration = filteredJobs.reduce((sum, job) => sum + job.estimatedDuration, 0);\r\n    const totalRevenue = filteredJobs.reduce((sum, job) => sum + job.price, 0);\r\n    const averageDuration = totalDuration / filteredJobs.length;\r\n    const averageHourlyRate = (totalRevenue / totalDuration) * 60; // Convert to hourly rate\r\n\r\n    // Past Due Recurring Jobs\r\n    const now = new Date();\r\n    const pastDueJobs = filteredJobs.filter(job => {\r\n      if (!job.isRecurring) return false;\r\n      const lastServiceDate = new Date(job.lastServiceDate);\r\n      const daysSinceLastService = (now - lastServiceDate) / (1000 * 60 * 60 * 24);\r\n      return (\r\n        (job.recurrencePattern === 'Weekly' && daysSinceLastService > 7) ||\r\n        (job.recurrencePattern === 'Bi-weekly' && daysSinceLastService > 14) ||\r\n        (job.recurrencePattern === 'Monthly' && daysSinceLastService > 30)\r\n      );\r\n    }).length;\r\n\r\n    return {\r\n      totalJobs: jobs.length,\r\n      totalCustomers: new Set(jobs.map(job => job.customer)).size,\r\n      totalEmployees: new Set(jobs.map(job => job.assignedTo)).size,\r\n      revenueOverTime: Object.entries(revenueOverTime).map(([date, revenue]) => ({ date, revenue })),\r\n      recurringVsOneTime,\r\n      averageDuration,\r\n      averageHourlyRate,\r\n      pastDueJobs\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching jobs analytics:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}