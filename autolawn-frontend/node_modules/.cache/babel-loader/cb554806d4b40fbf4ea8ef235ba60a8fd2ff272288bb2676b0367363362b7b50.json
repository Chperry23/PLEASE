{"ast":null,"code":"// backend/src/routes/profile.js\nconst express = require('express');\nconst router = express.Router();\nconst auth = require('../middleware/auth'); // Ensure this is the correct path to your auth middleware\nconst Profile = require('../models/Profile'); // Import your Profile model\nconst User = require('../models/User'); // Import your User model\nconst Customer = require('../models/Customer'); // Import your Customer model\nconst Job = require('../models/Job'); // Import your Job model\nconst mongoose = require('mongoose');\n\n// GET user profile\nrouter.get('/', auth, async (req, res) => {\n  try {\n    // Fetch user profile data, excluding the password field\n    const user = await User.findById(req.user._id).select('-password');\n    if (!user) {\n      return res.status(404).json({\n        error: 'User not found'\n      });\n    }\n    res.json(user);\n  } catch (error) {\n    console.error('Error fetching profile:', error);\n    res.status(500).json({\n      error: 'Server error'\n    });\n  }\n});\n\n// PUT (update) user profile\nrouter.put('/', auth, async (req, res) => {\n  try {\n    const updates = req.body; // Get the updated fields from the request body\n\n    // Update the user's profile\n    const updatedUser = await User.findByIdAndUpdate(req.user._id, updates, {\n      new: true,\n      runValidators: true\n    }).select('-password');\n    res.json(updatedUser);\n  } catch (error) {\n    console.error('Error updating profile:', error);\n    res.status(500).json({\n      error: 'Server error'\n    });\n  }\n});\n\n// GET Preferences\nrouter.get('/preferences', auth, async (req, res) => {\n  try {\n    const profile = await Profile.findOne({\n      userId: req.user._id\n    });\n    res.json(profile ? profile.preferences : {});\n  } catch (error) {\n    console.error('Error fetching preferences:', error);\n    res.status(500).json({\n      error: 'Server error'\n    });\n  }\n});\n\n// UPDATE Preferences\nrouter.put('/preferences', auth, async (req, res) => {\n  try {\n    const preferences = req.body;\n    const profile = await Profile.findOneAndUpdate({\n      userId: req.user._id\n    }, {\n      preferences\n    }, {\n      new: true,\n      upsert: true\n    });\n    res.json(profile.preferences);\n  } catch (error) {\n    console.error('Error updating preferences:', error);\n    res.status(500).json({\n      error: 'Server error'\n    });\n  }\n});\n\n// GET Stats\nrouter.get('/stats', auth, async (req, res) => {\n  try {\n    var _totalRevenueResult$;\n    const userId = req.user._id;\n\n    // Fetch stats from database\n    const customersAdded = await Customer.countDocuments({\n      userId\n    });\n    const jobsAdded = await Job.countDocuments({\n      userId\n    });\n    const jobsCompleted = await Job.countDocuments({\n      userId,\n      status: 'Completed'\n    });\n    const totalRevenueResult = await Job.aggregate([{\n      $match: {\n        userId: mongoose.Types.ObjectId(userId),\n        status: 'Completed'\n      }\n    }, {\n      $group: {\n        _id: null,\n        total: {\n          $sum: '$price'\n        }\n      }\n    }]);\n    const totalRevenue = ((_totalRevenueResult$ = totalRevenueResult[0]) === null || _totalRevenueResult$ === void 0 ? void 0 : _totalRevenueResult$.total) || 0;\n    res.json({\n      customersAdded,\n      jobsAdded,\n      jobsCompleted,\n      totalRevenue\n    });\n  } catch (error) {\n    console.error('Error fetching stats:', error);\n    res.status(500).json({\n      error: 'Server error'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","auth","Profile","User","Customer","Job","mongoose","get","req","res","user","findById","_id","select","status","json","error","console","put","updates","body","updatedUser","findByIdAndUpdate","new","runValidators","profile","findOne","userId","preferences","findOneAndUpdate","upsert","_totalRevenueResult$","customersAdded","countDocuments","jobsAdded","jobsCompleted","totalRevenueResult","aggregate","$match","Types","ObjectId","$group","total","$sum","totalRevenue","module","exports"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/pages/Profile.js"],"sourcesContent":["// backend/src/routes/profile.js\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst auth = require('../middleware/auth'); // Ensure this is the correct path to your auth middleware\r\nconst Profile = require('../models/Profile'); // Import your Profile model\r\nconst User = require('../models/User'); // Import your User model\r\nconst Customer = require('../models/Customer'); // Import your Customer model\r\nconst Job = require('../models/Job'); // Import your Job model\r\nconst mongoose = require('mongoose');\r\n\r\n// GET user profile\r\nrouter.get('/', auth, async (req, res) => {\r\n  try {\r\n    // Fetch user profile data, excluding the password field\r\n    const user = await User.findById(req.user._id).select('-password');\r\n    if (!user) {\r\n      return res.status(404).json({ error: 'User not found' });\r\n    }\r\n    res.json(user);\r\n  } catch (error) {\r\n    console.error('Error fetching profile:', error);\r\n    res.status(500).json({ error: 'Server error' });\r\n  }\r\n});\r\n\r\n// PUT (update) user profile\r\nrouter.put('/', auth, async (req, res) => {\r\n  try {\r\n    const updates = req.body; // Get the updated fields from the request body\r\n\r\n    // Update the user's profile\r\n    const updatedUser = await User.findByIdAndUpdate(\r\n      req.user._id,\r\n      updates,\r\n      { new: true, runValidators: true }\r\n    ).select('-password');\r\n\r\n    res.json(updatedUser);\r\n  } catch (error) {\r\n    console.error('Error updating profile:', error);\r\n    res.status(500).json({ error: 'Server error' });\r\n  }\r\n});\r\n\r\n// GET Preferences\r\nrouter.get('/preferences', auth, async (req, res) => {\r\n  try {\r\n    const profile = await Profile.findOne({ userId: req.user._id });\r\n    res.json(profile ? profile.preferences : {});\r\n  } catch (error) {\r\n    console.error('Error fetching preferences:', error);\r\n    res.status(500).json({ error: 'Server error' });\r\n  }\r\n});\r\n\r\n// UPDATE Preferences\r\nrouter.put('/preferences', auth, async (req, res) => {\r\n  try {\r\n    const preferences = req.body;\r\n    const profile = await Profile.findOneAndUpdate(\r\n      { userId: req.user._id },\r\n      { preferences },\r\n      { new: true, upsert: true }\r\n    );\r\n    res.json(profile.preferences);\r\n  } catch (error) {\r\n    console.error('Error updating preferences:', error);\r\n    res.status(500).json({ error: 'Server error' });\r\n  }\r\n});\r\n\r\n// GET Stats\r\nrouter.get('/stats', auth, async (req, res) => {\r\n  try {\r\n    const userId = req.user._id;\r\n\r\n    // Fetch stats from database\r\n    const customersAdded = await Customer.countDocuments({ userId });\r\n    const jobsAdded = await Job.countDocuments({ userId });\r\n    const jobsCompleted = await Job.countDocuments({ userId, status: 'Completed' });\r\n\r\n    const totalRevenueResult = await Job.aggregate([\r\n      { $match: { userId: mongoose.Types.ObjectId(userId), status: 'Completed' } },\r\n      { $group: { _id: null, total: { $sum: '$price' } } },\r\n    ]);\r\n\r\n    const totalRevenue = totalRevenueResult[0]?.total || 0;\r\n\r\n    res.json({\r\n      customersAdded,\r\n      jobsAdded,\r\n      jobsCompleted,\r\n      totalRevenue,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching stats:', error);\r\n    res.status(500).json({ error: 'Server error' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}