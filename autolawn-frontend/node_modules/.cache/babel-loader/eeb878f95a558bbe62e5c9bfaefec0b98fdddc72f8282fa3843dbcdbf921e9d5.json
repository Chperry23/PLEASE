{"ast":null,"code":"var _jsxFileName = \"C:\\\\AUTOLAWN\\\\autolawn-frontend\\\\src\\\\pages\\\\BuildRoutes\\\\BuildRoutes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, memo } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { useNavigate } from 'react-router-dom';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin, { Draggable as FcDraggable } from '@fullcalendar/interaction';\nimport CustomerMap from '../../components/CustomerMap';\nimport { fetchJobs, fetchRoutes, saveRoute, deleteRoute, updateJob, updateRoute } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemoizedFullCalendar = /*#__PURE__*/memo(FullCalendar);\n_c = MemoizedFullCalendar;\nconst BuildRoutes = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [routes, setRoutes] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [activeTab, setActiveTab] = useState('routes');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState('');\n  const navigate = useNavigate();\n  const fetchData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const [jobsData, routesData] = await Promise.all([fetchJobs(), fetchRoutes()]);\n      setJobs(jobsData || []);\n      setRoutes(routesData || []);\n      generateEvents(jobsData, routesData);\n    } catch (err) {\n      console.error('Error fetching data:', err);\n      setError('Failed to load data. Please try refreshing the page.');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n  const generateEvents = (jobsData, routesData) => {\n    const jobEvents = jobsData.map(job => ({\n      id: job._id,\n      title: job.title,\n      start: new Date(job.scheduledDate),\n      end: new Date(job.scheduledEndDate),\n      color: '#4CAF50',\n      extendedProps: {\n        type: 'job',\n        jobId: job._id\n      }\n    })).filter(event => event.start && event.end);\n    const routeEvents = routesData.flatMap(route => route.customers.map(customer => ({\n      id: `${route._id}-${customer._id}`,\n      title: `${route.name}: ${customer.name}`,\n      start: new Date(customer.scheduledDate),\n      end: new Date(customer.scheduledEndDate),\n      color: '#2196F3',\n      extendedProps: {\n        type: 'route',\n        routeId: route._id,\n        customerId: customer._id\n      }\n    }))).filter(event => event.start && event.end);\n    setEvents([...jobEvents, ...routeEvents]);\n  };\n  const initializeExternalEvents = useCallback(() => {\n    const draggableElems = document.querySelectorAll('.fc-event');\n    draggableElems.forEach(elem => {\n      new FcDraggable(elem, {\n        eventData: function (eventEl) {\n          const data = JSON.parse(eventEl.getAttribute('data-event'));\n          return {\n            ...data,\n            create: true // This ensures the event is created when dropped\n          };\n        }\n      });\n    });\n  }, []);\n  useEffect(() => {\n    if (activeTab === 'calendar') {\n      setTimeout(initializeExternalEvents, 0);\n    }\n  }, [activeTab, jobs, routes, initializeExternalEvents]);\n  const handleEventDrop = async info => {\n    const {\n      event,\n      oldEvent\n    } = info;\n    console.log('Event dropped:', event);\n    console.log('Event extendedProps:', event.extendedProps);\n    if (!event.start || !event.end) {\n      console.error('Event is missing start or end time');\n      info.revert();\n      return;\n    }\n    try {\n      if (event.extendedProps.type === 'job') {\n        await updateJob(event.id, {\n          scheduledDate: event.start,\n          scheduledEndDate: event.end\n        });\n        setJobs(prevJobs => prevJobs.map(job => job._id === event.id ? {\n          ...job,\n          scheduledDate: event.start,\n          scheduledEndDate: event.end\n        } : job));\n      } else if (event.extendedProps.type === 'route') {\n        const [routeId, customerId] = event.id.split('-');\n        await updateRoute(routeId, {\n          customers: [{\n            customer: customerId,\n            scheduledDate: event.start,\n            scheduledEndDate: event.end\n          }]\n        });\n        setRoutes(prevRoutes => prevRoutes.map(route => route._id === routeId ? {\n          ...route,\n          customers: route.customers.map(customer => customer._id === customerId ? {\n            ...customer,\n            scheduledDate: event.start,\n            scheduledEndDate: event.end\n          } : customer)\n        } : route));\n      } else {\n        console.error('Unknown event type:', event.extendedProps.type);\n        info.revert();\n        return;\n      }\n      setEvents(prevEvents => prevEvents.map(e => e.id === event.id ? {\n        ...e,\n        start: event.start,\n        end: event.end\n      } : e));\n      setSuccessMessage('Event updated successfully!');\n    } catch (error) {\n      console.error('Error updating event:', error);\n      setError('Failed to update event. Please try again.');\n      info.revert();\n    }\n  };\n  const handleEventReceive = async info => {\n    const {\n      event\n    } = info;\n    console.log('Event received:', event);\n    const startDate = event.start || new Date();\n    const endDate = event.end || new Date(startDate.getTime() + 60 * 60 * 1000);\n    try {\n      let updatedEvent;\n      if (event.extendedProps.type === 'job') {\n        updatedEvent = await updateJob(event.id, {\n          scheduledDate: startDate,\n          scheduledEndDate: endDate\n        });\n        setJobs(prevJobs => prevJobs.map(job => job._id === event.id ? {\n          ...job,\n          scheduledDate: startDate,\n          scheduledEndDate: endDate\n        } : job));\n      } else if (event.extendedProps.type === 'route') {\n        updatedEvent = await updateRoute(event.id, {\n          scheduledDate: startDate,\n          scheduledEndDate: endDate\n        });\n        setRoutes(prevRoutes => prevRoutes.map(route => route._id === event.id ? {\n          ...route,\n          scheduledDate: startDate,\n          scheduledEndDate: endDate\n        } : route));\n      }\n      if (updatedEvent) {\n        setEvents(prevEvents => [...prevEvents, {\n          id: event.id,\n          title: event.title,\n          start: startDate,\n          end: endDate,\n          color: event.extendedProps.type === 'job' ? '#4CAF50' : '#2196F3',\n          extendedProps: event.extendedProps\n        }]);\n        setSuccessMessage('Event scheduled successfully!');\n      }\n    } catch (error) {\n      console.error('Error scheduling event:', error);\n      setError('Failed to schedule event. Please try again.');\n      info.revert();\n    }\n  };\n  const onDragEnd = async result => {\n    const {\n      source,\n      destination\n    } = result;\n    if (!destination) return;\n    if (source.droppableId === 'jobPool' && destination.droppableId.startsWith('route-')) {\n      const jobId = result.draggableId;\n      const routeId = destination.droppableId.split('-')[1];\n      await moveJobToRoute(jobId, routeId);\n    } else if (source.droppableId.startsWith('route-') && destination.droppableId === 'jobPool') {\n      const jobId = result.draggableId;\n      const routeId = source.droppableId.split('-')[1];\n      await moveJobToPool(jobId, routeId);\n    } else if (source.droppableId.startsWith('route-') && destination.droppableId.startsWith('route-')) {\n      const jobId = result.draggableId;\n      const sourceRouteId = source.droppableId.split('-')[1];\n      const destRouteId = destination.droppableId.split('-')[1];\n      await moveJobBetweenRoutes(jobId, sourceRouteId, destRouteId);\n    }\n  };\n  const moveJobToRoute = async (jobId, routeId) => {\n    try {\n      const job = jobs.find(j => j._id === jobId);\n      const updatedRoute = await updateRoute(routeId, {\n        $push: {\n          customers: job._id\n        }\n      });\n      await updateJob(jobId, {\n        route: routeId\n      });\n      setJobs(prevJobs => prevJobs.filter(j => j._id !== jobId));\n      setRoutes(prevRoutes => prevRoutes.map(r => r._id === routeId ? updatedRoute : r));\n      setSuccessMessage('Job added to route successfully!');\n    } catch (error) {\n      console.error('Error moving job to route:', error);\n      setError('Failed to move job to route. Please try again.');\n    }\n  };\n  const moveJobToPool = async (jobId, routeId) => {\n    try {\n      const updatedRoute = await updateRoute(routeId, {\n        $pull: {\n          customers: jobId\n        }\n      });\n      const updatedJob = await updateJob(jobId, {\n        route: null\n      });\n      setRoutes(prevRoutes => prevRoutes.map(r => r._id === routeId ? updatedRoute : r));\n      setJobs(prevJobs => [...prevJobs, updatedJob]);\n      setSuccessMessage('Job removed from route successfully!');\n    } catch (error) {\n      console.error('Error moving job to pool:', error);\n      setError('Failed to remove job from route. Please try again.');\n    }\n  };\n  const moveJobBetweenRoutes = async (jobId, sourceRouteId, destRouteId) => {\n    try {\n      await updateRoute(sourceRouteId, {\n        $pull: {\n          customers: jobId\n        }\n      });\n      const updatedDestRoute = await updateRoute(destRouteId, {\n        $push: {\n          customers: jobId\n        }\n      });\n      await updateJob(jobId, {\n        route: destRouteId\n      });\n      setRoutes(prevRoutes => prevRoutes.map(route => {\n        if (route._id === sourceRouteId) return {\n          ...route,\n          customers: route.customers.filter(c => c._id !== jobId)\n        };\n        if (route._id === destRouteId) return updatedDestRoute;\n        return route;\n      }));\n      setSuccessMessage('Job moved between routes successfully!');\n    } catch (error) {\n      console.error('Error moving job between routes:', error);\n      setError('Failed to move job between routes. Please try again.');\n    }\n  };\n  const handleEditRouteName = async (routeId, newName) => {\n    try {\n      const updatedRoute = await updateRoute(routeId, {\n        name: newName\n      });\n      setRoutes(prevRoutes => prevRoutes.map(r => r._id === routeId ? updatedRoute : r));\n      setSuccessMessage('Route name updated successfully!');\n    } catch (error) {\n      console.error('Error updating route name:', error);\n      setError('Failed to update route name. Please try again.');\n    }\n  };\n  const handleMapView = routeId => {\n    navigate(`/route-map/${routeId}`);\n  };\n  const handleAddRoute = async () => {\n    try {\n      const newRoute = await saveRoute({\n        name: `New Route ${routes.length + 1}`,\n        customers: []\n      });\n      setRoutes(prevRoutes => [...prevRoutes, newRoute]);\n      setSuccessMessage('New route added successfully!');\n    } catch (error) {\n      console.error('Error adding new route:', error);\n      setError('Failed to add new route. Please try again.');\n    }\n  };\n  const handleDeleteRoute = async routeId => {\n    try {\n      await deleteRoute(routeId);\n      setRoutes(prevRoutes => prevRoutes.filter(route => route._id !== routeId));\n      setSuccessMessage('Route deleted successfully!');\n    } catch (error) {\n      console.error('Error deleting route:', error);\n      setError('Failed to delete route. Please try again.');\n    }\n  };\n  const handleEventClick = info => {\n    const {\n      event\n    } = info;\n    alert(`Event: ${event.title}\\nStart: ${event.start}\\nEnd: ${event.end}`);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center mt-8\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center mt-8 text-red-600\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 288,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"build-routes min-h-screen bg-background text-text\",\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"px-4 py-6 sm:px-0\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-3xl font-bold mb-6\",\n          children: \"Route Management\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4\",\n          role: \"alert\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: successMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hidden sm:block\",\n            children: /*#__PURE__*/_jsxDEV(\"nav\", {\n              className: \"flex space-x-4\",\n              \"aria-label\": \"Tabs\",\n              children: ['routes', 'calendar', 'map'].map(tab => /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setActiveTab(tab),\n                className: `${activeTab === tab ? 'bg-primary text-white' : 'text-text hover:text-white hover:bg-primary'} px-3 py-2 font-medium text-sm rounded-md`,\n                children: tab.charAt(0).toUpperCase() + tab.slice(1)\n              }, tab, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-surface p-6 rounded-lg shadow-lg\",\n          children: [activeTab === 'routes' && /*#__PURE__*/_jsxDEV(DragDropContext, {\n            onDragEnd: onDragEnd,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between items-center mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"text-2xl font-semibold\",\n                children: \"Routes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleAddRoute,\n                className: \"bg-primary text-white px-4 py-2 rounded hover:bg-opacity-90\",\n                children: \"Add New Route\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\",\n              children: routes.map(route => /*#__PURE__*/_jsxDEV(Droppable, {\n                droppableId: `route-${route._id}`,\n                children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                  ref: provided.innerRef,\n                  ...provided.droppableProps,\n                  className: \"bg-gray-100 p-4 rounded-lg text-black\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"flex justify-between items-center mb-2\",\n                    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                      className: \"font-semibold\",\n                      children: route.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 344,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                        onClick: () => {\n                          const newName = prompt('Enter new route name:', route.name);\n                          if (newName) handleEditRouteName(route._id, newName);\n                        },\n                        className: \"text-primary hover:text-primary-dark mr-2\",\n                        children: \"Edit Name\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 346,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                        onClick: () => handleMapView(route._id),\n                        className: \"text-blue-600 hover:text-blue-800 mr-2\",\n                        children: \"View Map\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 355,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                        onClick: () => handleDeleteRoute(route._id),\n                        className: \"text-red-600 hover:text-red-800\",\n                        children: \"Delete\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 361,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 345,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 343,\n                    columnNumber: 27\n                  }, this), route.customers && route.customers.map((customer, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n                    draggableId: customer._id,\n                    index: index,\n                    children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                      ref: provided.innerRef,\n                      ...provided.draggableProps,\n                      ...provided.dragHandleProps,\n                      className: \"bg-white p-2 mb-2 rounded shadow\",\n                      children: customer.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 372,\n                      columnNumber: 33\n                    }, this)\n                  }, customer._id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 370,\n                    columnNumber: 29\n                  }, this)), provided.placeholder]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 338,\n                  columnNumber: 25\n                }, this)\n              }, route._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n              droppableId: \"jobPool\",\n              children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                ref: provided.innerRef,\n                ...provided.droppableProps,\n                className: \"mt-6 bg-gray-200 p-4 rounded-lg text-black\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  className: \"font-semibold mb-2\",\n                  children: \"Unassigned Jobs\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 396,\n                  columnNumber: 23\n                }, this), jobs.map((job, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n                  draggableId: job._id,\n                  index: index,\n                  children: provided => {\n                    var _job$customer;\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      ref: provided.innerRef,\n                      ...provided.draggableProps,\n                      ...provided.dragHandleProps,\n                      className: \"bg-white p-2 mb-2 rounded shadow fc-event cursor-move\",\n                      \"data-event\": JSON.stringify({\n                        id: job._id,\n                        title: job.title,\n                        duration: '01:00',\n                        extendedProps: {\n                          type: 'job',\n                          jobId: job._id\n                        }\n                      }),\n                      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                        className: \"font-semibold\",\n                        children: job.title\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 412,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: job.description\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 413,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: [\"Status: \", job.status]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 414,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: [\"Customer: \", (_job$customer = job.customer) === null || _job$customer === void 0 ? void 0 : _job$customer.name]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 415,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: [\"Scheduled: \", job.scheduledDate ? new Date(job.scheduledDate).toLocaleString() : 'Not scheduled']\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 416,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 400,\n                      columnNumber: 29\n                    }, this);\n                  }\n                }, job._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 398,\n                  columnNumber: 25\n                }, this)), provided.placeholder]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 15\n          }, this), activeTab === 'calendar' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-2xl font-semibold mb-4\",\n              children: \"Schedule\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"external-events\",\n              className: \"mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"font-semibold mb-2\",\n                children: \"Draggable Jobs\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 19\n              }, this), jobs.map(job => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"fc-event bg-white p-2 mb-2 rounded shadow cursor-move\",\n                \"data-event\": JSON.stringify({\n                  id: job._id,\n                  title: job.title,\n                  start: job.scheduledDate || new Date().toISOString(),\n                  end: job.scheduledEndDate || new Date(new Date().getTime() + 60 * 60 * 1000).toISOString(),\n                  allDay: false,\n                  duration: '01:00',\n                  extendedProps: {\n                    type: 'job',\n                    jobId: job._id\n                  }\n                }),\n                children: job.title\n              }, job._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 21\n              }, this)), /*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"font-semibold mb-2\",\n                children: \"Draggable Routes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 450,\n                columnNumber: 19\n              }, this), routes.map(route => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"fc-event bg-white p-2 mb-2 rounded shadow cursor-move\",\n                \"data-event\": JSON.stringify({\n                  id: route._id,\n                  title: route.name,\n                  start: route.scheduledDate || new Date().toISOString(),\n                  end: route.scheduledEndDate || new Date(new Date().getTime() + 60 * 60 * 1000).toISOString(),\n                  allDay: false,\n                  duration: '01:00',\n                  extendedProps: {\n                    type: 'route',\n                    routeId: route._id\n                  }\n                }),\n                children: route.name\n              }, route._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(MemoizedFullCalendar, {\n              plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n              initialView: \"dayGridMonth\",\n              headerToolbar: {\n                left: 'prev,next today',\n                center: 'title',\n                right: 'dayGridMonth,timeGridWeek,timeGridDay'\n              },\n              editable: true,\n              droppable: true,\n              events: events,\n              eventDrop: handleEventDrop,\n              eventReceive: handleEventReceive,\n              eventClick: handleEventClick,\n              eventAdd: info => {\n                if (!info.event.extendedProps.type) {\n                  info.revert();\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 15\n          }, this), activeTab === 'map' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"text-2xl font-semibold mb-4\",\n              children: \"Route Maps\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 17\n            }, this), routes.map(route => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-8\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"text-xl font-semibold mb-2\",\n                children: route.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 497,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(CustomerMap, {\n                customers: route.customers,\n                route: route\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 498,\n                columnNumber: 21\n              }, this)]\n            }, route._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 5\n  }, this);\n};\n_s(BuildRoutes, \"xSAw5NmYkLDLD0axz81Irtabz3A=\", false, function () {\n  return [useNavigate];\n});\n_c2 = BuildRoutes;\nexport default BuildRoutes;\nvar _c, _c2;\n$RefreshReg$(_c, \"MemoizedFullCalendar\");\n$RefreshReg$(_c2, \"BuildRoutes\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","memo","DragDropContext","Droppable","Draggable","useNavigate","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","FcDraggable","CustomerMap","fetchJobs","fetchRoutes","saveRoute","deleteRoute","updateJob","updateRoute","jsxDEV","_jsxDEV","MemoizedFullCalendar","_c","BuildRoutes","_s","jobs","setJobs","routes","setRoutes","events","setEvents","activeTab","setActiveTab","loading","setLoading","error","setError","successMessage","setSuccessMessage","navigate","fetchData","jobsData","routesData","Promise","all","generateEvents","err","console","jobEvents","map","job","id","_id","title","start","Date","scheduledDate","end","scheduledEndDate","color","extendedProps","type","jobId","filter","event","routeEvents","flatMap","route","customers","customer","name","routeId","customerId","initializeExternalEvents","draggableElems","document","querySelectorAll","forEach","elem","eventData","eventEl","data","JSON","parse","getAttribute","create","setTimeout","handleEventDrop","info","oldEvent","log","revert","prevJobs","split","prevRoutes","prevEvents","e","handleEventReceive","startDate","endDate","getTime","updatedEvent","onDragEnd","result","source","destination","droppableId","startsWith","draggableId","moveJobToRoute","moveJobToPool","sourceRouteId","destRouteId","moveJobBetweenRoutes","find","j","updatedRoute","$push","r","$pull","updatedJob","updatedDestRoute","c","handleEditRouteName","newName","handleMapView","handleAddRoute","newRoute","length","handleDeleteRoute","handleEventClick","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","role","tab","onClick","charAt","toUpperCase","slice","provided","ref","innerRef","droppableProps","prompt","index","draggableProps","dragHandleProps","placeholder","_job$customer","stringify","duration","description","status","toLocaleString","toISOString","allDay","plugins","initialView","headerToolbar","left","center","right","editable","droppable","eventDrop","eventReceive","eventClick","eventAdd","_c2","$RefreshReg$"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/pages/BuildRoutes/BuildRoutes.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, memo } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin, { Draggable as FcDraggable } from '@fullcalendar/interaction';\r\nimport CustomerMap from '../../components/CustomerMap';\r\nimport { fetchJobs, fetchRoutes, saveRoute, deleteRoute, updateJob, updateRoute } from './api';\r\n\r\nconst MemoizedFullCalendar = memo(FullCalendar);\r\n\r\nconst BuildRoutes = () => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [routes, setRoutes] = useState([]);\r\n  const [events, setEvents] = useState([]);\r\n  const [activeTab, setActiveTab] = useState('routes');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const fetchData = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const [jobsData, routesData] = await Promise.all([fetchJobs(), fetchRoutes()]);\r\n      setJobs(jobsData || []);\r\n      setRoutes(routesData || []);\r\n      generateEvents(jobsData, routesData);\r\n    } catch (err) {\r\n      console.error('Error fetching data:', err);\r\n      setError('Failed to load data. Please try refreshing the page.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  const generateEvents = (jobsData, routesData) => {\r\n    const jobEvents = jobsData.map(job => ({\r\n      id: job._id,\r\n      title: job.title,\r\n      start: new Date(job.scheduledDate),\r\n      end: new Date(job.scheduledEndDate),\r\n      color: '#4CAF50',\r\n      extendedProps: { type: 'job', jobId: job._id }\r\n    })).filter(event => event.start && event.end);\r\n  \r\n    const routeEvents = routesData.flatMap(route => \r\n      route.customers.map(customer => ({\r\n        id: `${route._id}-${customer._id}`,\r\n        title: `${route.name}: ${customer.name}`,\r\n        start: new Date(customer.scheduledDate),\r\n        end: new Date(customer.scheduledEndDate),\r\n        color: '#2196F3',\r\n        extendedProps: { type: 'route', routeId: route._id, customerId: customer._id }\r\n      }))\r\n    ).filter(event => event.start && event.end);\r\n  \r\n    setEvents([...jobEvents, ...routeEvents]);\r\n  };\r\n\r\n  const initializeExternalEvents = useCallback(() => {\r\n    const draggableElems = document.querySelectorAll('.fc-event');\r\n    draggableElems.forEach(elem => {\r\n      new FcDraggable(elem, {\r\n        eventData: function(eventEl) {\r\n          const data = JSON.parse(eventEl.getAttribute('data-event'));\r\n          return {\r\n            ...data,\r\n            create: true // This ensures the event is created when dropped\r\n          };\r\n        }\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (activeTab === 'calendar') {\r\n      setTimeout(initializeExternalEvents, 0);\r\n    }\r\n  }, [activeTab, jobs, routes, initializeExternalEvents]);\r\n\r\n  const handleEventDrop = async (info) => {\r\n    const { event, oldEvent } = info;\r\n    console.log('Event dropped:', event);\r\n    console.log('Event extendedProps:', event.extendedProps);\r\n    \r\n    if (!event.start || !event.end) {\r\n      console.error('Event is missing start or end time');\r\n      info.revert();\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      if (event.extendedProps.type === 'job') {\r\n        await updateJob(event.id, { scheduledDate: event.start, scheduledEndDate: event.end });\r\n        setJobs(prevJobs => prevJobs.map(job => \r\n          job._id === event.id ? { ...job, scheduledDate: event.start, scheduledEndDate: event.end } : job\r\n        ));\r\n      } else if (event.extendedProps.type === 'route') {\r\n        const [routeId, customerId] = event.id.split('-');\r\n        await updateRoute(routeId, {\r\n          customers: [{ customer: customerId, scheduledDate: event.start, scheduledEndDate: event.end }]\r\n        });\r\n        setRoutes(prevRoutes => prevRoutes.map(route => \r\n          route._id === routeId ? {\r\n            ...route,\r\n            customers: route.customers.map(customer => \r\n              customer._id === customerId \r\n                ? { ...customer, scheduledDate: event.start, scheduledEndDate: event.end }\r\n                : customer\r\n            )\r\n          } : route\r\n        ));\r\n      } else {\r\n        console.error('Unknown event type:', event.extendedProps.type);\r\n        info.revert();\r\n        return;\r\n      }\r\n      \r\n      setEvents(prevEvents => \r\n        prevEvents.map(e => e.id === event.id ? { ...e, start: event.start, end: event.end } : e)\r\n      );\r\n      setSuccessMessage('Event updated successfully!');\r\n    } catch (error) {\r\n      console.error('Error updating event:', error);\r\n      setError('Failed to update event. Please try again.');\r\n      info.revert();\r\n    }\r\n  };\r\n\r\n  const handleEventReceive = async (info) => {\r\n    const { event } = info;\r\n    console.log('Event received:', event);\r\n    const startDate = event.start || new Date();\r\n    const endDate = event.end || new Date(startDate.getTime() + 60 * 60 * 1000);\r\n  \r\n    try {\r\n      let updatedEvent;\r\n      if (event.extendedProps.type === 'job') {\r\n        updatedEvent = await updateJob(event.id, { scheduledDate: startDate, scheduledEndDate: endDate });\r\n        setJobs(prevJobs => prevJobs.map(job => \r\n          job._id === event.id ? { ...job, scheduledDate: startDate, scheduledEndDate: endDate } : job\r\n        ));\r\n      } else if (event.extendedProps.type === 'route') {\r\n        updatedEvent = await updateRoute(event.id, {\r\n          scheduledDate: startDate,\r\n          scheduledEndDate: endDate\r\n        });\r\n        setRoutes(prevRoutes => prevRoutes.map(route => \r\n          route._id === event.id ? { ...route, scheduledDate: startDate, scheduledEndDate: endDate } : route\r\n        ));\r\n      }\r\n  \r\n      if (updatedEvent) {\r\n        setEvents(prevEvents => [\r\n          ...prevEvents,\r\n          {\r\n            id: event.id,\r\n            title: event.title,\r\n            start: startDate,\r\n            end: endDate,\r\n            color: event.extendedProps.type === 'job' ? '#4CAF50' : '#2196F3',\r\n            extendedProps: event.extendedProps\r\n          }\r\n        ]);\r\n        setSuccessMessage('Event scheduled successfully!');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error scheduling event:', error);\r\n      setError('Failed to schedule event. Please try again.');\r\n      info.revert();\r\n    }\r\n  };\r\n\r\n  const onDragEnd = async (result) => {\r\n    const { source, destination } = result;\r\n    if (!destination) return;\r\n\r\n    if (source.droppableId === 'jobPool' && destination.droppableId.startsWith('route-')) {\r\n      const jobId = result.draggableId;\r\n      const routeId = destination.droppableId.split('-')[1];\r\n      await moveJobToRoute(jobId, routeId);\r\n    } else if (source.droppableId.startsWith('route-') && destination.droppableId === 'jobPool') {\r\n      const jobId = result.draggableId;\r\n      const routeId = source.droppableId.split('-')[1];\r\n      await moveJobToPool(jobId, routeId);\r\n    } else if (source.droppableId.startsWith('route-') && destination.droppableId.startsWith('route-')) {\r\n      const jobId = result.draggableId;\r\n      const sourceRouteId = source.droppableId.split('-')[1];\r\n      const destRouteId = destination.droppableId.split('-')[1];\r\n      await moveJobBetweenRoutes(jobId, sourceRouteId, destRouteId);\r\n    }\r\n  };\r\n\r\n  const moveJobToRoute = async (jobId, routeId) => {\r\n    try {\r\n      const job = jobs.find(j => j._id === jobId);\r\n      const updatedRoute = await updateRoute(routeId, { $push: { customers: job._id } });\r\n      await updateJob(jobId, { route: routeId });\r\n      setJobs(prevJobs => prevJobs.filter(j => j._id !== jobId));\r\n      setRoutes(prevRoutes => prevRoutes.map(r => r._id === routeId ? updatedRoute : r));\r\n      setSuccessMessage('Job added to route successfully!');\r\n    } catch (error) {\r\n      console.error('Error moving job to route:', error);\r\n      setError('Failed to move job to route. Please try again.');\r\n    }\r\n  };\r\n\r\n  const moveJobToPool = async (jobId, routeId) => {\r\n    try {\r\n      const updatedRoute = await updateRoute(routeId, { $pull: { customers: jobId } });\r\n      const updatedJob = await updateJob(jobId, { route: null });\r\n      setRoutes(prevRoutes => prevRoutes.map(r => r._id === routeId ? updatedRoute : r));\r\n      setJobs(prevJobs => [...prevJobs, updatedJob]);\r\n      setSuccessMessage('Job removed from route successfully!');\r\n    } catch (error) {\r\n      console.error('Error moving job to pool:', error);\r\n      setError('Failed to remove job from route. Please try again.');\r\n    }\r\n  };\r\n\r\n  const moveJobBetweenRoutes = async (jobId, sourceRouteId, destRouteId) => {\r\n    try {\r\n      await updateRoute(sourceRouteId, { $pull: { customers: jobId } });\r\n      const updatedDestRoute = await updateRoute(destRouteId, { $push: { customers: jobId } });\r\n      await updateJob(jobId, { route: destRouteId });\r\n      setRoutes(prevRoutes => prevRoutes.map(route => {\r\n        if (route._id === sourceRouteId) return { ...route, customers: route.customers.filter(c => c._id !== jobId) };\r\n        if (route._id === destRouteId) return updatedDestRoute;\r\n        return route;\r\n      }));\r\n      setSuccessMessage('Job moved between routes successfully!');\r\n    } catch (error) {\r\n      console.error('Error moving job between routes:', error);\r\n      setError('Failed to move job between routes. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleEditRouteName = async (routeId, newName) => {\r\n    try {\r\n      const updatedRoute = await updateRoute(routeId, { name: newName });\r\n      setRoutes(prevRoutes => prevRoutes.map(r => r._id === routeId ? updatedRoute : r));\r\n      setSuccessMessage('Route name updated successfully!');\r\n    } catch (error) {\r\n      console.error('Error updating route name:', error);\r\n      setError('Failed to update route name. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleMapView = (routeId) => {\r\n    navigate(`/route-map/${routeId}`);\r\n  };\r\n\r\n  const handleAddRoute = async () => {\r\n    try {\r\n      const newRoute = await saveRoute({ name: `New Route ${routes.length + 1}`, customers: [] });\r\n      setRoutes(prevRoutes => [...prevRoutes, newRoute]);\r\n      setSuccessMessage('New route added successfully!');\r\n    } catch (error) {\r\n      console.error('Error adding new route:', error);\r\n      setError('Failed to add new route. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleDeleteRoute = async (routeId) => {\r\n    try {\r\n      await deleteRoute(routeId);\r\n      setRoutes(prevRoutes => prevRoutes.filter(route => route._id !== routeId));\r\n      setSuccessMessage('Route deleted successfully!');\r\n    } catch (error) {\r\n      console.error('Error deleting route:', error);\r\n      setError('Failed to delete route. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleEventClick = (info) => {\r\n    const { event } = info;\r\n    alert(`Event: ${event.title}\\nStart: ${event.start}\\nEnd: ${event.end}`);\r\n  };\r\n\r\n  if (loading) return <div className=\"text-center mt-8\">Loading...</div>;\r\n  if (error) return <div className=\"text-center mt-8 text-red-600\">{error}</div>;\r\n\r\n  return (\r\n    <div className=\"build-routes min-h-screen bg-background text-text\">\r\n      <main className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">\r\n        <div className=\"px-4 py-6 sm:px-0\">\r\n          <h1 className=\"text-3xl font-bold mb-6\">Route Management</h1>\r\n          \r\n          {successMessage && (\r\n            <div className=\"bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4\" role=\"alert\">\r\n              <p>{successMessage}</p>\r\n            </div>\r\n          )}\r\n  \r\n          <div className=\"mb-6\">\r\n            <div className=\"hidden sm:block\">\r\n              <nav className=\"flex space-x-4\" aria-label=\"Tabs\">\r\n                {['routes', 'calendar', 'map'].map((tab) => (\r\n                  <button\r\n                    key={tab}\r\n                    onClick={() => setActiveTab(tab)}\r\n                    className={`${\r\n                      activeTab === tab\r\n                        ? 'bg-primary text-white'\r\n                        : 'text-text hover:text-white hover:bg-primary'\r\n                    } px-3 py-2 font-medium text-sm rounded-md`}\r\n                  >\r\n                    {tab.charAt(0).toUpperCase() + tab.slice(1)}\r\n                  </button>\r\n                ))}\r\n              </nav>\r\n            </div>\r\n          </div>\r\n  \r\n          <div className=\"bg-surface p-6 rounded-lg shadow-lg\">\r\n            {activeTab === 'routes' && (\r\n              <DragDropContext onDragEnd={onDragEnd}>\r\n                <div className=\"flex justify-between items-center mb-4\">\r\n                  <h2 className=\"text-2xl font-semibold\">Routes</h2>\r\n                  <button\r\n                    onClick={handleAddRoute}\r\n                    className=\"bg-primary text-white px-4 py-2 rounded hover:bg-opacity-90\"\r\n                  >\r\n                    Add New Route\r\n                  </button>\r\n                </div>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                  {routes.map(route => (\r\n                    <Droppable key={route._id} droppableId={`route-${route._id}`}>\r\n                      {(provided) => (\r\n                        <div\r\n                          ref={provided.innerRef}\r\n                          {...provided.droppableProps}\r\n                          className=\"bg-gray-100 p-4 rounded-lg text-black\"\r\n                        >\r\n                          <div className=\"flex justify-between items-center mb-2\">\r\n                            <h3 className=\"font-semibold\">{route.name}</h3>\r\n                            <div>\r\n                              <button\r\n                                onClick={() => {\r\n                                  const newName = prompt('Enter new route name:', route.name);\r\n                                  if (newName) handleEditRouteName(route._id, newName);\r\n                                }}\r\n                                className=\"text-primary hover:text-primary-dark mr-2\"\r\n                              >\r\n                                Edit Name\r\n                              </button>\r\n                              <button\r\n                                onClick={() => handleMapView(route._id)}\r\n                                className=\"text-blue-600 hover:text-blue-800 mr-2\"\r\n                              >\r\n                                View Map\r\n                              </button>\r\n                              <button\r\n                                onClick={() => handleDeleteRoute(route._id)}\r\n                                className=\"text-red-600 hover:text-red-800\"\r\n                              >\r\n                                Delete\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                          {route.customers && route.customers.map((customer, index) => (\r\n                            <Draggable key={customer._id} draggableId={customer._id} index={index}>\r\n                              {(provided) => (\r\n                                <div\r\n                                  ref={provided.innerRef}\r\n                                  {...provided.draggableProps}\r\n                                  {...provided.dragHandleProps}\r\n                                  className=\"bg-white p-2 mb-2 rounded shadow\"\r\n                                >\r\n                                  {customer.name}\r\n                                </div>\r\n                              )}\r\n                            </Draggable>\r\n                          ))}\r\n                          {provided.placeholder}\r\n                        </div>\r\n                      )}\r\n                    </Droppable>\r\n                  ))}\r\n                </div>\r\n                <Droppable droppableId=\"jobPool\">\r\n                  {(provided) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.droppableProps}\r\n                      className=\"mt-6 bg-gray-200 p-4 rounded-lg text-black\"\r\n                    >\r\n                      <h3 className=\"font-semibold mb-2\">Unassigned Jobs</h3>\r\n                      {jobs.map((job, index) => (\r\n                        <Draggable key={job._id} draggableId={job._id} index={index}>\r\n                          {(provided) => (\r\n                            <div\r\n                              ref={provided.innerRef}\r\n                              {...provided.draggableProps}\r\n                              {...provided.dragHandleProps}\r\n                              className=\"bg-white p-2 mb-2 rounded shadow fc-event cursor-move\"\r\n                              data-event={JSON.stringify({\r\n                                id: job._id,\r\n                                title: job.title,\r\n                                duration: '01:00',\r\n                                extendedProps: { type: 'job', jobId: job._id }\r\n                              })}\r\n                            >\r\n                              <h4 className=\"font-semibold\">{job.title}</h4>\r\n                              <p>{job.description}</p>\r\n                              <p>Status: {job.status}</p>\r\n                              <p>Customer: {job.customer?.name}</p>\r\n                              <p>Scheduled: {job.scheduledDate ? new Date(job.scheduledDate).toLocaleString() : 'Not scheduled'}</p>\r\n                            </div>\r\n                          )}\r\n                        </Draggable>\r\n                      ))}\r\n                      {provided.placeholder}\r\n                    </div>\r\n                  )}\r\n                </Droppable>\r\n              </DragDropContext>\r\n            )}\r\n  \r\n            {activeTab === 'calendar' && (\r\n              <div className=\"calendar-container\">\r\n                <h2 className=\"text-2xl font-semibold mb-4\">Schedule</h2>\r\n                <div id=\"external-events\" className=\"mb-4\">\r\n                  <h4 className=\"font-semibold mb-2\">Draggable Jobs</h4>\r\n                  {jobs.map(job => (\r\n                    <div\r\n                    key={job._id}\r\n                    className=\"fc-event bg-white p-2 mb-2 rounded shadow cursor-move\"\r\n                    data-event={JSON.stringify({\r\n                      id: job._id,\r\n                      title: job.title,\r\n                      start: job.scheduledDate || new Date().toISOString(),\r\n                      end: job.scheduledEndDate || new Date(new Date().getTime() + 60*60*1000).toISOString(),\r\n                      allDay: false,\r\n                      duration: '01:00',\r\n                      extendedProps: { type: 'job', jobId: job._id }\r\n                    })}\r\n                  >\r\n                    {job.title}\r\n                  </div>\r\n                  ))}\r\n                  <h4 className=\"font-semibold mb-2\">Draggable Routes</h4>\r\n                  {routes.map(route => (\r\n                    <div\r\n                    key={route._id}\r\n                    className=\"fc-event bg-white p-2 mb-2 rounded shadow cursor-move\"\r\n                    data-event={JSON.stringify({\r\n                      id: route._id,\r\n                      title: route.name,\r\n                      start: route.scheduledDate || new Date().toISOString(),\r\n                      end: route.scheduledEndDate || new Date(new Date().getTime() + 60*60*1000).toISOString(),\r\n                      allDay: false,\r\n                      duration: '01:00',\r\n                      extendedProps: { type: 'route', routeId: route._id }\r\n                    })}\r\n                  >\r\n                    {route.name}\r\n                  </div>\r\n                  ))}\r\n                </div>\r\n                <MemoizedFullCalendar\r\n                  plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n                  initialView=\"dayGridMonth\"\r\n                  headerToolbar={{\r\n                    left: 'prev,next today',\r\n                    center: 'title',\r\n                    right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n                  }}\r\n                  editable={true}\r\n                  droppable={true}\r\n                  events={events}\r\n                  eventDrop={handleEventDrop}\r\n                  eventReceive={handleEventReceive}\r\n                  eventClick={handleEventClick}\r\n                  eventAdd={(info) => {\r\n                    if (!info.event.extendedProps.type) {\r\n                      info.revert();\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n  \r\n            {activeTab === 'map' && (\r\n              <div className=\"map-container\">\r\n                <h2 className=\"text-2xl font-semibold mb-4\">Route Maps</h2>\r\n                {routes.map(route => (\r\n                  <div key={route._id} className=\"mb-8\">\r\n                    <h3 className=\"text-xl font-semibold mb-2\">{route.name}</h3>\r\n                    <CustomerMap \r\n                      customers={route.customers}\r\n                      route={route}\r\n                    />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BuildRoutes;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}