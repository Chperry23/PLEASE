{"ast":null,"code":"var _jsxFileName = \"C:\\\\AUTOLAWN\\\\autolawn-frontend\\\\src\\\\pages\\\\BuildRoutes\\\\CalendarView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { fetchCalendarEvents, updateCalendarEvent, updateJob, saveRoute } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalendarView = ({\n  routes,\n  setRoutes,\n  saveRoute\n}) => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    loadEvents();\n  }, [routes]);\n  const loadEvents = async () => {\n    try {\n      const calendarEvents = await fetchCalendarEvents();\n      const routeEvents = routes.flatMap(route => route.customers.map(customer => ({\n        title: `${route.name}: ${customer.name}`,\n        start: customer.scheduledDate,\n        end: customer.scheduledEndDate,\n        color: '#4CAF50',\n        extendedProps: {\n          type: 'route',\n          routeId: route._id,\n          customerId: customer._id\n        }\n      })));\n      setEvents([...calendarEvents, ...routeEvents]);\n    } catch (error) {\n      console.error('Error loading events:', error);\n      setError('Failed to load calendar events. Please try refreshing the page.');\n    }\n  };\n  const handleEventDrop = async info => {\n    const {\n      event\n    } = info;\n    try {\n      const updatedEvent = await updateCalendarEvent({\n        id: event.id,\n        start: event.start,\n        end: event.end\n      });\n      setEvents(prevEvents => prevEvents.map(e => e.id === updatedEvent.id ? updatedEvent : e));\n      const {\n        routeId,\n        customerId\n      } = event.extendedProps;\n      const updatedRoutes = routes.map(route => {\n        if (route._id === routeId) {\n          return {\n            ...route,\n            customers: route.customers.map(customer => customer._id === customerId ? {\n              ...customer,\n              scheduledDate: event.start,\n              scheduledEndDate: event.end\n            } : customer)\n          };\n        }\n        return route;\n      });\n      setRoutes(updatedRoutes);\n      await saveRoute(updatedRoutes.find(r => r._id === routeId));\n    } catch (error) {\n      console.error('Error updating event:', error);\n      setError('Failed to update event. Please try again.');\n      info.revert();\n    }\n  };\n  const handleEventClick = info => {\n    const {\n      event\n    } = info;\n    alert(`Event: ${event.title}\\nStart: ${event.start}\\nEnd: ${event.end}`);\n  };\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-red-500\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-container\",\n    children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      initialView: \"dayGridMonth\",\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      },\n      editable: true,\n      droppable: true,\n      events: events,\n      eventDrop: handleEventDrop,\n      eventClick: handleEventClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(CalendarView, \"wGY3tPhDnrfqd5L05Z5va7N4Lyw=\");\n_c = CalendarView;\nexport default CalendarView;\nvar _c;\n$RefreshReg$(_c, \"CalendarView\");","map":{"version":3,"names":["React","useState","useEffect","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","fetchCalendarEvents","updateCalendarEvent","updateJob","saveRoute","jsxDEV","_jsxDEV","CalendarView","routes","setRoutes","_s","events","setEvents","error","setError","loadEvents","calendarEvents","routeEvents","flatMap","route","customers","map","customer","title","name","start","scheduledDate","end","scheduledEndDate","color","extendedProps","type","routeId","_id","customerId","console","handleEventDrop","info","event","updatedEvent","id","prevEvents","e","updatedRoutes","find","r","revert","handleEventClick","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","plugins","initialView","headerToolbar","left","center","right","editable","droppable","eventDrop","eventClick","_c","$RefreshReg$"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/pages/BuildRoutes/CalendarView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport { fetchCalendarEvents, updateCalendarEvent, updateJob, saveRoute } from './api';\r\n\r\nconst CalendarView = ({ routes, setRoutes, saveRoute }) => {\r\n  const [events, setEvents] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    loadEvents();\r\n  }, [routes]);\r\n\r\n  const loadEvents = async () => {\r\n    try {\r\n      const calendarEvents = await fetchCalendarEvents();\r\n      const routeEvents = routes.flatMap(route => \r\n        route.customers.map(customer => ({\r\n          title: `${route.name}: ${customer.name}`,\r\n          start: customer.scheduledDate,\r\n          end: customer.scheduledEndDate,\r\n          color: '#4CAF50',\r\n          extendedProps: { type: 'route', routeId: route._id, customerId: customer._id }\r\n        }))\r\n      );\r\n      setEvents([...calendarEvents, ...routeEvents]);\r\n    } catch (error) {\r\n      console.error('Error loading events:', error);\r\n      setError('Failed to load calendar events. Please try refreshing the page.');\r\n    }\r\n  };\r\n\r\n  const handleEventDrop = async (info) => {\r\n    const { event } = info;\r\n    try {\r\n      const updatedEvent = await updateCalendarEvent({\r\n        id: event.id,\r\n        start: event.start,\r\n        end: event.end,\r\n      });\r\n      setEvents(prevEvents => \r\n        prevEvents.map(e => e.id === updatedEvent.id ? updatedEvent : e)\r\n      );\r\n      \r\n      const { routeId, customerId } = event.extendedProps;\r\n      const updatedRoutes = routes.map(route => {\r\n        if (route._id === routeId) {\r\n          return {\r\n            ...route,\r\n            customers: route.customers.map(customer => \r\n              customer._id === customerId \r\n                ? { ...customer, scheduledDate: event.start, scheduledEndDate: event.end }\r\n                : customer\r\n            )\r\n          };\r\n        }\r\n        return route;\r\n      });\r\n      setRoutes(updatedRoutes);\r\n      await saveRoute(updatedRoutes.find(r => r._id === routeId));\r\n    } catch (error) {\r\n      console.error('Error updating event:', error);\r\n      setError('Failed to update event. Please try again.');\r\n      info.revert();\r\n    }\r\n  };\r\n\r\n  const handleEventClick = (info) => {\r\n    const { event } = info;\r\n    alert(`Event: ${event.title}\\nStart: ${event.start}\\nEnd: ${event.end}`);\r\n  };\r\n\r\n  if (error) return <div className=\"text-red-500\">{error}</div>;\r\n\r\n  return (\r\n    <div className=\"calendar-container\">\r\n      <FullCalendar\r\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n        initialView=\"dayGridMonth\"\r\n        headerToolbar={{\r\n          left: 'prev,next today',\r\n          center: 'title',\r\n          right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n        }}\r\n        editable={true}\r\n        droppable={true}\r\n        events={events}\r\n        eventDrop={handleEventDrop}\r\n        eventClick={handleEventClick}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalendarView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}