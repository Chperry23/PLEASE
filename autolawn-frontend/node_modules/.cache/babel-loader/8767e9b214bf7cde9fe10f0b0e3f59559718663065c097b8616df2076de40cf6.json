{"ast":null,"code":"import axios from 'axios';\nexport const geocodeCustomers = async customers => {\n  return Promise.all(customers.map(geocodeCustomer));\n};\nconst geocodeCustomer = async customer => {\n  if (!customer || !customer.address) {\n    console.warn('Skipping customer due to missing address:', customer);\n    return customer; // Return the customer as is if there's no address\n  }\n  if (!customer.address.lat && !customer.address.lng) {\n    const geocoded = await geocodeAddress(customer.address);\n    return {\n      ...customer,\n      address: {\n        ...customer.address,\n        ...geocoded\n      }\n    };\n  }\n  return customer;\n};\nconst geocodeAddress = async address => {\n  if (!address.street || !address.city || !address.state || !address.zipCode) {\n    console.warn('Incomplete address for geocoding:', address);\n    return null;\n  }\n  const fullAddress = `${address.street}, ${address.city}, ${address.state} ${address.zipCode}`;\n  try {\n    const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json`, {\n      params: {\n        address: fullAddress,\n        key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n      }\n    });\n    if (response.data.results.length > 0) {\n      const {\n        lat,\n        lng\n      } = response.data.results[0].geometry.location;\n      console.log(`Geocoded ${fullAddress} to:`, {\n        lat,\n        lng\n      });\n      return {\n        lat,\n        lng\n      };\n    }\n    console.warn(`No results found for address: ${fullAddress}`);\n    return null;\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["axios","geocodeCustomers","customers","Promise","all","map","geocodeCustomer","customer","address","console","warn","lat","lng","geocoded","geocodeAddress","street","city","state","zipCode","fullAddress","response","get","params","key","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","data","results","length","geometry","location","log","error"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/pages/BuildRoutes/utils.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const geocodeCustomers = async (customers) => {\r\n  return Promise.all(customers.map(geocodeCustomer));\r\n};\r\n\r\nconst geocodeCustomer = async (customer) => {\r\n  if (!customer || !customer.address) {\r\n    console.warn('Skipping customer due to missing address:', customer);\r\n    return customer; // Return the customer as is if there's no address\r\n  }\r\n\r\n  if (!customer.address.lat && !customer.address.lng) {\r\n    const geocoded = await geocodeAddress(customer.address);\r\n    return { ...customer, address: { ...customer.address, ...geocoded } };\r\n  }\r\n  return customer;\r\n};\r\n\r\nconst geocodeAddress = async (address) => {\r\n  if (!address.street || !address.city || !address.state || !address.zipCode) {\r\n    console.warn('Incomplete address for geocoding:', address);\r\n    return null;\r\n  }\r\n  const fullAddress = `${address.street}, ${address.city}, ${address.state} ${address.zipCode}`;\r\n  try {\r\n    const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json`, {\r\n      params: {\r\n        address: fullAddress,\r\n        key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\r\n      }\r\n    });\r\n    if (response.data.results.length > 0) {\r\n      const { lat, lng } = response.data.results[0].geometry.location;\r\n      console.log(`Geocoded ${fullAddress} to:`, { lat, lng });\r\n      return { lat, lng };\r\n    }\r\n    console.warn(`No results found for address: ${fullAddress}`);\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Geocoding error:', error);\r\n    return null;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,SAAS,IAAK;EACnD,OAAOC,OAAO,CAACC,GAAG,CAACF,SAAS,CAACG,GAAG,CAACC,eAAe,CAAC,CAAC;AACpD,CAAC;AAED,MAAMA,eAAe,GAAG,MAAOC,QAAQ,IAAK;EAC1C,IAAI,CAACA,QAAQ,IAAI,CAACA,QAAQ,CAACC,OAAO,EAAE;IAClCC,OAAO,CAACC,IAAI,CAAC,2CAA2C,EAAEH,QAAQ,CAAC;IACnE,OAAOA,QAAQ,CAAC,CAAC;EACnB;EAEA,IAAI,CAACA,QAAQ,CAACC,OAAO,CAACG,GAAG,IAAI,CAACJ,QAAQ,CAACC,OAAO,CAACI,GAAG,EAAE;IAClD,MAAMC,QAAQ,GAAG,MAAMC,cAAc,CAACP,QAAQ,CAACC,OAAO,CAAC;IACvD,OAAO;MAAE,GAAGD,QAAQ;MAAEC,OAAO,EAAE;QAAE,GAAGD,QAAQ,CAACC,OAAO;QAAE,GAAGK;MAAS;IAAE,CAAC;EACvE;EACA,OAAON,QAAQ;AACjB,CAAC;AAED,MAAMO,cAAc,GAAG,MAAON,OAAO,IAAK;EACxC,IAAI,CAACA,OAAO,CAACO,MAAM,IAAI,CAACP,OAAO,CAACQ,IAAI,IAAI,CAACR,OAAO,CAACS,KAAK,IAAI,CAACT,OAAO,CAACU,OAAO,EAAE;IAC1ET,OAAO,CAACC,IAAI,CAAC,mCAAmC,EAAEF,OAAO,CAAC;IAC1D,OAAO,IAAI;EACb;EACA,MAAMW,WAAW,GAAG,GAAGX,OAAO,CAACO,MAAM,KAAKP,OAAO,CAACQ,IAAI,KAAKR,OAAO,CAACS,KAAK,IAAIT,OAAO,CAACU,OAAO,EAAE;EAC7F,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,GAAG,CAAC,mDAAmD,EAAE;MACpFC,MAAM,EAAE;QACNd,OAAO,EAAEW,WAAW;QACpBI,GAAG,EAAEC,OAAO,CAACC,GAAG,CAACC;MACnB;IACF,CAAC,CAAC;IACF,IAAIN,QAAQ,CAACO,IAAI,CAACC,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MACpC,MAAM;QAAElB,GAAG;QAAEC;MAAI,CAAC,GAAGQ,QAAQ,CAACO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACE,QAAQ,CAACC,QAAQ;MAC/DtB,OAAO,CAACuB,GAAG,CAAC,YAAYb,WAAW,MAAM,EAAE;QAAER,GAAG;QAAEC;MAAI,CAAC,CAAC;MACxD,OAAO;QAAED,GAAG;QAAEC;MAAI,CAAC;IACrB;IACAH,OAAO,CAACC,IAAI,CAAC,iCAAiCS,WAAW,EAAE,CAAC;IAC5D,OAAO,IAAI;EACb,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdxB,OAAO,CAACwB,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}