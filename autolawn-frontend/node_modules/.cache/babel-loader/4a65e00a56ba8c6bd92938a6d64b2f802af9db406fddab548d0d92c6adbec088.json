{"ast":null,"code":"import axios from 'axios';\nexport const geocodeCustomers = async customers => {\n  return Promise.all(customers.map(geocodeCustomer));\n};\nconst geocodeCustomer = async customer => {\n  if (customer.address && !customer.address.lat && !customer.address.lng) {\n    const geocoded = await geocodeAddress(customer.address);\n    return {\n      ...customer,\n      address: {\n        ...customer.address,\n        ...geocoded\n      }\n    };\n  }\n  return customer;\n};\nconst geocodeAddress = async address => {\n  if (!address.street || !address.city || !address.state || !address.zipCode) {\n    console.warn('Incomplete address for geocoding:', address);\n    return null;\n  }\n  const fullAddress = `${address.street}, ${address.city}, ${address.state} ${address.zipCode}`;\n  try {\n    const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json`, {\n      params: {\n        address: fullAddress,\n        key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\n      }\n    });\n    if (response.data.results.length > 0) {\n      const {\n        lat,\n        lng\n      } = response.data.results[0].geometry.location;\n      console.log(`Geocoded ${fullAddress} to:`, {\n        lat,\n        lng\n      });\n      return {\n        lat,\n        lng\n      };\n    }\n    console.warn(`No results found for address: ${fullAddress}`);\n    return null;\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["axios","geocodeCustomers","customers","Promise","all","map","geocodeCustomer","customer","address","lat","lng","geocoded","geocodeAddress","street","city","state","zipCode","console","warn","fullAddress","response","get","params","key","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","data","results","length","geometry","location","log","error"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/pages/BuildRoutes/utils.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const geocodeCustomers = async (customers) => {\r\n  return Promise.all(customers.map(geocodeCustomer));\r\n};\r\n\r\nconst geocodeCustomer = async (customer) => {\r\n  if (customer.address && !customer.address.lat && !customer.address.lng) {\r\n    const geocoded = await geocodeAddress(customer.address);\r\n    return { ...customer, address: { ...customer.address, ...geocoded } };\r\n  }\r\n  return customer;\r\n};\r\n\r\nconst geocodeAddress = async (address) => {\r\n  if (!address.street || !address.city || !address.state || !address.zipCode) {\r\n    console.warn('Incomplete address for geocoding:', address);\r\n    return null;\r\n  }\r\n  const fullAddress = `${address.street}, ${address.city}, ${address.state} ${address.zipCode}`;\r\n  try {\r\n    const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json`, {\r\n      params: {\r\n        address: fullAddress,\r\n        key: process.env.REACT_APP_GOOGLE_MAPS_API_KEY\r\n      }\r\n    });\r\n    if (response.data.results.length > 0) {\r\n      const { lat, lng } = response.data.results[0].geometry.location;\r\n      console.log(`Geocoded ${fullAddress} to:`, { lat, lng });\r\n      return { lat, lng };\r\n    }\r\n    console.warn(`No results found for address: ${fullAddress}`);\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Geocoding error:', error);\r\n    return null;\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,SAAS,IAAK;EACnD,OAAOC,OAAO,CAACC,GAAG,CAACF,SAAS,CAACG,GAAG,CAACC,eAAe,CAAC,CAAC;AACpD,CAAC;AAED,MAAMA,eAAe,GAAG,MAAOC,QAAQ,IAAK;EAC1C,IAAIA,QAAQ,CAACC,OAAO,IAAI,CAACD,QAAQ,CAACC,OAAO,CAACC,GAAG,IAAI,CAACF,QAAQ,CAACC,OAAO,CAACE,GAAG,EAAE;IACtE,MAAMC,QAAQ,GAAG,MAAMC,cAAc,CAACL,QAAQ,CAACC,OAAO,CAAC;IACvD,OAAO;MAAE,GAAGD,QAAQ;MAAEC,OAAO,EAAE;QAAE,GAAGD,QAAQ,CAACC,OAAO;QAAE,GAAGG;MAAS;IAAE,CAAC;EACvE;EACA,OAAOJ,QAAQ;AACjB,CAAC;AAED,MAAMK,cAAc,GAAG,MAAOJ,OAAO,IAAK;EACxC,IAAI,CAACA,OAAO,CAACK,MAAM,IAAI,CAACL,OAAO,CAACM,IAAI,IAAI,CAACN,OAAO,CAACO,KAAK,IAAI,CAACP,OAAO,CAACQ,OAAO,EAAE;IAC1EC,OAAO,CAACC,IAAI,CAAC,mCAAmC,EAAEV,OAAO,CAAC;IAC1D,OAAO,IAAI;EACb;EACA,MAAMW,WAAW,GAAG,GAAGX,OAAO,CAACK,MAAM,KAAKL,OAAO,CAACM,IAAI,KAAKN,OAAO,CAACO,KAAK,IAAIP,OAAO,CAACQ,OAAO,EAAE;EAC7F,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,GAAG,CAAC,mDAAmD,EAAE;MACpFC,MAAM,EAAE;QACNd,OAAO,EAAEW,WAAW;QACpBI,GAAG,EAAEC,OAAO,CAACC,GAAG,CAACC;MACnB;IACF,CAAC,CAAC;IACF,IAAIN,QAAQ,CAACO,IAAI,CAACC,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;MACpC,MAAM;QAAEpB,GAAG;QAAEC;MAAI,CAAC,GAAGU,QAAQ,CAACO,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACE,QAAQ,CAACC,QAAQ;MAC/Dd,OAAO,CAACe,GAAG,CAAC,YAAYb,WAAW,MAAM,EAAE;QAAEV,GAAG;QAAEC;MAAI,CAAC,CAAC;MACxD,OAAO;QAAED,GAAG;QAAEC;MAAI,CAAC;IACrB;IACAO,OAAO,CAACC,IAAI,CAAC,iCAAiCC,WAAW,EAAE,CAAC;IAC5D,OAAO,IAAI;EACb,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdhB,OAAO,CAACgB,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}