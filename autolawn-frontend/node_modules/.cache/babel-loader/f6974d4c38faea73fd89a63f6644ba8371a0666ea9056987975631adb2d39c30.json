{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst getHeaders = () => ({\n  Authorization: `Bearer ${localStorage.getItem('token')}`\n});\nexport const fetchCustomers = async () => {\n  const response = await axios.get(`${API_URL}/customers`, {\n    headers: getHeaders()\n  });\n  return response.data;\n};\nexport const fetchRoutes = async () => {\n  const response = await axios.get(`${API_URL}/routes`, {\n    headers: getHeaders()\n  });\n  return response.data;\n};\nexport const saveRoute = async route => {\n  const response = await axios.post(`${API_URL}/routes`, route, {\n    headers: getHeaders()\n  });\n  return response.data;\n};\nexport const deleteRoute = async routeId => {\n  await axios.delete(`${API_URL}/routes/${routeId}`, {\n    headers: getHeaders()\n  });\n};\nexport const optimizeRoute = async routeId => {\n  const response = await axios.post(`${API_URL}/routes/${routeId}/optimize`, {}, {\n    headers: getHeaders()\n  });\n  return response.data;\n};\nexport const fetchJobs = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/jobs`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return response.data; // This should be an array of job objects\n  } catch (error) {\n    console.error('Error fetching jobs:', error);\n    throw error;\n  }\n};\nexport const fetchCalendarEvents = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/calendar-events`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return response.data; // This should be an array of calendar event objects\n  } catch (error) {\n    console.error('Error fetching calendar events:', error);\n    throw error;\n  }\n};\nexport const updateCalendarEvent = async eventData => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/calendar-events/${eventData.id}`, eventData, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return response.data; // This should be the updated event object\n  } catch (error) {\n    console.error('Error updating calendar event:', error);\n    throw error;\n  }\n};\nexport const saveSchedule = async (routeId, schedule) => {\n  const response = await axios.post(`${API_URL}/routes/${routeId}/schedule`, schedule, {\n    headers: getHeaders()\n  });\n  return response.data;\n};","map":{"version":3,"names":["axios","API_BASE_URL","getHeaders","Authorization","localStorage","getItem","fetchCustomers","response","get","API_URL","headers","data","fetchRoutes","saveRoute","route","post","deleteRoute","routeId","delete","optimizeRoute","fetchJobs","error","console","fetchCalendarEvents","updateCalendarEvent","eventData","put","id","saveSchedule","schedule"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/pages/BuildRoutes/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\nconst getHeaders = () => ({ Authorization: `Bearer ${localStorage.getItem('token')}` });\r\n\r\nexport const fetchCustomers = async () => {\r\n  const response = await axios.get(`${API_URL}/customers`, { headers: getHeaders() });\r\n  return response.data;\r\n};\r\n\r\nexport const fetchRoutes = async () => {\r\n  const response = await axios.get(`${API_URL}/routes`, { headers: getHeaders() });\r\n  return response.data;\r\n};\r\n\r\nexport const saveRoute = async (route) => {\r\n  const response = await axios.post(`${API_URL}/routes`, route, { headers: getHeaders() });\r\n  return response.data;\r\n};\r\n\r\nexport const deleteRoute = async (routeId) => {\r\n  await axios.delete(`${API_URL}/routes/${routeId}`, { headers: getHeaders() });\r\n};\r\n\r\nexport const optimizeRoute = async (routeId) => {\r\n  const response = await axios.post(`${API_URL}/routes/${routeId}/optimize`, {}, { headers: getHeaders() });\r\n  return response.data;\r\n};\r\n\r\nexport const fetchJobs = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/jobs`, {\r\n        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\r\n      });\r\n      return response.data; // This should be an array of job objects\r\n    } catch (error) {\r\n      console.error('Error fetching jobs:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\nexport const fetchCalendarEvents = async () => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/calendar-events`, {\r\n        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\r\n      });\r\n      return response.data; // This should be an array of calendar event objects\r\n    } catch (error) {\r\n      console.error('Error fetching calendar events:', error);\r\n      throw error;\r\n    }\r\n  };\r\n  \r\nexport const updateCalendarEvent = async (eventData) => {\r\n    try {\r\n      const response = await axios.put(`${API_BASE_URL}/calendar-events/${eventData.id}`, eventData, {\r\n        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\r\n      });\r\n      return response.data; // This should be the updated event object\r\n    } catch (error) {\r\n      console.error('Error updating calendar event:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\nexport const saveSchedule = async (routeId, schedule) => {\r\n  const response = await axios.post(`${API_URL}/routes/${routeId}/schedule`, schedule, { headers: getHeaders() });\r\n  return response.data;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}