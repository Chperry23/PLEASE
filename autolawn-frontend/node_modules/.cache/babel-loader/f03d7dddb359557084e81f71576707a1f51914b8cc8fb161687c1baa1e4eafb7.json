{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nconst getHeaders = () => ({\n  headers: {\n    Authorization: `Bearer ${localStorage.getItem('token')}`\n  }\n});\nexport const fetchJobs = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/jobs`, getHeaders());\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching jobs:', error);\n    return [];\n  }\n};\nexport const fetchCustomers = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/customers`, getHeaders());\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching customers:', error);\n    return [];\n  }\n};\nexport const fetchAnalytics = async (timeRange, customRange = null) => {\n  let startDate, endDate;\n  if (timeRange === 'custom' && customRange) {\n    startDate = customRange.start;\n    endDate = customRange.end;\n  } else {\n    const end = new Date();\n    const start = new Date();\n    start.setDate(end.getDate() - (timeRange === 'all' ? 365 : parseInt(timeRange)));\n    startDate = start.toISOString().split('T')[0];\n    endDate = end.toISOString().split('T')[0];\n  }\n  try {\n    const [jobs, customers] = await Promise.all([fetchJobs(), fetchCustomers()]);\n\n    // Calculate revenue over time\n    const revenue = jobs.reduce((acc, job) => {\n      const date = new Date(job.date).toISOString().split('T')[0];\n      acc[date] = (acc[date] || 0) + job.price;\n      return acc;\n    }, {});\n\n    // Calculate customer churn rate\n    const churnRate = calculateChurnRate(customers, startDate, endDate);\n    return {\n      revenue: {\n        labels: Object.keys(revenue),\n        data: Object.values(revenue)\n      },\n      customerChurnRate: churnRate\n    };\n  } catch (error) {\n    console.error('Error fetching analytics:', error);\n    return {\n      revenue: {\n        labels: [],\n        data: []\n      },\n      customerChurnRate: 0\n    };\n  }\n};\nconst calculateChurnRate = (customers, startDate, endPeriod) => {\n  const startCustomers = customers.filter(c => new Date(c.createdAt) < new Date(startDate)).length;\n  const endCustomers = customers.filter(c => new Date(c.createdAt) <= new Date(endPeriod)).length;\n  const newCustomers = customers.filter(c => new Date(c.createdAt) >= new Date(startDate) && new Date(c.createdAt) <= new Date(endPeriod)).length;\n  const lostCustomers = startCustomers + newCustomers - endCustomers;\n  const churnRate = lostCustomers / startCustomers * 100;\n  return Math.max(0, churnRate); // Ensure non-negative churn rate\n};\nexport default {\n  fetchJobs,\n  fetchCustomers,\n  fetchAnalytics\n};","map":{"version":3,"names":["axios","API_URL","getHeaders","headers","Authorization","localStorage","getItem","fetchJobs","response","get","data","error","console","fetchCustomers","fetchAnalytics","timeRange","customRange","startDate","endDate","start","end","Date","setDate","getDate","parseInt","toISOString","split","jobs","customers","Promise","all","revenue","reduce","acc","job","date","price","churnRate","calculateChurnRate","labels","Object","keys","values","customerChurnRate","endPeriod","startCustomers","filter","c","createdAt","length","endCustomers","newCustomers","lostCustomers","Math","max"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/api/dashboardApi.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\nconst getHeaders = () => ({\r\n  headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }\r\n});\r\n\r\nexport const fetchJobs = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/jobs`, getHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching jobs:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const fetchCustomers = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/customers`, getHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching customers:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const fetchAnalytics = async (timeRange, customRange = null) => {\r\n  let startDate, endDate;\r\n\r\n  if (timeRange === 'custom' && customRange) {\r\n    startDate = customRange.start;\r\n    endDate = customRange.end;\r\n  } else {\r\n    const end = new Date();\r\n    const start = new Date();\r\n    start.setDate(end.getDate() - (timeRange === 'all' ? 365 : parseInt(timeRange)));\r\n    startDate = start.toISOString().split('T')[0];\r\n    endDate = end.toISOString().split('T')[0];\r\n  }\r\n\r\n  try {\r\n    const [jobs, customers] = await Promise.all([\r\n      fetchJobs(),\r\n      fetchCustomers(),\r\n    ]);\r\n\r\n    // Calculate revenue over time\r\n    const revenue = jobs.reduce((acc, job) => {\r\n      const date = new Date(job.date).toISOString().split('T')[0];\r\n      acc[date] = (acc[date] || 0) + job.price;\r\n      return acc;\r\n    }, {});\r\n\r\n    // Calculate customer churn rate\r\n    const churnRate = calculateChurnRate(customers, startDate, endDate);\r\n\r\n    return {\r\n      revenue: {\r\n        labels: Object.keys(revenue),\r\n        data: Object.values(revenue),\r\n      },\r\n      customerChurnRate: churnRate,\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching analytics:', error);\r\n    return {\r\n      revenue: { labels: [], data: [] },\r\n      customerChurnRate: 0,\r\n    };\r\n  }\r\n};\r\n\r\nconst calculateChurnRate = (customers, startDate, endPeriod) => {\r\n  const startCustomers = customers.filter(c => new Date(c.createdAt) < new Date(startDate)).length;\r\n  const endCustomers = customers.filter(c => new Date(c.createdAt) <= new Date(endPeriod)).length;\r\n  const newCustomers = customers.filter(c => new Date(c.createdAt) >= new Date(startDate) && new Date(c.createdAt) <= new Date(endPeriod)).length;\r\n  \r\n  const lostCustomers = startCustomers + newCustomers - endCustomers;\r\n  const churnRate = (lostCustomers / startCustomers) * 100;\r\n  \r\n  return Math.max(0, churnRate); // Ensure non-negative churn rate\r\n};\r\n\r\nexport default {\r\n  fetchJobs,\r\n  fetchCustomers,\r\n  fetchAnalytics,\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}