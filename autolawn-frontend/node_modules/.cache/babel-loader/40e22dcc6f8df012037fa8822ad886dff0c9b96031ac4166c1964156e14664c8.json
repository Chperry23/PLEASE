{"ast":null,"code":"// AUTOLAWN/frontend/src/api/dashboardApi.js\nimport axios from 'axios';\nimport { getMockAnalytics } from './mockAnalytics';\nconst API_URL = 'http://localhost:5000/api'; // Ensure this matches your backend URL\n\nconst getHeaders = () => {\n  const token = localStorage.getItem('token');\n  console.log('Using token:', token); // For debugging purposes; remove in production\n  return {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n};\nconst handleApiError = (error, fallbackMessage) => {\n  if (error.response && error.response.status === 401) {\n    console.log('Unauthorized. Redirecting to login.');\n    localStorage.removeItem('token'); // Clear the expired or invalid token\n    window.location.href = '/login'; // Redirect to login page\n  } else if (error.response && error.response.status === 403) {\n    // Handle insufficient subscription tier error\n    console.warn('Insufficient subscription tier:', error.response.data);\n    return getMockAnalytics(); // Return mock data for Free tier\n  } else {\n    var _error$response;\n    console.error(fallbackMessage, ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  }\n  throw error;\n};\nexport const fetchCompletedJobs = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/jobs?status=completed`, getHeaders());\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error fetching completed jobs:');\n  }\n};\nexport const fetchJobs = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/jobs`, getHeaders());\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error fetching jobs:');\n  }\n};\nexport const fetchCustomers = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/customers`, getHeaders());\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error fetching customers:');\n  }\n};\nexport const fetchEmployees = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/employees`, getHeaders());\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error fetching employees:');\n  }\n};\nexport const fetchAnalytics = async (timeRange, customRange = null) => {\n  let startDate, endDate;\n  if (timeRange === 'custom' && customRange) {\n    startDate = customRange.start;\n    endDate = customRange.end;\n  } else {\n    const end = new Date();\n    const start = new Date();\n    start.setDate(end.getDate() - (timeRange === 'all' ? 365 : parseInt(timeRange)));\n    startDate = start.toISOString().split('T')[0];\n    endDate = end.toISOString().split('T')[0];\n  }\n  const url = `${API_URL}/analytics?startDate=${startDate}&endDate=${endDate}`;\n  try {\n    const response = await axios.get(url, getHeaders());\n\n    // Ensure all expected properties are present with default values\n    const analyticsData = {\n      revenue: {\n        labels: [],\n        data: []\n      },\n      customerGrowth: {\n        labels: [],\n        data: []\n      },\n      jobStatusDistribution: {\n        labels: [],\n        data: []\n      },\n      topPerformingEmployees: {\n        labels: [],\n        data: []\n      },\n      customerRetention: 0,\n      jobCancellationRate: 0,\n      jobFrequencyByCustomer: {\n        labels: [],\n        data: []\n      },\n      customerSatisfaction: {\n        labels: [],\n        data: [],\n        averageRating: 0\n      },\n      topServices: {\n        labels: [],\n        data: []\n      },\n      employeeDistribution: {\n        labels: [],\n        data: []\n      },\n      customerLifetimeValue: {\n        labels: [],\n        data: []\n      },\n      averageLifetimeValue: 0,\n      jobCompletionRate: 0,\n      ...response.data\n    };\n    return analyticsData;\n  } catch (error) {\n    var _error$response2;\n    console.error('Error fetching analytics:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    // Return a default structure instead of throwing an error\n    return {\n      revenue: {\n        labels: [],\n        data: []\n      },\n      customerGrowth: {\n        labels: [],\n        data: []\n      },\n      jobStatusDistribution: {\n        labels: [],\n        data: []\n      },\n      topPerformingEmployees: {\n        labels: [],\n        data: []\n      },\n      customerRetention: 0,\n      jobCancellationRate: 0,\n      jobFrequencyByCustomer: {\n        labels: [],\n        data: []\n      },\n      customerSatisfaction: {\n        labels: [],\n        data: [],\n        averageRating: 0\n      },\n      topServices: {\n        labels: [],\n        data: []\n      },\n      employeeDistribution: {\n        labels: [],\n        data: []\n      },\n      customerLifetimeValue: {\n        labels: [],\n        data: []\n      },\n      averageLifetimeValue: 0,\n      jobCompletionRate: 0\n    };\n  }\n};\nexport const fetchCustomerGrowth = async (startDate, endDate) => {\n  const response = await axios.get(`${API_URL}/analytics/customer-growth?startDate=${startDate}&endDate=${endDate}`, getHeaders());\n  return response.data;\n};\n\n// Add this function to frontend/src/api/dashboardApi.js\nexport const fetchRoutes = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/routes`, getHeaders());\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error fetching routes:');\n  }\n};\nexport const fetchServices = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/services`, getHeaders());\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error fetching services:');\n  }\n};\nexport const fetchBusinessInfo = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/business-info`, getHeaders());\n    return response.data;\n  } catch (error) {\n    handleApiError(error, 'Error fetching business info:');\n  }\n};\nexport const fetchRevenue = async (startDate, endDate) => {\n  const url = `${API_URL}/analytics/revenue?startDate=${startDate}&endDate=${endDate}`;\n  try {\n    const response = await axios.get(url, getHeaders());\n\n    // Calculate total revenue considering recurring jobs\n    const revenueData = response.data;\n    revenueData.totalRevenue = revenueData.jobs.reduce((total, job) => {\n      if (job.isRecurring) {\n        return total + job.completionCount * job.price;\n      }\n      return total + job.price;\n    }, 0);\n    return revenueData;\n  } catch (error) {\n    return handleApiError(error, 'Error fetching revenue:');\n  }\n};\nexport const fetchJobStatistics = async (startDate, endDate) => {\n  const url = `${API_URL}/analytics/job-statistics?startDate=${startDate}&endDate=${endDate}`;\n  try {\n    const response = await axios.get(url, getHeaders());\n\n    // Adjust job statistics to account for recurring jobs\n    const jobStats = response.data;\n    jobStats.totalRevenue = jobStats.jobs.reduce((total, job) => {\n      if (job.isRecurring) {\n        return total + job.completionCount * job.price;\n      }\n      return total + job.price;\n    }, 0);\n    jobStats.jobStatusDistribution = jobStats.jobs.reduce((acc, job) => {\n      if (job.isRecurring) {\n        acc[job.recurringStatus] = (acc[job.recurringStatus] || 0) + 1;\n      } else {\n        acc[job.status] = (acc[job.status] || 0) + 1;\n      }\n      return acc;\n    }, {});\n    return jobStats;\n  } catch (error) {\n    return handleApiError(error, 'Error fetching job statistics:');\n  }\n};\nexport const fetchEmployeePerformance = async (startDate, endDate) => {\n  const response = await axios.get(`${API_URL}/analytics/employee-performance?startDate=${startDate}&endDate=${endDate}`, getHeaders());\n  return response.data;\n};","map":{"version":3,"names":["axios","getMockAnalytics","API_URL","getHeaders","token","localStorage","getItem","console","log","headers","Authorization","handleApiError","error","fallbackMessage","response","status","removeItem","window","location","href","warn","data","_error$response","message","fetchCompletedJobs","get","fetchJobs","fetchCustomers","fetchEmployees","fetchAnalytics","timeRange","customRange","startDate","endDate","start","end","Date","setDate","getDate","parseInt","toISOString","split","url","analyticsData","revenue","labels","customerGrowth","jobStatusDistribution","topPerformingEmployees","customerRetention","jobCancellationRate","jobFrequencyByCustomer","customerSatisfaction","averageRating","topServices","employeeDistribution","customerLifetimeValue","averageLifetimeValue","jobCompletionRate","_error$response2","fetchCustomerGrowth","fetchRoutes","fetchServices","fetchBusinessInfo","fetchRevenue","revenueData","totalRevenue","jobs","reduce","total","job","isRecurring","completionCount","price","fetchJobStatistics","jobStats","acc","recurringStatus","fetchEmployeePerformance"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/api/dashboardApi.js"],"sourcesContent":["// AUTOLAWN/frontend/src/api/dashboardApi.js\r\nimport axios from 'axios';\r\nimport { getMockAnalytics } from './mockAnalytics';\r\n\r\nconst API_URL = 'http://localhost:5000/api'; // Ensure this matches your backend URL\r\n\r\nconst getHeaders = () => {\r\n  const token = localStorage.getItem('token');\r\n  console.log('Using token:', token); // For debugging purposes; remove in production\r\n  return {\r\n    headers: { Authorization: `Bearer ${token}` }\r\n  };\r\n};\r\n\r\nconst handleApiError = (error, fallbackMessage) => {\r\n  if (error.response && error.response.status === 401) {\r\n    console.log('Unauthorized. Redirecting to login.');\r\n    localStorage.removeItem('token'); // Clear the expired or invalid token\r\n    window.location.href = '/login'; // Redirect to login page\r\n  } else if (error.response && error.response.status === 403) {\r\n    // Handle insufficient subscription tier error\r\n    console.warn('Insufficient subscription tier:', error.response.data);\r\n    return getMockAnalytics(); // Return mock data for Free tier\r\n  } else {\r\n    console.error(fallbackMessage, error.response?.data || error.message);\r\n  }\r\n  throw error;\r\n};\r\n\r\nexport const fetchCompletedJobs = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/jobs?status=completed`, getHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Error fetching completed jobs:');\r\n  }\r\n};\r\n\r\nexport const fetchJobs = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/jobs`, getHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Error fetching jobs:');\r\n  }\r\n};\r\n\r\nexport const fetchCustomers = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/customers`, getHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Error fetching customers:');\r\n  }\r\n};\r\n\r\nexport const fetchEmployees = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/employees`, getHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Error fetching employees:');\r\n  }\r\n};\r\n\r\nexport const fetchAnalytics = async (timeRange, customRange = null) => {\r\n  let startDate, endDate;\r\n\r\n  if (timeRange === 'custom' && customRange) {\r\n    startDate = customRange.start;\r\n    endDate = customRange.end;\r\n  } else {\r\n    const end = new Date();\r\n    const start = new Date();\r\n    start.setDate(end.getDate() - (timeRange === 'all' ? 365 : parseInt(timeRange)));\r\n    startDate = start.toISOString().split('T')[0];\r\n    endDate = end.toISOString().split('T')[0];\r\n  }\r\n\r\n  const url = `${API_URL}/analytics?startDate=${startDate}&endDate=${endDate}`;\r\n  try {\r\n    const response = await axios.get(url, getHeaders());\r\n\r\n    // Ensure all expected properties are present with default values\r\n    const analyticsData = {\r\n      revenue: { labels: [], data: [] },\r\n      customerGrowth: { labels: [], data: [] },\r\n      jobStatusDistribution: { labels: [], data: [] },\r\n      topPerformingEmployees: { labels: [], data: [] },\r\n      customerRetention: 0,\r\n      jobCancellationRate: 0,\r\n      jobFrequencyByCustomer: { labels: [], data: [] },\r\n      customerSatisfaction: { labels: [], data: [], averageRating: 0 },\r\n      topServices: { labels: [], data: [] },\r\n      employeeDistribution: { labels: [], data: [] },\r\n      customerLifetimeValue: { labels: [], data: [] },\r\n      averageLifetimeValue: 0,\r\n      jobCompletionRate: 0,\r\n      ...response.data\r\n    };\r\n\r\n    return analyticsData;\r\n  } catch (error) {\r\n    console.error('Error fetching analytics:', error.response?.data || error.message);\r\n    // Return a default structure instead of throwing an error\r\n    return {\r\n      revenue: { labels: [], data: [] },\r\n      customerGrowth: { labels: [], data: [] },\r\n      jobStatusDistribution: { labels: [], data: [] },\r\n      topPerformingEmployees: { labels: [], data: [] },\r\n      customerRetention: 0,\r\n      jobCancellationRate: 0,\r\n      jobFrequencyByCustomer: { labels: [], data: [] },\r\n      customerSatisfaction: { labels: [], data: [], averageRating: 0 },\r\n      topServices: { labels: [], data: [] },\r\n      employeeDistribution: { labels: [], data: [] },\r\n      customerLifetimeValue: { labels: [], data: [] },\r\n      averageLifetimeValue: 0,\r\n      jobCompletionRate: 0\r\n    };\r\n  }\r\n};\r\n\r\nexport const fetchCustomerGrowth = async (startDate, endDate) => {\r\n  const response = await axios.get(`${API_URL}/analytics/customer-growth?startDate=${startDate}&endDate=${endDate}`, getHeaders());\r\n  return response.data;\r\n};\r\n\r\n// Add this function to frontend/src/api/dashboardApi.js\r\nexport const fetchRoutes = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/routes`, getHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Error fetching routes:');\r\n  }\r\n};\r\n\r\nexport const fetchServices = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/services`, getHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Error fetching services:');\r\n  }\r\n};\r\n\r\nexport const fetchBusinessInfo = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/business-info`, getHeaders());\r\n    return response.data;\r\n  } catch (error) {\r\n    handleApiError(error, 'Error fetching business info:');\r\n  }\r\n};\r\n\r\nexport const fetchRevenue = async (startDate, endDate) => {\r\n  const url = `${API_URL}/analytics/revenue?startDate=${startDate}&endDate=${endDate}`;\r\n  try {\r\n    const response = await axios.get(url, getHeaders());\r\n\r\n    // Calculate total revenue considering recurring jobs\r\n    const revenueData = response.data;\r\n    revenueData.totalRevenue = revenueData.jobs.reduce((total, job) => {\r\n      if (job.isRecurring) {\r\n        return total + (job.completionCount * job.price);\r\n      }\r\n      return total + job.price;\r\n    }, 0);\r\n\r\n    return revenueData;\r\n  } catch (error) {\r\n    return handleApiError(error, 'Error fetching revenue:');\r\n  }\r\n};\r\n\r\nexport const fetchJobStatistics = async (startDate, endDate) => {\r\n  const url = `${API_URL}/analytics/job-statistics?startDate=${startDate}&endDate=${endDate}`;\r\n  try {\r\n    const response = await axios.get(url, getHeaders());\r\n\r\n    // Adjust job statistics to account for recurring jobs\r\n    const jobStats = response.data;\r\n    jobStats.totalRevenue = jobStats.jobs.reduce((total, job) => {\r\n      if (job.isRecurring) {\r\n        return total + (job.completionCount * job.price);\r\n      }\r\n      return total + job.price;\r\n    }, 0);\r\n\r\n    jobStats.jobStatusDistribution = jobStats.jobs.reduce((acc, job) => {\r\n      if (job.isRecurring) {\r\n        acc[job.recurringStatus] = (acc[job.recurringStatus] || 0) + 1;\r\n      } else {\r\n        acc[job.status] = (acc[job.status] || 0) + 1;\r\n      }\r\n      return acc;\r\n    }, {});\r\n\r\n    return jobStats;\r\n  } catch (error) {\r\n    return handleApiError(error, 'Error fetching job statistics:');\r\n  }\r\n};\r\n\r\nexport const fetchEmployeePerformance = async (startDate, endDate) => {\r\n  const response = await axios.get(`${API_URL}/analytics/employee-performance?startDate=${startDate}&endDate=${endDate}`, getHeaders());\r\n  return response.data;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}