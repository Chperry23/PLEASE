{"ast":null,"code":"var _jsxFileName = \"C:\\\\AUTOLAWN\\\\autolawn-frontend\\\\src\\\\components\\\\CustomerMap.js\",\n  _s = $RefreshSig$();\n// components/CustomerMap.js\nimport React, { useEffect, useRef } from 'react';\nimport { Loader } from '@googlemaps/js-api-loader';\n/* global google */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomerMap = ({\n  routes,\n  jobs,\n  onOptimizeRoute\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  useEffect(() => {\n    const loader = new Loader({\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      version: \"weekly\"\n    });\n    loader.load().then(() => {\n      const map = new google.maps.Map(mapRef.current, {\n        center: {\n          lat: 0,\n          lng: 0\n        },\n        zoom: 2\n      });\n      const bounds = new google.maps.LatLngBounds();\n      routes.forEach((route, routeIndex) => {\n        const routeJobs = jobs.filter(job => route.jobs.some(routeJob => routeJob.job === job._id));\n        const routeColor = route.color || `hsl(${routeIndex * 137.508}, 50%, 60%)`;\n        const polylinePath = [];\n        routeJobs.forEach((job, jobIndex) => {\n          if (job.customer && job.customer.address && job.customer.address.lat && job.customer.address.lng) {\n            const position = new google.maps.LatLng(job.customer.address.lat, job.customer.address.lng);\n            const marker = new google.maps.Marker({\n              position: position,\n              map: map,\n              title: `${job.title} - ${job.customer.name}`,\n              label: (jobIndex + 1).toString(),\n              icon: {\n                path: google.maps.SymbolPath.CIRCLE,\n                fillColor: routeColor,\n                fillOpacity: 1,\n                strokeWeight: 0,\n                scale: 8\n              }\n            });\n            const infoWindow = new google.maps.InfoWindow({\n              content: `\n                <div>\n                  <h3>${job.title}</h3>\n                  <p>Customer: ${job.customer.name}</p>\n                  <p>Address: ${job.customer.address.street}, ${job.customer.address.city}</p>\n                  <p>Status: ${job.status}</p>\n                  <p>Route: ${route.name}</p>\n                </div>\n              `\n            });\n            marker.addListener('click', () => {\n              infoWindow.open(map, marker);\n            });\n            bounds.extend(position);\n            polylinePath.push(position);\n          }\n        });\n\n        // Draw route path\n        const routePath = new google.maps.Polyline({\n          path: polylinePath,\n          geodesic: true,\n          strokeColor: routeColor,\n          strokeOpacity: 1.0,\n          strokeWeight: 2\n        });\n        routePath.setMap(map);\n      });\n      if (bounds.isEmpty()) {\n        map.setCenter({\n          lat: 0,\n          lng: 0\n        });\n        map.setZoom(2);\n      } else {\n        map.fitBounds(bounds);\n      }\n    });\n  }, [routes, jobs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        width: '100%',\n        height: '600px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), routes.map(route => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onOptimizeRoute(route._id),\n      className: \"mt-2 mr-2 bg-primary text-white px-4 py-2 rounded hover:bg-opacity-90\",\n      children: [\"Optimize \", route.name]\n    }, route._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomerMap, \"9mn7MMe4fPaZ50ApsOpRWF2HbFg=\");\n_c = CustomerMap;\nexport default CustomerMap;\nvar _c;\n$RefreshReg$(_c, \"CustomerMap\");","map":{"version":3,"names":["React","useEffect","useRef","Loader","jsxDEV","_jsxDEV","CustomerMap","routes","jobs","onOptimizeRoute","_s","mapRef","loader","apiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","version","load","then","map","google","maps","Map","current","center","lat","lng","zoom","bounds","LatLngBounds","forEach","route","routeIndex","routeJobs","filter","job","some","routeJob","_id","routeColor","color","polylinePath","jobIndex","customer","address","position","LatLng","marker","Marker","title","name","label","toString","icon","path","SymbolPath","CIRCLE","fillColor","fillOpacity","strokeWeight","scale","infoWindow","InfoWindow","content","street","city","status","addListener","open","extend","push","routePath","Polyline","geodesic","strokeColor","strokeOpacity","setMap","isEmpty","setCenter","setZoom","fitBounds","children","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","_c","$RefreshReg$"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/components/CustomerMap.js"],"sourcesContent":["// components/CustomerMap.js\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { Loader } from '@googlemaps/js-api-loader';\r\n/* global google */\r\n\r\nconst CustomerMap = ({ routes, jobs, onOptimizeRoute }) => {\r\n  const mapRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const loader = new Loader({\r\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n      version: \"weekly\",\r\n    });\r\n\r\n    loader.load().then(() => {\r\n      const map = new google.maps.Map(mapRef.current, {\r\n        center: { lat: 0, lng: 0 },\r\n        zoom: 2,\r\n      });\r\n\r\n      const bounds = new google.maps.LatLngBounds();\r\n\r\n      routes.forEach((route, routeIndex) => {\r\n        const routeJobs = jobs.filter(job => route.jobs.some(routeJob => routeJob.job === job._id));\r\n        const routeColor = route.color || `hsl(${routeIndex * 137.508}, 50%, 60%)`;\r\n\r\n        const polylinePath = [];\r\n\r\n        routeJobs.forEach((job, jobIndex) => {\r\n          if (job.customer && job.customer.address && job.customer.address.lat && job.customer.address.lng) {\r\n            const position = new google.maps.LatLng(job.customer.address.lat, job.customer.address.lng);\r\n            const marker = new google.maps.Marker({\r\n              position: position,\r\n              map: map,\r\n              title: `${job.title} - ${job.customer.name}`,\r\n              label: (jobIndex + 1).toString(),\r\n              icon: {\r\n                path: google.maps.SymbolPath.CIRCLE,\r\n                fillColor: routeColor,\r\n                fillOpacity: 1,\r\n                strokeWeight: 0,\r\n                scale: 8,\r\n              },\r\n            });\r\n\r\n            const infoWindow = new google.maps.InfoWindow({\r\n              content: `\r\n                <div>\r\n                  <h3>${job.title}</h3>\r\n                  <p>Customer: ${job.customer.name}</p>\r\n                  <p>Address: ${job.customer.address.street}, ${job.customer.address.city}</p>\r\n                  <p>Status: ${job.status}</p>\r\n                  <p>Route: ${route.name}</p>\r\n                </div>\r\n              `\r\n            });\r\n\r\n            marker.addListener('click', () => {\r\n              infoWindow.open(map, marker);\r\n            });\r\n\r\n            bounds.extend(position);\r\n            polylinePath.push(position);\r\n          }\r\n        });\r\n\r\n        // Draw route path\r\n        const routePath = new google.maps.Polyline({\r\n          path: polylinePath,\r\n          geodesic: true,\r\n          strokeColor: routeColor,\r\n          strokeOpacity: 1.0,\r\n          strokeWeight: 2,\r\n        });\r\n\r\n        routePath.setMap(map);\r\n      });\r\n\r\n      if (bounds.isEmpty()) {\r\n        map.setCenter({ lat: 0, lng: 0 });\r\n        map.setZoom(2);\r\n      } else {\r\n        map.fitBounds(bounds);\r\n      }\r\n    });\r\n  }, [routes, jobs]);\r\n\r\n  return (\r\n    <div>\r\n      <div ref={mapRef} style={{ width: '100%', height: '600px' }}></div>\r\n      {routes.map(route => (\r\n        <button \r\n          key={route._id}\r\n          onClick={() => onOptimizeRoute(route._id)}\r\n          className=\"mt-2 mr-2 bg-primary text-white px-4 py-2 rounded hover:bg-opacity-90\"\r\n        >\r\n          Optimize {route.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomerMap;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,MAAM,QAAQ,2BAA2B;AAClD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,WAAW,GAAGA,CAAC;EAAEC,MAAM;EAAEC,IAAI;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EACzD,MAAMC,MAAM,GAAGT,MAAM,CAAC,IAAI,CAAC;EAE3BD,SAAS,CAAC,MAAM;IACd,MAAMW,MAAM,GAAG,IAAIT,MAAM,CAAC;MACxBU,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,6BAA6B;MACjDC,OAAO,EAAE;IACX,CAAC,CAAC;IAEFL,MAAM,CAACM,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;MACvB,MAAMC,GAAG,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACC,GAAG,CAACZ,MAAM,CAACa,OAAO,EAAE;QAC9CC,MAAM,EAAE;UAAEC,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE;QAAE,CAAC;QAC1BC,IAAI,EAAE;MACR,CAAC,CAAC;MAEF,MAAMC,MAAM,GAAG,IAAIR,MAAM,CAACC,IAAI,CAACQ,YAAY,CAAC,CAAC;MAE7CvB,MAAM,CAACwB,OAAO,CAAC,CAACC,KAAK,EAAEC,UAAU,KAAK;QACpC,MAAMC,SAAS,GAAG1B,IAAI,CAAC2B,MAAM,CAACC,GAAG,IAAIJ,KAAK,CAACxB,IAAI,CAAC6B,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACF,GAAG,KAAKA,GAAG,CAACG,GAAG,CAAC,CAAC;QAC3F,MAAMC,UAAU,GAAGR,KAAK,CAACS,KAAK,IAAI,OAAOR,UAAU,GAAG,OAAO,aAAa;QAE1E,MAAMS,YAAY,GAAG,EAAE;QAEvBR,SAAS,CAACH,OAAO,CAAC,CAACK,GAAG,EAAEO,QAAQ,KAAK;UACnC,IAAIP,GAAG,CAACQ,QAAQ,IAAIR,GAAG,CAACQ,QAAQ,CAACC,OAAO,IAAIT,GAAG,CAACQ,QAAQ,CAACC,OAAO,CAACnB,GAAG,IAAIU,GAAG,CAACQ,QAAQ,CAACC,OAAO,CAAClB,GAAG,EAAE;YAChG,MAAMmB,QAAQ,GAAG,IAAIzB,MAAM,CAACC,IAAI,CAACyB,MAAM,CAACX,GAAG,CAACQ,QAAQ,CAACC,OAAO,CAACnB,GAAG,EAAEU,GAAG,CAACQ,QAAQ,CAACC,OAAO,CAAClB,GAAG,CAAC;YAC3F,MAAMqB,MAAM,GAAG,IAAI3B,MAAM,CAACC,IAAI,CAAC2B,MAAM,CAAC;cACpCH,QAAQ,EAAEA,QAAQ;cAClB1B,GAAG,EAAEA,GAAG;cACR8B,KAAK,EAAE,GAAGd,GAAG,CAACc,KAAK,MAAMd,GAAG,CAACQ,QAAQ,CAACO,IAAI,EAAE;cAC5CC,KAAK,EAAE,CAACT,QAAQ,GAAG,CAAC,EAAEU,QAAQ,CAAC,CAAC;cAChCC,IAAI,EAAE;gBACJC,IAAI,EAAElC,MAAM,CAACC,IAAI,CAACkC,UAAU,CAACC,MAAM;gBACnCC,SAAS,EAAElB,UAAU;gBACrBmB,WAAW,EAAE,CAAC;gBACdC,YAAY,EAAE,CAAC;gBACfC,KAAK,EAAE;cACT;YACF,CAAC,CAAC;YAEF,MAAMC,UAAU,GAAG,IAAIzC,MAAM,CAACC,IAAI,CAACyC,UAAU,CAAC;cAC5CC,OAAO,EAAE;AACvB;AACA,wBAAwB5B,GAAG,CAACc,KAAK;AACjC,iCAAiCd,GAAG,CAACQ,QAAQ,CAACO,IAAI;AAClD,gCAAgCf,GAAG,CAACQ,QAAQ,CAACC,OAAO,CAACoB,MAAM,KAAK7B,GAAG,CAACQ,QAAQ,CAACC,OAAO,CAACqB,IAAI;AACzF,+BAA+B9B,GAAG,CAAC+B,MAAM;AACzC,8BAA8BnC,KAAK,CAACmB,IAAI;AACxC;AACA;YACY,CAAC,CAAC;YAEFH,MAAM,CAACoB,WAAW,CAAC,OAAO,EAAE,MAAM;cAChCN,UAAU,CAACO,IAAI,CAACjD,GAAG,EAAE4B,MAAM,CAAC;YAC9B,CAAC,CAAC;YAEFnB,MAAM,CAACyC,MAAM,CAACxB,QAAQ,CAAC;YACvBJ,YAAY,CAAC6B,IAAI,CAACzB,QAAQ,CAAC;UAC7B;QACF,CAAC,CAAC;;QAEF;QACA,MAAM0B,SAAS,GAAG,IAAInD,MAAM,CAACC,IAAI,CAACmD,QAAQ,CAAC;UACzClB,IAAI,EAAEb,YAAY;UAClBgC,QAAQ,EAAE,IAAI;UACdC,WAAW,EAAEnC,UAAU;UACvBoC,aAAa,EAAE,GAAG;UAClBhB,YAAY,EAAE;QAChB,CAAC,CAAC;QAEFY,SAAS,CAACK,MAAM,CAACzD,GAAG,CAAC;MACvB,CAAC,CAAC;MAEF,IAAIS,MAAM,CAACiD,OAAO,CAAC,CAAC,EAAE;QACpB1D,GAAG,CAAC2D,SAAS,CAAC;UAAErD,GAAG,EAAE,CAAC;UAAEC,GAAG,EAAE;QAAE,CAAC,CAAC;QACjCP,GAAG,CAAC4D,OAAO,CAAC,CAAC,CAAC;MAChB,CAAC,MAAM;QACL5D,GAAG,CAAC6D,SAAS,CAACpD,MAAM,CAAC;MACvB;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACtB,MAAM,EAAEC,IAAI,CAAC,CAAC;EAElB,oBACEH,OAAA;IAAA6E,QAAA,gBACE7E,OAAA;MAAK8E,GAAG,EAAExE,MAAO;MAACyE,KAAK,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAQ;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAClEnF,MAAM,CAACa,GAAG,CAACY,KAAK,iBACf3B,OAAA;MAEEsF,OAAO,EAAEA,CAAA,KAAMlF,eAAe,CAACuB,KAAK,CAACO,GAAG,CAAE;MAC1CqD,SAAS,EAAC,uEAAuE;MAAAV,QAAA,GAClF,WACU,EAAClD,KAAK,CAACmB,IAAI;IAAA,GAJfnB,KAAK,CAACO,GAAG;MAAAgD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKR,CACT,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAChF,EAAA,CAhGIJ,WAAW;AAAAuF,EAAA,GAAXvF,WAAW;AAkGjB,eAAeA,WAAW;AAAC,IAAAuF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}