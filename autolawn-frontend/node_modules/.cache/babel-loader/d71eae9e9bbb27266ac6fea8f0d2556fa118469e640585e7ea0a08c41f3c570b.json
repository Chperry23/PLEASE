{"ast":null,"code":"var _jsxFileName = \"C:\\\\AUTOLAWN\\\\autolawn-frontend\\\\src\\\\pages\\\\BuildRoutes\\\\CalendarView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { fetchCalendarEvents, updateCalendarEvent, updateJob } from './api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalendarView = ({\n  routes\n}) => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    loadEvents();\n  }, [routes]);\n  const loadEvents = async () => {\n    try {\n      const calendarEvents = await fetchCalendarEvents();\n      const routeEvents = routes.flatMap(route => route.customers.map(customer => ({\n        title: `${route.name}: ${customer.name}`,\n        start: customer.scheduledDate,\n        end: customer.scheduledEndDate,\n        color: '#4CAF50',\n        extendedProps: {\n          type: 'route',\n          routeId: route._id,\n          customerId: customer._id\n        }\n      })));\n      setEvents([...calendarEvents, ...routeEvents]);\n    } catch (error) {\n      console.error('Error loading events:', error);\n      setError('Failed to load calendar events. Please try refreshing the page.');\n    }\n  };\n  const handleEventDrop = async info => {\n    const {\n      event\n    } = info;\n    try {\n      const updatedEvent = await updateCalendarEvent({\n        id: event.id,\n        start: event.start,\n        end: event.end\n      });\n      setEvents(prevEvents => prevEvents.map(e => e.id === updatedEvent.id ? updatedEvent : e));\n      const {\n        routeId,\n        customerId\n      } = event.extendedProps;\n      const updatedRoutes = routes.map(route => {\n        if (route._id === routeId) {\n          return {\n            ...route,\n            customers: route.customers.map(customer => customer._id === customerId ? {\n              ...customer,\n              scheduledDate: event.start,\n              scheduledEndDate: event.end\n            } : customer)\n          };\n        }\n        return route;\n      });\n      setRoutes(updatedRoutes);\n      await saveRoute(updatedRoutes.find(r => r._id === routeId));\n    } catch (error) {\n      console.error('Error updating event:', error);\n      info.revert();\n    }\n  };\n  const handleEventReceive = async info => {\n    const {\n      event\n    } = info;\n    const jobId = event.id;\n    const startDate = event.start;\n    try {\n      await updateJob(jobId, {\n        scheduledDate: startDate\n      });\n      setEvents(prevEvents => [...prevEvents, {\n        id: jobId,\n        title: event.title,\n        start: startDate,\n        end: new Date(startDate.getTime() + 60 * 60 * 1000),\n        color: '#4CAF50',\n        extendedProps: {\n          type: 'job',\n          jobId\n        }\n      }]);\n    } catch (error) {\n      console.error('Error scheduling job:', error);\n      info.revert();\n    }\n  };\n  const handleEventClick = info => {\n    const {\n      event\n    } = info;\n    alert(`Event: ${event.title}\\nStart: ${event.start}\\nEnd: ${event.end}`);\n  };\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-red-500\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-container\",\n    children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      initialView: \"dayGridMonth\",\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      },\n      editable: true,\n      droppable: true,\n      events: events,\n      eventDrop: handleEventDrop,\n      eventReceive: handleEventReceive,\n      eventClick: handleEventClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(CalendarView, \"wGY3tPhDnrfqd5L05Z5va7N4Lyw=\");\n_c = CalendarView;\nexport default CalendarView;\nvar _c;\n$RefreshReg$(_c, \"CalendarView\");","map":{"version":3,"names":["React","useState","useEffect","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","fetchCalendarEvents","updateCalendarEvent","updateJob","jsxDEV","_jsxDEV","CalendarView","routes","_s","events","setEvents","error","setError","loadEvents","calendarEvents","routeEvents","flatMap","route","customers","map","customer","title","name","start","scheduledDate","end","scheduledEndDate","color","extendedProps","type","routeId","_id","customerId","console","handleEventDrop","info","event","updatedEvent","id","prevEvents","e","updatedRoutes","setRoutes","saveRoute","find","r","revert","handleEventReceive","jobId","startDate","Date","getTime","handleEventClick","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","plugins","initialView","headerToolbar","left","center","right","editable","droppable","eventDrop","eventReceive","eventClick","_c","$RefreshReg$"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/pages/BuildRoutes/CalendarView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport { fetchCalendarEvents, updateCalendarEvent, updateJob } from './api';\r\n\r\nconst CalendarView = ({ routes }) => {\r\n  const [events, setEvents] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    loadEvents();\r\n  }, [routes]);\r\n\r\n  const loadEvents = async () => {\r\n    try {\r\n      const calendarEvents = await fetchCalendarEvents();\r\n      const routeEvents = routes.flatMap(route => \r\n        route.customers.map(customer => ({\r\n          title: `${route.name}: ${customer.name}`,\r\n          start: customer.scheduledDate,\r\n          end: customer.scheduledEndDate,\r\n          color: '#4CAF50',\r\n          extendedProps: { type: 'route', routeId: route._id, customerId: customer._id }\r\n        }))\r\n      );\r\n      setEvents([...calendarEvents, ...routeEvents]);\r\n    } catch (error) {\r\n      console.error('Error loading events:', error);\r\n      setError('Failed to load calendar events. Please try refreshing the page.');\r\n    }\r\n  };\r\n\r\n  const handleEventDrop = async (info) => {\r\n    const { event } = info;\r\n    try {\r\n      const updatedEvent = await updateCalendarEvent({\r\n        id: event.id,\r\n        start: event.start,\r\n        end: event.end,\r\n      });\r\n      setEvents(prevEvents => \r\n        prevEvents.map(e => e.id === updatedEvent.id ? updatedEvent : e)\r\n      );\r\n      const { routeId, customerId } = event.extendedProps;\r\n      const updatedRoutes = routes.map(route => {\r\n        if (route._id === routeId) {\r\n          return {\r\n            ...route,\r\n            customers: route.customers.map(customer => \r\n              customer._id === customerId \r\n                ? { ...customer, scheduledDate: event.start, scheduledEndDate: event.end }\r\n                : customer\r\n            )\r\n          };\r\n        }\r\n        return route;\r\n      });\r\n      setRoutes(updatedRoutes);\r\n      await saveRoute(updatedRoutes.find(r => r._id === routeId));\r\n    } catch (error) {\r\n      console.error('Error updating event:', error);\r\n      info.revert();\r\n    }\r\n  };\r\n\r\n  const handleEventReceive = async (info) => {\r\n    const { event } = info;\r\n    const jobId = event.id;\r\n    const startDate = event.start;\r\n  \r\n    try {\r\n      await updateJob(jobId, { scheduledDate: startDate });\r\n      setEvents(prevEvents => [...prevEvents, {\r\n        id: jobId,\r\n        title: event.title,\r\n        start: startDate,\r\n        end: new Date(startDate.getTime() + 60 * 60 * 1000),\r\n        color: '#4CAF50',\r\n        extendedProps: { type: 'job', jobId }\r\n      }]);\r\n    } catch (error) {\r\n      console.error('Error scheduling job:', error);\r\n      info.revert();\r\n    }\r\n  };\r\n\r\n  const handleEventClick = (info) => {\r\n    const { event } = info;\r\n    alert(`Event: ${event.title}\\nStart: ${event.start}\\nEnd: ${event.end}`);\r\n  };\r\n\r\n  if (error) return <div className=\"text-red-500\">{error}</div>;\r\n\r\n  return (\r\n    <div className=\"calendar-container\">\r\n      <FullCalendar\r\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n        initialView=\"dayGridMonth\"\r\n        headerToolbar={{\r\n          left: 'prev,next today',\r\n          center: 'title',\r\n          right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n        }}\r\n        editable={true}\r\n        droppable={true}\r\n        events={events}\r\n        eventDrop={handleEventDrop}\r\n        eventReceive={handleEventReceive}\r\n        eventClick={handleEventClick}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalendarView;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,cAAc,MAAM,wBAAwB;AACnD,OAAOC,iBAAiB,MAAM,2BAA2B;AACzD,SAASC,mBAAmB,EAAEC,mBAAmB,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5E,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACdiB,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACN,MAAM,CAAC,CAAC;EAEZ,MAAMM,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,cAAc,GAAG,MAAMb,mBAAmB,CAAC,CAAC;MAClD,MAAMc,WAAW,GAAGR,MAAM,CAACS,OAAO,CAACC,KAAK,IACtCA,KAAK,CAACC,SAAS,CAACC,GAAG,CAACC,QAAQ,KAAK;QAC/BC,KAAK,EAAE,GAAGJ,KAAK,CAACK,IAAI,KAAKF,QAAQ,CAACE,IAAI,EAAE;QACxCC,KAAK,EAAEH,QAAQ,CAACI,aAAa;QAC7BC,GAAG,EAAEL,QAAQ,CAACM,gBAAgB;QAC9BC,KAAK,EAAE,SAAS;QAChBC,aAAa,EAAE;UAAEC,IAAI,EAAE,OAAO;UAAEC,OAAO,EAAEb,KAAK,CAACc,GAAG;UAAEC,UAAU,EAAEZ,QAAQ,CAACW;QAAI;MAC/E,CAAC,CAAC,CACJ,CAAC;MACDrB,SAAS,CAAC,CAAC,GAAGI,cAAc,EAAE,GAAGC,WAAW,CAAC,CAAC;IAChD,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdsB,OAAO,CAACtB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CC,QAAQ,CAAC,iEAAiE,CAAC;IAC7E;EACF,CAAC;EAED,MAAMsB,eAAe,GAAG,MAAOC,IAAI,IAAK;IACtC,MAAM;MAAEC;IAAM,CAAC,GAAGD,IAAI;IACtB,IAAI;MACF,MAAME,YAAY,GAAG,MAAMnC,mBAAmB,CAAC;QAC7CoC,EAAE,EAAEF,KAAK,CAACE,EAAE;QACZf,KAAK,EAAEa,KAAK,CAACb,KAAK;QAClBE,GAAG,EAAEW,KAAK,CAACX;MACb,CAAC,CAAC;MACFf,SAAS,CAAC6B,UAAU,IAClBA,UAAU,CAACpB,GAAG,CAACqB,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKD,YAAY,CAACC,EAAE,GAAGD,YAAY,GAAGG,CAAC,CACjE,CAAC;MACD,MAAM;QAAEV,OAAO;QAAEE;MAAW,CAAC,GAAGI,KAAK,CAACR,aAAa;MACnD,MAAMa,aAAa,GAAGlC,MAAM,CAACY,GAAG,CAACF,KAAK,IAAI;QACxC,IAAIA,KAAK,CAACc,GAAG,KAAKD,OAAO,EAAE;UACzB,OAAO;YACL,GAAGb,KAAK;YACRC,SAAS,EAAED,KAAK,CAACC,SAAS,CAACC,GAAG,CAACC,QAAQ,IACrCA,QAAQ,CAACW,GAAG,KAAKC,UAAU,GACvB;cAAE,GAAGZ,QAAQ;cAAEI,aAAa,EAAEY,KAAK,CAACb,KAAK;cAAEG,gBAAgB,EAAEU,KAAK,CAACX;YAAI,CAAC,GACxEL,QACN;UACF,CAAC;QACH;QACA,OAAOH,KAAK;MACd,CAAC,CAAC;MACFyB,SAAS,CAACD,aAAa,CAAC;MACxB,MAAME,SAAS,CAACF,aAAa,CAACG,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACd,GAAG,KAAKD,OAAO,CAAC,CAAC;IAC7D,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACdsB,OAAO,CAACtB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CwB,IAAI,CAACW,MAAM,CAAC,CAAC;IACf;EACF,CAAC;EAED,MAAMC,kBAAkB,GAAG,MAAOZ,IAAI,IAAK;IACzC,MAAM;MAAEC;IAAM,CAAC,GAAGD,IAAI;IACtB,MAAMa,KAAK,GAAGZ,KAAK,CAACE,EAAE;IACtB,MAAMW,SAAS,GAAGb,KAAK,CAACb,KAAK;IAE7B,IAAI;MACF,MAAMpB,SAAS,CAAC6C,KAAK,EAAE;QAAExB,aAAa,EAAEyB;MAAU,CAAC,CAAC;MACpDvC,SAAS,CAAC6B,UAAU,IAAI,CAAC,GAAGA,UAAU,EAAE;QACtCD,EAAE,EAAEU,KAAK;QACT3B,KAAK,EAAEe,KAAK,CAACf,KAAK;QAClBE,KAAK,EAAE0B,SAAS;QAChBxB,GAAG,EAAE,IAAIyB,IAAI,CAACD,SAAS,CAACE,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QACnDxB,KAAK,EAAE,SAAS;QAChBC,aAAa,EAAE;UAAEC,IAAI,EAAE,KAAK;UAAEmB;QAAM;MACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOrC,KAAK,EAAE;MACdsB,OAAO,CAACtB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CwB,IAAI,CAACW,MAAM,CAAC,CAAC;IACf;EACF,CAAC;EAED,MAAMM,gBAAgB,GAAIjB,IAAI,IAAK;IACjC,MAAM;MAAEC;IAAM,CAAC,GAAGD,IAAI;IACtBkB,KAAK,CAAC,UAAUjB,KAAK,CAACf,KAAK,YAAYe,KAAK,CAACb,KAAK,UAAUa,KAAK,CAACX,GAAG,EAAE,CAAC;EAC1E,CAAC;EAED,IAAId,KAAK,EAAE,oBAAON,OAAA;IAAKiD,SAAS,EAAC,cAAc;IAAAC,QAAA,EAAE5C;EAAK;IAAA6C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAE7D,oBACEtD,OAAA;IAAKiD,SAAS,EAAC,oBAAoB;IAAAC,QAAA,eACjClD,OAAA,CAACR,YAAY;MACX+D,OAAO,EAAE,CAAC9D,aAAa,EAAEC,cAAc,EAAEC,iBAAiB,CAAE;MAC5D6D,WAAW,EAAC,cAAc;MAC1BC,aAAa,EAAE;QACbC,IAAI,EAAE,iBAAiB;QACvBC,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE;MACT,CAAE;MACFC,QAAQ,EAAE,IAAK;MACfC,SAAS,EAAE,IAAK;MAChB1D,MAAM,EAAEA,MAAO;MACf2D,SAAS,EAAElC,eAAgB;MAC3BmC,YAAY,EAAEtB,kBAAmB;MACjCuB,UAAU,EAAElB;IAAiB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACnD,EAAA,CA3GIF,YAAY;AAAAiE,EAAA,GAAZjE,YAAY;AA6GlB,eAAeA,YAAY;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}