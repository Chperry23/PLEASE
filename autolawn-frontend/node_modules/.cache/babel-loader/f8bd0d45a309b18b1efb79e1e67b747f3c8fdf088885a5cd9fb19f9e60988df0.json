{"ast":null,"code":"import axiosInstance from '../utils/axiosInstance';\nexport const fetchJobs = async () => {\n  try {\n    const response = await axiosInstance.get('/jobs');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching jobs:', error);\n    return [];\n  }\n};\nexport const fetchCustomers = async () => {\n  try {\n    const response = await axiosInstance.get('/customers');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching customers:', error);\n    return [];\n  }\n};\nexport const fetchEmployees = async () => {\n  try {\n    const response = await axiosInstance.get('/employees');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching employees:', error);\n    return [];\n  }\n};\nexport const fetchAnalytics = async (timeRange, customRange = null) => {\n  try {\n    const [jobs, customers] = await Promise.all([fetchJobs(), fetchCustomers()]);\n    const endDate = new Date();\n    const startDate = new Date(endDate);\n    startDate.setDate(endDate.getDate() - parseInt(timeRange));\n    const filteredJobs = jobs.filter(job => {\n      const jobDate = new Date(job.date);\n      return jobDate >= startDate && jobDate <= endDate;\n    });\n\n    // Revenue Over Time\n    const revenueOverTime = filteredJobs.reduce((acc, job) => {\n      const date = new Date(job.date).toISOString().split('T')[0];\n      acc[date] = (acc[date] || 0) + job.price;\n      return acc;\n    }, {});\n\n    // Job Status Distribution\n    const jobStatusDistribution = filteredJobs.reduce((acc, job) => {\n      acc[job.status] = (acc[job.status] || 0) + 1;\n      return acc;\n    }, {});\n\n    // Top Services\n    const topServices = filteredJobs.reduce((acc, job) => {\n      acc[job.serviceType] = (acc[job.serviceType] || 0) + job.price;\n      return acc;\n    }, {});\n\n    // Calculate averages\n    const totalDuration = filteredJobs.reduce((sum, job) => sum + (job.estimatedDuration || 0), 0);\n    const totalRevenue = filteredJobs.reduce((sum, job) => sum + job.price, 0);\n    const averageJobDuration = filteredJobs.length > 0 ? totalDuration / filteredJobs.length : 0;\n    const averageHourlyRate = totalDuration > 0 ? totalRevenue / totalDuration * 60 : 0;\n    return {\n      revenueOverTime: Object.entries(revenueOverTime).map(([date, revenue]) => ({\n        date,\n        revenue\n      })),\n      jobStatusDistribution: {\n        labels: Object.keys(jobStatusDistribution),\n        data: Object.values(jobStatusDistribution)\n      },\n      topServices: {\n        labels: Object.keys(topServices).slice(0, 5),\n        data: Object.values(topServices).slice(0, 5)\n      },\n      averageJobDuration,\n      averageHourlyRate,\n      totalJobs: jobs.length,\n      totalCustomers: customers.length\n    };\n  } catch (error) {\n    console.error('Error fetching analytics:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axiosInstance","fetchJobs","response","get","data","error","console","fetchCustomers","fetchEmployees","fetchAnalytics","timeRange","customRange","jobs","customers","Promise","all","endDate","Date","startDate","setDate","getDate","parseInt","filteredJobs","filter","job","jobDate","date","revenueOverTime","reduce","acc","toISOString","split","price","jobStatusDistribution","status","topServices","serviceType","totalDuration","sum","estimatedDuration","totalRevenue","averageJobDuration","length","averageHourlyRate","Object","entries","map","revenue","labels","keys","values","slice","totalJobs","totalCustomers"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/api/dashboardApi.js"],"sourcesContent":["import axiosInstance from '../utils/axiosInstance';\r\n\r\nexport const fetchJobs = async () => {\r\n  try {\r\n    const response = await axiosInstance.get('/jobs');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching jobs:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const fetchCustomers = async () => {\r\n  try {\r\n    const response = await axiosInstance.get('/customers');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching customers:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const fetchEmployees = async () => {\r\n  try {\r\n    const response = await axiosInstance.get('/employees');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching employees:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const fetchAnalytics = async (timeRange, customRange = null) => {\r\n  try {\r\n    const [jobs, customers] = await Promise.all([fetchJobs(), fetchCustomers()]);\r\n\r\n    const endDate = new Date();\r\n    const startDate = new Date(endDate);\r\n    startDate.setDate(endDate.getDate() - parseInt(timeRange));\r\n\r\n    const filteredJobs = jobs.filter(job => {\r\n      const jobDate = new Date(job.date);\r\n      return jobDate >= startDate && jobDate <= endDate;\r\n    });\r\n\r\n    // Revenue Over Time\r\n    const revenueOverTime = filteredJobs.reduce((acc, job) => {\r\n      const date = new Date(job.date).toISOString().split('T')[0];\r\n      acc[date] = (acc[date] || 0) + job.price;\r\n      return acc;\r\n    }, {});\r\n\r\n    // Job Status Distribution\r\n    const jobStatusDistribution = filteredJobs.reduce((acc, job) => {\r\n      acc[job.status] = (acc[job.status] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    // Top Services\r\n    const topServices = filteredJobs.reduce((acc, job) => {\r\n      acc[job.serviceType] = (acc[job.serviceType] || 0) + job.price;\r\n      return acc;\r\n    }, {});\r\n\r\n    // Calculate averages\r\n    const totalDuration = filteredJobs.reduce((sum, job) => sum + (job.estimatedDuration || 0), 0);\r\n    const totalRevenue = filteredJobs.reduce((sum, job) => sum + job.price, 0);\r\n    const averageJobDuration = filteredJobs.length > 0 ? totalDuration / filteredJobs.length : 0;\r\n    const averageHourlyRate = totalDuration > 0 ? (totalRevenue / totalDuration) * 60 : 0;\r\n\r\n    return {\r\n      revenueOverTime: Object.entries(revenueOverTime).map(([date, revenue]) => ({ date, revenue })),\r\n      jobStatusDistribution: {\r\n        labels: Object.keys(jobStatusDistribution),\r\n        data: Object.values(jobStatusDistribution),\r\n      },\r\n      topServices: {\r\n        labels: Object.keys(topServices).slice(0, 5),\r\n        data: Object.values(topServices).slice(0, 5),\r\n      },\r\n      averageJobDuration,\r\n      averageHourlyRate,\r\n      totalJobs: jobs.length,\r\n      totalCustomers: customers.length,\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching analytics:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}