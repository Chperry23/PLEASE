{"ast":null,"code":"var _jsxFileName = \"C:\\\\AUTOLAWN\\\\autolawn-frontend\\\\src\\\\components\\\\CustomerMap.js\",\n  _s = $RefreshSig$();\n// src/components/CustomerMap.js\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, Marker, Polyline } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '100%'\n};\nconst defaultCenter = {\n  lat: 0,\n  lng: 0\n};\nconst CustomerMap = ({\n  customers,\n  routes\n}) => {\n  _s();\n  const [center, setCenter] = useState(defaultCenter);\n  useEffect(() => {\n    if (customers.length > 0) {\n      const lats = customers.map(c => {\n        var _c$address;\n        return (_c$address = c.address) === null || _c$address === void 0 ? void 0 : _c$address.lat;\n      }).filter(lat => lat != null);\n      const lngs = customers.map(c => {\n        var _c$address2;\n        return (_c$address2 = c.address) === null || _c$address2 === void 0 ? void 0 : _c$address2.lng;\n      }).filter(lng => lng != null);\n      if (lats.length > 0 && lngs.length > 0) {\n        setCenter({\n          lat: (Math.min(...lats) + Math.max(...lats)) / 2,\n          lng: (Math.min(...lngs) + Math.max(...lngs)) / 2\n        });\n      }\n    }\n  }, [customers]);\n  const getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: \"YOUR_GOOGLE_MAPS_API_KEY\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 10,\n      children: [customers.map(customer => {\n        var _customer$address, _customer$address2;\n        return ((_customer$address = customer.address) === null || _customer$address === void 0 ? void 0 : _customer$address.lat) && ((_customer$address2 = customer.address) === null || _customer$address2 === void 0 ? void 0 : _customer$address2.lng) && /*#__PURE__*/_jsxDEV(Marker, {\n          position: {\n            lat: customer.address.lat,\n            lng: customer.address.lng\n          },\n          title: customer.name\n        }, customer._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this);\n      }), routes.map(route => /*#__PURE__*/_jsxDEV(Polyline, {\n        path: route.customers.filter(c => {\n          var _c$address3, _c$address4;\n          return ((_c$address3 = c.address) === null || _c$address3 === void 0 ? void 0 : _c$address3.lat) && ((_c$address4 = c.address) === null || _c$address4 === void 0 ? void 0 : _c$address4.lng);\n        }).map(c => ({\n          lat: c.address.lat,\n          lng: c.address.lng\n        })),\n        options: {\n          strokeColor: getRandomColor(),\n          strokeOpacity: 0.8,\n          strokeWeight: 2\n        }\n      }, route._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomerMap, \"YSI8zrwIJmD1nP7udH7p0rLH1Hw=\");\n_c = CustomerMap;\nexport default CustomerMap;\nvar _c;\n$RefreshReg$(_c, \"CustomerMap\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","Marker","Polyline","jsxDEV","_jsxDEV","containerStyle","width","height","defaultCenter","lat","lng","CustomerMap","customers","routes","_s","center","setCenter","length","lats","map","c","_c$address","address","filter","lngs","_c$address2","Math","min","max","getRandomColor","letters","color","i","floor","random","googleMapsApiKey","children","mapContainerStyle","zoom","customer","_customer$address","_customer$address2","position","title","name","_id","fileName","_jsxFileName","lineNumber","columnNumber","route","path","_c$address3","_c$address4","options","strokeColor","strokeOpacity","strokeWeight","_c","$RefreshReg$"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/components/CustomerMap.js"],"sourcesContent":["// src/components/CustomerMap.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { GoogleMap, LoadScript, Marker, Polyline } from '@react-google-maps/api';\r\n\r\nconst containerStyle = {\r\n  width: '100%',\r\n  height: '100%'\r\n};\r\n\r\nconst defaultCenter = {\r\n  lat: 0,\r\n  lng: 0\r\n};\r\n\r\nconst CustomerMap = ({ customers, routes }) => {\r\n  const [center, setCenter] = useState(defaultCenter);\r\n\r\n  useEffect(() => {\r\n    if (customers.length > 0) {\r\n      const lats = customers.map(c => c.address?.lat).filter(lat => lat != null);\r\n      const lngs = customers.map(c => c.address?.lng).filter(lng => lng != null);\r\n      \r\n      if (lats.length > 0 && lngs.length > 0) {\r\n        setCenter({\r\n          lat: (Math.min(...lats) + Math.max(...lats)) / 2,\r\n          lng: (Math.min(...lngs) + Math.max(...lngs)) / 2\r\n        });\r\n      }\r\n    }\r\n  }, [customers]);\r\n\r\n  const getRandomColor = () => {\r\n    const letters = '0123456789ABCDEF';\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  };\r\n\r\n  return (\r\n    <LoadScript googleMapsApiKey=\"YOUR_GOOGLE_MAPS_API_KEY\">\r\n      <GoogleMap\r\n        mapContainerStyle={containerStyle}\r\n        center={center}\r\n        zoom={10}\r\n      >\r\n        {customers.map((customer) => (\r\n          customer.address?.lat && customer.address?.lng && (\r\n            <Marker\r\n              key={customer._id}\r\n              position={{\r\n                lat: customer.address.lat,\r\n                lng: customer.address.lng\r\n              }}\r\n              title={customer.name}\r\n            />\r\n          )\r\n        ))}\r\n        {routes.map((route) => (\r\n          <Polyline\r\n            key={route._id}\r\n            path={route.customers\r\n              .filter(c => c.address?.lat && c.address?.lng)\r\n              .map(c => ({ lat: c.address.lat, lng: c.address.lng }))}\r\n            options={{\r\n              strokeColor: getRandomColor(),\r\n              strokeOpacity: 0.8,\r\n              strokeWeight: 2,\r\n            }}\r\n          />\r\n        ))}\r\n      </GoogleMap>\r\n    </LoadScript>\r\n  );\r\n};\r\n\r\nexport default CustomerMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}