{"ast":null,"code":"var _jsxFileName = \"C:\\\\AUTOLAWN\\\\autolawn-frontend\\\\src\\\\components\\\\CustomerMap.js\",\n  _s = $RefreshSig$();\n// components/CustomerMap.js\n\nimport React, { useEffect, useRef } from 'react';\nimport { Loader } from '@googlemaps/js-api-loader';\n/* global google */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomerMap = ({\n  routes\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  useEffect(() => {\n    const loader = new Loader({\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      version: \"weekly\"\n    });\n    loader.load().then(() => {\n      const map = new google.maps.Map(mapRef.current, {\n        center: {\n          lat: 0,\n          lng: 0\n        },\n        zoom: 2,\n        styles: [{\n          elementType: \"geometry\",\n          stylers: [{\n            color: \"#242f3e\"\n          }]\n        }, {\n          elementType: \"labels.text.stroke\",\n          stylers: [{\n            color: \"#242f3e\"\n          }]\n        }, {\n          elementType: \"labels.text.fill\",\n          stylers: [{\n            color: \"#746855\"\n          }]\n        }, {\n          featureType: \"administrative.locality\",\n          elementType: \"labels.text.fill\",\n          stylers: [{\n            color: \"#d59563\"\n          }]\n        }, {\n          featureType: \"poi.park\",\n          elementType: \"geometry\",\n          stylers: [{\n            color: \"#263c3f\"\n          }]\n        }, {\n          featureType: \"poi.park\",\n          elementType: \"labels.text.fill\",\n          stylers: [{\n            color: \"#6b9a76\"\n          }]\n        }, {\n          featureType: \"road\",\n          elementType: \"geometry\",\n          stylers: [{\n            color: \"#38414e\"\n          }]\n        }, {\n          featureType: \"road\",\n          elementType: \"geometry.stroke\",\n          stylers: [{\n            color: \"#212a37\"\n          }]\n        }, {\n          featureType: \"road\",\n          elementType: \"labels.text.fill\",\n          stylers: [{\n            color: \"#9ca5b3\"\n          }]\n        }, {\n          featureType: \"water\",\n          elementType: \"geometry\",\n          stylers: [{\n            color: \"#17263c\"\n          }]\n        }, {\n          featureType: \"water\",\n          elementType: \"labels.text.fill\",\n          stylers: [{\n            color: \"#515c6d\"\n          }]\n        }]\n      });\n      const bounds = new google.maps.LatLngBounds();\n      let hasValidCoordinates = false;\n      routes.forEach((route, routeIndex) => {\n        if (route.jobs && Array.isArray(route.jobs)) {\n          const routeCoordinates = route.jobs.filter(job => job.customer && job.customer.address && job.customer.address.lat && job.customer.address.lng).map(job => ({\n            lat: parseFloat(job.customer.address.lat),\n            lng: parseFloat(job.customer.address.lng)\n          }));\n          if (routeCoordinates.length > 0) {\n            const routePath = new google.maps.Polyline({\n              path: routeCoordinates,\n              geodesic: true,\n              strokeColor: getRouteColor(routeIndex),\n              strokeOpacity: 1.0,\n              strokeWeight: 2\n            });\n            routePath.setMap(map);\n            route.jobs.forEach((job, jobIndex) => {\n              if (job.customer && job.customer.address && job.customer.address.lat && job.customer.address.lng) {\n                const position = new google.maps.LatLng(parseFloat(job.customer.address.lat), parseFloat(job.customer.address.lng));\n                const marker = new google.maps.Marker({\n                  position: position,\n                  map: map,\n                  title: `${job.title} - ${job.customer.name}`,\n                  label: `${routeIndex + 1}.${jobIndex + 1}`\n                });\n                bounds.extend(position);\n                hasValidCoordinates = true;\n                const infoWindow = new google.maps.InfoWindow({\n                  content: `\n                      <div style=\"color: #333;\">\n                        <h3 style=\"color: #1a202c;\">${job.title}</h3>\n                        <p><strong>Customer:</strong> ${job.customer.name}</p>\n                        <p><strong>Address:</strong> ${job.customer.address.street}, ${job.customer.address.city}</p>\n                        <p><strong>Scheduled:</strong> ${job.scheduledDate ? new Date(job.scheduledDate).toLocaleString() : 'Not scheduled'}</p>\n                        <p><strong>Price:</strong> $${job.price}</p>\n                      </div>\n                    `\n                });\n                marker.addListener('click', () => {\n                  infoWindow.open(map, marker);\n                });\n              }\n            });\n          }\n        }\n      });\n      if (hasValidCoordinates) {\n        map.fitBounds(bounds);\n      } else {\n        map.setCenter({\n          lat: 0,\n          lng: 0\n        });\n        map.setZoom(2);\n      }\n    });\n  }, [routes]);\n  const getRouteColor = index => {\n    const colors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF', '#00FFFF'];\n    return colors[index % colors.length];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        width: '100%',\n        height: '100%',\n        minHeight: '400px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this), routes.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center mt-4 text-gray-400\",\n      children: \"No routes available to display on the map.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 7\n  }, this);\n};\n_s(CustomerMap, \"9mn7MMe4fPaZ50ApsOpRWF2HbFg=\");\n_c = CustomerMap;\nexport default CustomerMap;\nvar _c;\n$RefreshReg$(_c, \"CustomerMap\");","map":{"version":3,"names":["React","useEffect","useRef","Loader","jsxDEV","_jsxDEV","CustomerMap","routes","_s","mapRef","loader","apiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","version","load","then","map","google","maps","Map","current","center","lat","lng","zoom","styles","elementType","stylers","color","featureType","bounds","LatLngBounds","hasValidCoordinates","forEach","route","routeIndex","jobs","Array","isArray","routeCoordinates","filter","job","customer","address","parseFloat","length","routePath","Polyline","path","geodesic","strokeColor","getRouteColor","strokeOpacity","strokeWeight","setMap","jobIndex","position","LatLng","marker","Marker","title","name","label","extend","infoWindow","InfoWindow","content","street","city","scheduledDate","Date","toLocaleString","price","addListener","open","fitBounds","setCenter","setZoom","index","colors","children","ref","style","width","height","minHeight","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/components/CustomerMap.js"],"sourcesContent":["// components/CustomerMap.js\r\n\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { Loader } from '@googlemaps/js-api-loader';\r\n/* global google */\r\nconst CustomerMap = ({ routes }) => {\r\n  const mapRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const loader = new Loader({\r\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n      version: \"weekly\",\r\n    });\r\n\r\n    loader.load().then(() => {\r\n      const map = new google.maps.Map(mapRef.current, {\r\n        center: { lat: 0, lng: 0 },\r\n        zoom: 2,\r\n        styles: [\r\n          { elementType: \"geometry\", stylers: [{ color: \"#242f3e\" }] },\r\n          { elementType: \"labels.text.stroke\", stylers: [{ color: \"#242f3e\" }] },\r\n          { elementType: \"labels.text.fill\", stylers: [{ color: \"#746855\" }] },\r\n          {\r\n            featureType: \"administrative.locality\",\r\n            elementType: \"labels.text.fill\",\r\n            stylers: [{ color: \"#d59563\" }],\r\n          },\r\n            {\r\n              featureType: \"poi.park\",\r\n              elementType: \"geometry\",\r\n              stylers: [{ color: \"#263c3f\" }],\r\n            },\r\n            {\r\n              featureType: \"poi.park\",\r\n              elementType: \"labels.text.fill\",\r\n              stylers: [{ color: \"#6b9a76\" }],\r\n            },\r\n            {\r\n              featureType: \"road\",\r\n              elementType: \"geometry\",\r\n              stylers: [{ color: \"#38414e\" }],\r\n            },\r\n            {\r\n              featureType: \"road\",\r\n              elementType: \"geometry.stroke\",\r\n              stylers: [{ color: \"#212a37\" }],\r\n            },\r\n            {\r\n              featureType: \"road\",\r\n              elementType: \"labels.text.fill\",\r\n              stylers: [{ color: \"#9ca5b3\" }],\r\n            },\r\n            {\r\n              featureType: \"water\",\r\n              elementType: \"geometry\",\r\n              stylers: [{ color: \"#17263c\" }],\r\n            },\r\n            {\r\n              featureType: \"water\",\r\n              elementType: \"labels.text.fill\",\r\n              stylers: [{ color: \"#515c6d\" }],\r\n            },\r\n          ],\r\n        });\r\n  \r\n        const bounds = new google.maps.LatLngBounds();\r\n        let hasValidCoordinates = false;\r\n  \r\n        routes.forEach((route, routeIndex) => {\r\n          if (route.jobs && Array.isArray(route.jobs)) {\r\n            const routeCoordinates = route.jobs\r\n              .filter(job => job.customer && job.customer.address && \r\n                             job.customer.address.lat && job.customer.address.lng)\r\n              .map(job => ({\r\n                lat: parseFloat(job.customer.address.lat),\r\n                lng: parseFloat(job.customer.address.lng)\r\n              }));\r\n  \r\n            if (routeCoordinates.length > 0) {\r\n              const routePath = new google.maps.Polyline({\r\n                path: routeCoordinates,\r\n                geodesic: true,\r\n                strokeColor: getRouteColor(routeIndex),\r\n                strokeOpacity: 1.0,\r\n                strokeWeight: 2\r\n              });\r\n  \r\n              routePath.setMap(map);\r\n  \r\n              route.jobs.forEach((job, jobIndex) => {\r\n                if (job.customer && job.customer.address && \r\n                    job.customer.address.lat && job.customer.address.lng) {\r\n                  const position = new google.maps.LatLng(\r\n                    parseFloat(job.customer.address.lat),\r\n                    parseFloat(job.customer.address.lng)\r\n                  );\r\n  \r\n                  const marker = new google.maps.Marker({\r\n                    position: position,\r\n                    map: map,\r\n                    title: `${job.title} - ${job.customer.name}`,\r\n                    label: `${routeIndex + 1}.${jobIndex + 1}`\r\n                  });\r\n  \r\n                  bounds.extend(position);\r\n                  hasValidCoordinates = true;\r\n  \r\n                  const infoWindow = new google.maps.InfoWindow({\r\n                    content: `\r\n                      <div style=\"color: #333;\">\r\n                        <h3 style=\"color: #1a202c;\">${job.title}</h3>\r\n                        <p><strong>Customer:</strong> ${job.customer.name}</p>\r\n                        <p><strong>Address:</strong> ${job.customer.address.street}, ${job.customer.address.city}</p>\r\n                        <p><strong>Scheduled:</strong> ${job.scheduledDate ? new Date(job.scheduledDate).toLocaleString() : 'Not scheduled'}</p>\r\n                        <p><strong>Price:</strong> $${job.price}</p>\r\n                      </div>\r\n                    `\r\n                  });\r\n  \r\n                  marker.addListener('click', () => {\r\n                    infoWindow.open(map, marker);\r\n                  });\r\n                }\r\n              });\r\n            }\r\n          }\r\n        });\r\n  \r\n        if (hasValidCoordinates) {\r\n          map.fitBounds(bounds);\r\n        } else {\r\n          map.setCenter({ lat: 0, lng: 0 });\r\n          map.setZoom(2);\r\n        }\r\n      });\r\n    }, [routes]);\r\n  \r\n    const getRouteColor = (index) => {\r\n      const colors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF', '#00FFFF'];\r\n      return colors[index % colors.length];\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <div ref={mapRef} style={{ width: '100%', height: '100%', minHeight: '400px' }}></div>\r\n        {routes.length === 0 && (\r\n          <p className=\"text-center mt-4 text-gray-400\">No routes available to display on the map.</p>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default CustomerMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}