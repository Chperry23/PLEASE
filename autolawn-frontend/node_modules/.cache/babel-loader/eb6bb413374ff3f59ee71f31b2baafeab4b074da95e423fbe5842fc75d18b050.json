{"ast":null,"code":"var _jsxFileName = \"C:\\\\AUTOLAWN\\\\autolawn-frontend\\\\src\\\\pages\\\\BuildRoutes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ChevronLeftIcon, ChevronRightIcon, PlusIcon, TrashIcon, ChevronDownIcon, ChevronUpIcon } from '@heroicons/react/24/outline';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { CheckIcon } from '@heroicons/react/24/solid';\nimport { API_BASE_URL, DAYS_OF_WEEK, defaultRoutes, validateRoutesStructure, fetchWithAuth } from '../components/utils';\nimport Header from '../components/Header';\nimport debounce from 'lodash/debounce';\nimport { ClipLoader } from 'react-spinners';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BuildRoutes = () => {\n  _s();\n  const [routes, setRoutes] = useState(defaultRoutes);\n  const [jobPool, setJobPool] = useState([]);\n  const [selectedDay, setSelectedDay] = useState(DAYS_OF_WEEK[0]);\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(''); // New state for success messages\n  const [visibleRoutesRange, setVisibleRoutesRange] = useState({\n    start: 0,\n    end: 3\n  });\n  const [expandedJobs, setExpandedJobs] = useState({});\n  const [selectedJobs, setSelectedJobs] = useState([]);\n  const [employees, setEmployees] = useState([]);\n  const [crews, setCrews] = useState([]);\n  const [confirmDialog, setConfirmDialog] = useState({\n    isOpen: false,\n    routeIndex: null\n  });\n  const [showRouteNameModal, setShowRouteNameModal] = useState(false);\n  const [newRouteName, setNewRouteName] = useState('');\n  const initializeData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const [fetchedRoutesResponse, fetchedJobsResponse, fetchedEmployeesResponse, fetchedCrewsResponse] = await Promise.all([fetchWithAuth('/routes'), fetchWithAuth('/jobs'), fetchWithAuth('/employees'), fetchWithAuth('/crews')]);\n      const fetchedRoutes = (fetchedRoutesResponse === null || fetchedRoutesResponse === void 0 ? void 0 : fetchedRoutesResponse.routes) || defaultRoutes;\n      const fetchedJobs = fetchedJobsResponse || [];\n      const fetchedEmployees = fetchedEmployeesResponse || [];\n      const fetchedCrews = fetchedCrewsResponse || [];\n      const validatedRoutes = validateRoutesStructure(fetchedRoutes);\n\n      // Create a job map for easy lookup\n      const jobMap = {};\n      fetchedJobs.forEach(job => {\n        jobMap[job._id] = job;\n      });\n\n      // Prepare current date\n      const now = new Date();\n      const normalizeDate = date => new Date(date.getFullYear(), date.getMonth(), date.getDate());\n      const today = normalizeDate(now);\n\n      // Function to determine if a job is due for service\n      const isJobDue = job => {\n        // Filter out completed jobs\n        if (job.status === 'Completed') {\n          return false;\n        }\n\n        // Jobs without lastServiceDate are due\n        if (!job.lastServiceDate) {\n          return true;\n        }\n        const lastServiceDate = normalizeDate(new Date(job.lastServiceDate));\n        const daysSinceLastService = Math.floor((today - lastServiceDate) / (1000 * 60 * 60 * 24));\n\n        // Apply recurrence pattern logic\n        if (job.isRecurring) {\n          switch (job.recurrencePattern) {\n            case 'Weekly':\n              return daysSinceLastService >= 7;\n            case 'Bi-weekly':\n              return daysSinceLastService >= 14;\n            case 'Monthly':\n              return daysSinceLastService >= 30;\n            default:\n              return false;\n          }\n        } else {\n          // One-time jobs are due if they haven't been serviced yet\n          return true;\n        }\n      };\n\n      // Update jobs in routes with full job data and determine if they are due\n      const processedRoutes = Object.fromEntries(Object.entries(validatedRoutes).map(([day, dayRoutes]) => [day, dayRoutes.map(route => ({\n        ...route,\n        jobs: route.jobs.map(job => {\n          const jobId = typeof job === 'string' ? job : job._id;\n          const fullJob = jobMap[jobId];\n          if (fullJob) {\n            return {\n              ...fullJob,\n              isDue: isJobDue(fullJob) // Add isDue property\n            };\n          }\n          return null;\n        }).filter(job => job) // Remove any null jobs\n      }))]));\n\n      // Prepare the job pool by filtering jobs that are due and not in any route\n      const jobsInRoutes = new Set(Object.values(processedRoutes).flatMap(dayRoutes => dayRoutes.flatMap(route => route.jobs.map(job => job._id))));\n      const jobPoolJobs = fetchedJobs.filter(job => {\n        // Exclude jobs that are already scheduled in routes\n        if (jobsInRoutes.has(job._id)) {\n          return false;\n        }\n        // Include jobs that are due\n        return isJobDue(job);\n      }).map(job => ({\n        ...job,\n        isDue: true // Jobs in job pool are due\n      }));\n      setRoutes(processedRoutes);\n      setJobPool(jobPoolJobs);\n      setEmployees(fetchedEmployees);\n      setCrews(fetchedCrews);\n      console.log('Initialized data:', {\n        routes: processedRoutes,\n        jobPool: jobPoolJobs,\n        employees: fetchedEmployees,\n        crews: fetchedCrews\n      });\n    } catch (err) {\n      console.error('Error fetching data:', err);\n      setError('Failed to load routes, jobs, employees, and crews. Please refresh the page.');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  useEffect(() => {\n    initializeData();\n  }, [initializeData]);\n  const saveRoutes = useCallback(async (updatedRoutes = routes) => {\n    setSaving(true);\n    try {\n      const routesToSave = Object.entries(updatedRoutes).reduce((acc, [day, dayRoutes]) => {\n        acc[day] = dayRoutes.map(route => {\n          var _route$employee, _route$crew;\n          return {\n            index: route.index,\n            jobs: route.jobs.map(job => typeof job === 'string' ? job : job._id),\n            employee: (_route$employee = route.employee) === null || _route$employee === void 0 ? void 0 : _route$employee._id,\n            crew: (_route$crew = route.crew) === null || _route$crew === void 0 ? void 0 : _route$crew._id\n          };\n        });\n        return acc;\n      }, {});\n      await fetchWithAuth('/routes', 'PUT', {\n        routes: routesToSave\n      });\n      console.log('Routes saved successfully:', routesToSave);\n    } catch (err) {\n      console.error('Error saving routes:', err);\n      setError('Failed to save routes. Please try again.');\n    } finally {\n      setSaving(false);\n    }\n  }, [routes]);\n  const debouncedSaveRoutes = useCallback(debounce(saveRoutes, 1000), [saveRoutes]);\n  const onDragEnd = useCallback(result => {\n    const {\n      source,\n      destination\n    } = result;\n    if (!destination) {\n      console.log(\"Drag operation cancelled or no destination found.\");\n      return;\n    }\n    console.log(\"Drag started from:\", source.droppableId, \"to\", destination.droppableId);\n    console.log(\"Before moving jobs:\", {\n      jobPool,\n      routes\n    });\n    setRoutes(prevRoutes => {\n      const updatedRoutes = {\n        ...prevRoutes\n      };\n      const sourceId = source.droppableId.split('-');\n      const destId = destination.droppableId.split('-');\n      const sourceRouteIndex = sourceId[0] === 'route' ? parseInt(sourceId[1], 10) : null;\n      const destRouteIndex = destId[0] === 'route' ? parseInt(destId[1], 10) : null;\n\n      // Moving from job pool to a route\n      if (source.droppableId === 'jobPool-0' && destRouteIndex !== null) {\n        console.log(\"Moving jobs from job pool to route:\", destRouteIndex);\n        const selectedJobsToMove = selectedJobs.length > 0 ? jobPool.filter(job => selectedJobs.includes(job._id)) : [jobPool[source.index]]; // Only the single dragged job\n\n        console.log(\"Selected jobs to move from job pool:\", selectedJobsToMove);\n\n        // Add jobs to the route\n        selectedJobsToMove.forEach((job, index) => {\n          updatedRoutes[selectedDay][destRouteIndex].jobs.splice(destination.index + index, 0, job);\n          console.log(`Job added to route ${destRouteIndex}:`, job);\n        });\n\n        // Remove moved jobs from job pool\n        const updatedJobPool = jobPool.filter(job => !selectedJobs.includes(job._id));\n        if (selectedJobs.length === 0) {\n          // If no jobs were selected, remove the single dragged job from the pool\n          updatedJobPool.splice(source.index, 1);\n        }\n        setJobPool(updatedJobPool);\n        console.log(\"Updated job pool after move:\", updatedJobPool);\n      }\n\n      // Moving between routes or within the same route\n      if (sourceRouteIndex !== null && destRouteIndex !== null) {\n        console.log(`Moving jobs from route ${sourceRouteIndex} to route ${destRouteIndex}`);\n        selectedJobs.forEach((jobId, index) => {\n          // Find job in the source route\n          const jobIndex = updatedRoutes[selectedDay][sourceRouteIndex].jobs.findIndex(job => job._id === jobId);\n          const [removedJob] = updatedRoutes[selectedDay][sourceRouteIndex].jobs.splice(jobIndex, 1);\n          console.log(`Removed job ${jobId} from route ${sourceRouteIndex}`, removedJob);\n\n          // Add job to destination route\n          if (removedJob) {\n            updatedRoutes[selectedDay][destRouteIndex].jobs.splice(destination.index, 0, removedJob);\n            console.log(`Added job ${jobId} to route ${destRouteIndex}`);\n          }\n        });\n      }\n      console.log(\"After moving jobs:\", {\n        jobPool,\n        updatedRoutes\n      });\n      setSelectedJobs([]); // Clear selected jobs after moving\n      return updatedRoutes;\n    });\n    debouncedSaveRoutes();\n  }, [jobPool, selectedJobs, selectedDay, debouncedSaveRoutes]);\n  const addNewRoute = useCallback(async routeName => {\n    if (!routeName) {\n      // If no name is provided, assign a default name\n      routeName = `Route ${routes[selectedDay].length + 1}`;\n    }\n    const newRouteState = {\n      ...routes,\n      [selectedDay]: [...routes[selectedDay], {\n        index: routes[selectedDay].length,\n        jobs: [],\n        name: routeName\n      }]\n    };\n    setRoutes(newRouteState);\n    await saveRoutes(newRouteState);\n  }, [routes, selectedDay, saveRoutes]);\n  const deleteRoute = useCallback(async routeIndex => {\n    try {\n      setRoutes(prevRoutes => {\n        const updatedRoutes = {\n          ...prevRoutes\n        };\n        const deletedRoute = updatedRoutes[selectedDay].splice(routeIndex, 1)[0];\n        setJobPool(prevJobPool => [...prevJobPool, ...deletedRoute.jobs]);\n        updatedRoutes[selectedDay] = updatedRoutes[selectedDay].map((route, idx) => ({\n          ...route,\n          index: idx\n        }));\n        return updatedRoutes;\n      });\n      await fetchWithAuth(`/routes/${selectedDay}/${routeIndex}`, 'DELETE');\n      await saveRoutes(); // Ensure routes are saved to keep consistent state\n    } catch (error) {\n      console.error('Error deleting route:', error);\n      setError('Failed to delete route. Please try again.');\n    }\n  }, [selectedDay, saveRoutes]);\n  const removeJobFromRoute = async (routeIndex, jobIndex) => {\n    try {\n      const removedJob = routes[selectedDay][routeIndex].jobs[jobIndex];\n      setRoutes(prevRoutes => {\n        const updatedRoutes = {\n          ...prevRoutes\n        };\n        updatedRoutes[selectedDay][routeIndex].jobs.splice(jobIndex, 1);\n        return updatedRoutes;\n      });\n\n      // Re-apply filtering to the routes and job pool\n      await initializeData();\n      await saveRoutes();\n    } catch (error) {\n      console.error('Error removing job from route:', error);\n      setError('Failed to remove job from route. Please try again.');\n    }\n  };\n  const [assigningRoutes, setAssigningRoutes] = useState({});\n  const assignRoute = async (routeIndex, assigneeId) => {\n    const [type, id] = assigneeId.split('-');\n    setAssigningRoutes(prev => ({\n      ...prev,\n      [routeIndex]: true\n    }));\n    try {\n      console.log(`Assigning ${type} with ID: ${id} to route ${routeIndex} for day ${selectedDay}`);\n\n      // Sending the appropriate payload to the API\n      const response = await fetchWithAuth(`/routes/${selectedDay}/${routeIndex}/assign`, 'PUT', {\n        [type]: id\n      });\n\n      // Since fetchWithAuth returns parsed data directly, no need to check response.ok or status\n      console.log('Response from server:', response);\n\n      // Ensure the response contains the expected fields, otherwise consider it an error\n      if (!response || !response._id) {\n        throw new Error('Invalid response format');\n      }\n\n      // Assuming the response is valid and contains the updated route\n      const updatedRoute = response; // Use the response directly since fetchWithAuth returns the data\n      setRoutes(prevRoutes => {\n        const updatedDayRoutes = prevRoutes[selectedDay].map(route => {\n          if (route.index === routeIndex) {\n            var _employees$find, _crews$find;\n            return {\n              ...route,\n              employee: type === 'employee' ? {\n                _id: id,\n                name: (_employees$find = employees.find(e => e._id === id)) === null || _employees$find === void 0 ? void 0 : _employees$find.name\n              } : null,\n              crew: type === 'crew' ? {\n                _id: id,\n                name: (_crews$find = crews.find(c => c._id === id)) === null || _crews$find === void 0 ? void 0 : _crews$find.name\n              } : null\n            };\n          }\n          return route;\n        });\n        return {\n          ...prevRoutes,\n          [selectedDay]: updatedDayRoutes\n        };\n      });\n      console.log(`Route assigned successfully: day ${selectedDay}, index ${routeIndex}, ${type}: ${id}`);\n    } catch (error) {\n      console.error('Error assigning route:', error);\n      setError('Failed to assign route. Please try again.');\n    } finally {\n      setAssigningRoutes(prev => ({\n        ...prev,\n        [routeIndex]: false\n      }));\n    }\n  };\n  const handleJobSelection = job => {\n    setSelectedJobs(prevSelectedJobs => {\n      if (prevSelectedJobs.includes(job._id)) {\n        return prevSelectedJobs.filter(id => id !== job._id);\n      } else {\n        return [...prevSelectedJobs, job._id];\n      }\n    });\n  };\n  const toggleJobExpansion = jobId => {\n    setExpandedJobs(prev => ({\n      ...prev,\n      [jobId]: !prev[jobId]\n    }));\n  };\n  const changeSelectedDay = direction => {\n    setSelectedDay(prevDay => {\n      const currentIndex = DAYS_OF_WEEK.indexOf(prevDay);\n      const newIndex = (currentIndex + direction + DAYS_OF_WEEK.length) % DAYS_OF_WEEK.length;\n      return DAYS_OF_WEEK[newIndex];\n    });\n    setVisibleRoutesRange({\n      start: 0,\n      end: 3\n    });\n  };\n  const cycleVisibleRoutes = direction => {\n    setVisibleRoutesRange(prevRange => {\n      const totalRoutes = routes[selectedDay].length;\n      const newStart = (prevRange.start + direction + totalRoutes) % totalRoutes;\n      const newEnd = Math.min(newStart + 3, totalRoutes);\n      return {\n        start: newStart,\n        end: newEnd\n      };\n    });\n  };\n  const renderLegend = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-2 p-2 bg-gray-800 rounded-lg text-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"font-bold mb-2\",\n      children: \"Job Legend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"space-y-1\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"w-4 h-4 inline-block bg-green-600 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this), \" One-time job\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"w-4 h-4 inline-block bg-blue-600 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this), \" Weekly recurring job\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"w-4 h-4 inline-block bg-teal-600 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this), \" Bi-weekly recurring job\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"w-4 h-4 inline-block bg-purple-600 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 11\n        }, this), \" Monthly recurring job\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"w-4 h-4 inline-block bg-gray-600 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 11\n        }, this), \" Other recurring job\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"w-4 h-4 inline-block bg-white opacity-100 mr-2 border\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this), \" Due for service\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"w-4 h-4 inline-block bg-white opacity-50 mr-2 border\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this), \" Not due yet\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 420,\n    columnNumber: 5\n  }, this);\n  const shouldReturnToPool = (job, now) => {\n    if (!job.isRecurring) return false;\n    const normalizeDate = date => new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    const lastServiceDate = normalizeDate(new Date(job.lastServiceDate));\n    const today = normalizeDate(now);\n    const daysSinceLastService = Math.floor((today - lastServiceDate) / (1000 * 60 * 60 * 24));\n    switch (job.recurrencePattern) {\n      case 'Weekly':\n        return daysSinceLastService >= 7;\n      case 'Bi-weekly':\n        return daysSinceLastService >= 14;\n      case 'Monthly':\n        return daysSinceLastService >= 30;\n      default:\n        return false;\n    }\n  };\n\n  // Updated handleCompleteJob function\n  const handleCompleteJob = async jobIds => {\n    try {\n      await Promise.all(jobIds.map(async jobId => {\n        await fetchWithAuth(`/jobs/${jobId}/complete`, 'POST', {});\n      }));\n\n      // Remove one-time jobs from routes\n      setRoutes(prevRoutes => {\n        const updatedRoutes = {\n          ...prevRoutes\n        };\n        for (const day in updatedRoutes) {\n          updatedRoutes[day] = updatedRoutes[day].map(route => ({\n            ...route,\n            jobs: route.jobs.filter(job => {\n              if (jobIds.includes(job._id)) {\n                return job.isRecurring; // Keep if recurring\n              }\n              return true; // Keep other jobs\n            })\n          }));\n        }\n        return updatedRoutes;\n      });\n\n      // Re-fetch the updated jobs and update the state\n      await initializeData();\n      setSelectedJobs([]);\n      setSuccessMessage(\"Jobs completed successfully!\");\n    } catch (error) {\n      console.error('Error completing jobs:', error);\n      setError(`Failed to complete jobs: ${error.message}`);\n    }\n  };\n  const renderJobCard = (job, isInRoute = false, routeIndex, jobIndex) => {\n    var _job$customer, _job$location;\n    if (!job) return null; // Safeguard against undefined jobs\n\n    const isExpanded = expandedJobs[job._id];\n    const isSelected = selectedJobs.includes(job._id);\n\n    // Calculate days since last service\n    const now = new Date();\n    const lastServiceDate = job.lastServiceDate ? new Date(job.lastServiceDate) : null;\n    const daysSinceLastService = lastServiceDate ? Math.floor((now - lastServiceDate) / (1000 * 60 * 60 * 24)) : 'N/A';\n\n    // Prepare display text for days since last service\n    const daysSinceText = daysSinceLastService !== 'N/A' ? `${daysSinceLastService} day${daysSinceLastService !== 1 ? 's' : ''} ago` : 'No service yet';\n    const customerName = ((_job$customer = job.customer) === null || _job$customer === void 0 ? void 0 : _job$customer.name) || 'No Customer';\n    const jobTitle = job.title || 'No Title';\n\n    // Determine job color based on recurrence pattern\n    const jobColors = {\n      oneTime: 'bg-green-600 hover:bg-green-700',\n      weekly: 'bg-blue-600 hover:bg-blue-700',\n      biWeekly: 'bg-teal-600 hover:bg-teal-700',\n      monthly: 'bg-purple-600 hover:bg-purple-700',\n      otherRecurring: 'bg-gray-600 hover:bg-gray-700'\n    };\n    const baseColor = job.isRecurring ? job.recurrencePattern === 'Weekly' ? jobColors.weekly : job.recurrencePattern === 'Bi-weekly' ? jobColors.biWeekly : job.recurrencePattern === 'Monthly' ? jobColors.monthly : jobColors.otherRecurring : jobColors.oneTime;\n    const opacityClass = job.isDue ? 'opacity-100' : 'opacity-50';\n    const jobStyle = {\n      border: isSelected ? '2px solid white' : 'none'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `p-2 rounded-md shadow-md ${baseColor} ${opacityClass}`,\n      style: {\n        border: jobStyle.border\n      },\n      onClick: () => handleJobSelection(job),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-bold text-white\",\n            children: customerName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-200\",\n            children: daysSinceText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-2\",\n          children: [isInRoute && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => {\n              e.stopPropagation();\n              removeJobFromRoute(routeIndex, jobIndex);\n            },\n            className: \"text-red-500 hover:text-red-700\",\n            children: /*#__PURE__*/_jsxDEV(TrashIcon, {\n              className: \"h-5 w-5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 573,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: e => {\n              e.stopPropagation();\n              toggleJobExpansion(job._id);\n            },\n            children: isExpanded ? /*#__PURE__*/_jsxDEV(ChevronUpIcon, {\n              className: \"h-5 w-5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 577,\n              columnNumber: 29\n            }, this) : /*#__PURE__*/_jsxDEV(ChevronDownIcon, {\n              className: \"h-5 w-5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 577,\n              columnNumber: 69\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 9\n      }, this), isExpanded && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-300\",\n          children: jobTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-400\",\n          children: ((_job$location = job.location) === null || _job$location === void 0 ? void 0 : _job$location.address) || 'No Address'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-400\",\n          children: [\"Revenue: $\", job.cost || 'No Price']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-400\",\n          children: [\"Type: \", job.isRecurring ? 'Recurring' : 'One-time']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-400\",\n          children: [\"Last Service Date: \", lastServiceDate ? lastServiceDate.toLocaleDateString() : 'N/A']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-400\",\n          children: [\"Days Since Last Service: \", daysSinceText]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-400\",\n          children: [\"Status: \", job.isDue ? 'Due for Service' : 'Not Due Yet']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 7\n    }, this);\n  };\n  const handleCompleteRoute = async routeIndex => {\n    try {\n      const routeJobs = routes[selectedDay][routeIndex].jobs;\n      await Promise.all(routeJobs.map(async job => {\n        await fetchWithAuth(`/jobs/${job._id}/complete`, 'POST', {});\n      }));\n\n      // Re-fetch the updated jobs and update the state\n      await initializeData();\n      setSuccessMessage(\"Route completed successfully!\");\n    } catch (error) {\n      console.error('Error completing route:', error);\n      setError('Failed to complete the route. Please try again.');\n    }\n  };\n  const renderDroppableArea = (id, jobs, isJobPool = false) => {\n    const routeIndex = parseInt(id.split('-')[1], 10);\n    const route = routes[selectedDay][routeIndex];\n    return /*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: id,\n      children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: provided.innerRef,\n        ...provided.droppableProps,\n        className: `bg-gray-800 p-4 rounded-lg min-h-[200px] ${isJobPool ? 'grid grid-cols-3 gap-4' : 'space-y-2'}`,\n        children: [!isJobPool && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"w-full p-2 bg-gray-700 text-white rounded\",\n            onChange: e => assignRoute(routeIndex, e.target.value),\n            value: route.employee ? `employee-${route.employee._id}` : route.crew ? `crew-${route.crew._id}` : '',\n            disabled: assigningRoutes[routeIndex],\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Assign to...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n              label: \"Employees\",\n              children: employees.map(employee => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: `employee-${employee._id}`,\n                children: employee.name\n              }, employee._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 642,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"optgroup\", {\n              label: \"Crews\",\n              children: crews.map(crew => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: `crew-${crew._id}`,\n                children: crew.name\n              }, crew._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 647,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 645,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 15\n        }, this), jobs.length > 0 ? jobs.map((job, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n          draggableId: job._id,\n          index: index,\n          children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: provided.innerRef,\n            ...provided.draggableProps,\n            ...provided.dragHandleProps,\n            children: renderJobCard(job, !isJobPool, routeIndex, index)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 21\n          }, this)\n        }, job._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-white text-center\",\n          children: \"No jobs available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 15\n        }, this), provided.placeholder, !isJobPool && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 text-right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 7\n    }, this);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-gray-900 flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white text-xl\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-gray-900 flex flex-col items-center justify-center space-y-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-500 text-xl\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        className: \"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition\",\n        children: \"Refresh Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 695,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-900 text-white\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 709,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-7xl mx-auto py-8 px-4\",\n      children: [successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-green-500 text-white p-4 rounded-lg mb-4\",\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-red-500 text-white p-4 rounded-lg mb-4\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 720,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changeSelectedDay(-1),\n          className: \"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\",\n          children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 731,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-3xl font-bold\",\n          children: selectedDay\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => changeSelectedDay(1),\n          className: \"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\",\n          children: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 734,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 726,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => cycleVisibleRoutes(-1),\n          className: \"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\",\n          children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 748,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowRouteNameModal(true),\n          className: \"px-4 py-2 bg-green-500 rounded-md hover:bg-green-600 transition flex items-center space-x-2\",\n          children: [/*#__PURE__*/_jsxDEV(PlusIcon, {\n            className: \"w-5 h-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 754,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Add Route\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 755,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => cycleVisibleRoutes(1),\n          className: \"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\",\n          children: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 761,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: onDragEnd,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\",\n          children: routes[selectedDay].slice(visibleRoutesRange.start, visibleRoutesRange.end).map(route => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-800 p-4 rounded-lg shadow-lg\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center justify-between mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"text-xl font-semibold\",\n                children: [\"Route \", route.index + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 773,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => deleteRoute(route.index),\n                className: \"p-2 bg-red-500 rounded-md hover:bg-red-600 transition\",\n                children: /*#__PURE__*/_jsxDEV(TrashIcon, {\n                  className: \"w-5 h-5\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 778,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 774,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 772,\n              columnNumber: 19\n            }, this), renderDroppableArea(`route-${route.index}`, route.jobs), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-4 text-right\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setConfirmDialog({\n                  isOpen: true,\n                  routeIndex: route.index\n                }),\n                className: \"bg-green-500 text-white px-2 py-1 rounded-md hover:bg-green-600 transition\",\n                children: \"Complete Route\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 785,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 784,\n              columnNumber: 19\n            }, this)]\n          }, route.index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 771,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 767,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-8\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-2xl font-semibold mb-4 flex justify-between items-center\",\n            children: [\"Job Pool\", selectedJobs.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex space-x-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setSelectedJobs([]),\n                className: \"px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition\",\n                children: \"Clear Selection\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 802,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleCompleteJob(selectedJobs),\n                className: \"px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition\",\n                children: \"Complete Selected Jobs\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 808,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 801,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 798,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-gray-400 mb-2\",\n            children: \"Click on jobs to select multiple, then drag to a route or complete.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 817,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-2 p-2 bg-gray-800 rounded-lg text-white\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-bold mb-2\",\n              children: \"Job Color Legend\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 823,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"flex space-x-8\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"flex items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-4 h-4 inline-block bg-green-600 mr-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 826,\n                  columnNumber: 19\n                }, this), \" One-time job\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 825,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"flex items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-4 h-4 inline-block bg-blue-600 mr-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 829,\n                  columnNumber: 19\n                }, this), \" Weekly\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 828,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"flex items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-4 h-4 inline-block bg-yellow-600 mr-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 832,\n                  columnNumber: 19\n                }, this), \" Bi-weekly\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 831,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"flex items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"w-4 h-4 inline-block bg-purple-600 mr-2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 835,\n                  columnNumber: 19\n                }, this), \" Monthly\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 834,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 824,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 822,\n            columnNumber: 13\n          }, this), renderDroppableArea('jobPool-0', jobPool, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 797,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 765,\n        columnNumber: 9\n      }, this), saving && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 z-50\",\n        children: [/*#__PURE__*/_jsxDEV(ClipLoader, {\n          color: \"#ffffff\",\n          loading: saving,\n          size: 50\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 846,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-white mt-4\",\n          children: \"Saving...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 847,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 845,\n        columnNumber: 11\n      }, this), confirmDialog.isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gray-800 p-6 rounded-lg text-white shadow-lg\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-xl font-semibold\",\n            children: \"Confirm Route Completion\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 855,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-4\",\n            children: \"Are you sure you want to complete all jobs in this route?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 856,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-6 flex justify-end space-x-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setConfirmDialog({\n                isOpen: false,\n                routeIndex: null\n              }),\n              className: \"px-4 py-2 bg-gray-600 rounded-md hover:bg-gray-700\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 858,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                handleCompleteRoute(confirmDialog.routeIndex);\n                setConfirmDialog({\n                  isOpen: false,\n                  routeIndex: null\n                }); // Close after confirming\n              },\n              className: \"px-4 py-2 bg-green-500 rounded-md hover:bg-green-600\",\n              children: \"Confirm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 864,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 857,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 854,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 853,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 711,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 708,\n    columnNumber: 5\n  }, this);\n};\n_s(BuildRoutes, \"zUZ2ElPI/RBzJ0o3UyYOWs1JAT8=\");\n_c = BuildRoutes;\nexport default BuildRoutes;\nvar _c;\n$RefreshReg$(_c, \"BuildRoutes\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ChevronLeftIcon","ChevronRightIcon","PlusIcon","TrashIcon","ChevronDownIcon","ChevronUpIcon","DragDropContext","Droppable","Draggable","CheckIcon","API_BASE_URL","DAYS_OF_WEEK","defaultRoutes","validateRoutesStructure","fetchWithAuth","Header","debounce","ClipLoader","jsxDEV","_jsxDEV","BuildRoutes","_s","routes","setRoutes","jobPool","setJobPool","selectedDay","setSelectedDay","loading","setLoading","saving","setSaving","error","setError","successMessage","setSuccessMessage","visibleRoutesRange","setVisibleRoutesRange","start","end","expandedJobs","setExpandedJobs","selectedJobs","setSelectedJobs","employees","setEmployees","crews","setCrews","confirmDialog","setConfirmDialog","isOpen","routeIndex","showRouteNameModal","setShowRouteNameModal","newRouteName","setNewRouteName","initializeData","fetchedRoutesResponse","fetchedJobsResponse","fetchedEmployeesResponse","fetchedCrewsResponse","Promise","all","fetchedRoutes","fetchedJobs","fetchedEmployees","fetchedCrews","validatedRoutes","jobMap","forEach","job","_id","now","Date","normalizeDate","date","getFullYear","getMonth","getDate","today","isJobDue","status","lastServiceDate","daysSinceLastService","Math","floor","isRecurring","recurrencePattern","processedRoutes","Object","fromEntries","entries","map","day","dayRoutes","route","jobs","jobId","fullJob","isDue","filter","jobsInRoutes","Set","values","flatMap","jobPoolJobs","has","console","log","err","saveRoutes","updatedRoutes","routesToSave","reduce","acc","_route$employee","_route$crew","index","employee","crew","debouncedSaveRoutes","onDragEnd","result","source","destination","droppableId","prevRoutes","sourceId","split","destId","sourceRouteIndex","parseInt","destRouteIndex","selectedJobsToMove","length","includes","splice","updatedJobPool","jobIndex","findIndex","removedJob","addNewRoute","routeName","newRouteState","name","deleteRoute","deletedRoute","prevJobPool","idx","removeJobFromRoute","assigningRoutes","setAssigningRoutes","assignRoute","assigneeId","type","id","prev","response","Error","updatedRoute","updatedDayRoutes","_employees$find","_crews$find","find","e","c","handleJobSelection","prevSelectedJobs","toggleJobExpansion","changeSelectedDay","direction","prevDay","currentIndex","indexOf","newIndex","cycleVisibleRoutes","prevRange","totalRoutes","newStart","newEnd","min","renderLegend","className","children","fileName","_jsxFileName","lineNumber","columnNumber","shouldReturnToPool","handleCompleteJob","jobIds","message","renderJobCard","isInRoute","_job$customer","_job$location","isExpanded","isSelected","daysSinceText","customerName","customer","jobTitle","title","jobColors","oneTime","weekly","biWeekly","monthly","otherRecurring","baseColor","opacityClass","jobStyle","border","style","onClick","stopPropagation","location","address","cost","toLocaleDateString","handleCompleteRoute","routeJobs","renderDroppableArea","isJobPool","provided","ref","innerRef","droppableProps","onChange","target","value","disabled","label","draggableId","draggableProps","dragHandleProps","placeholder","window","reload","slice","color","size","_c","$RefreshReg$"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/pages/BuildRoutes.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport {\r\n  ChevronLeftIcon,\r\n  ChevronRightIcon,\r\n  PlusIcon,\r\n  TrashIcon,\r\n  ChevronDownIcon,\r\n  ChevronUpIcon,\r\n} from '@heroicons/react/24/outline';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { CheckIcon } from '@heroicons/react/24/solid';\r\nimport {\r\n  API_BASE_URL,\r\n  DAYS_OF_WEEK,\r\n  defaultRoutes,\r\n  validateRoutesStructure,\r\n  fetchWithAuth,\r\n} from '../components/utils';\r\nimport Header from '../components/Header';\r\nimport debounce from 'lodash/debounce';\r\nimport { ClipLoader } from 'react-spinners';\r\n\r\nconst BuildRoutes = () => {\r\n  const [routes, setRoutes] = useState(defaultRoutes);\r\n  const [jobPool, setJobPool] = useState([]);\r\n  const [selectedDay, setSelectedDay] = useState(DAYS_OF_WEEK[0]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState(null);\r\n   const [successMessage, setSuccessMessage] = useState('');  // New state for success messages\r\n  const [visibleRoutesRange, setVisibleRoutesRange] = useState({ start: 0, end: 3 });\r\n  const [expandedJobs, setExpandedJobs] = useState({});\r\n  const [selectedJobs, setSelectedJobs] = useState([]);\r\n  const [employees, setEmployees] = useState([]);\r\n  const [crews, setCrews] = useState([]);\r\n  const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, routeIndex: null });\r\n  const [showRouteNameModal, setShowRouteNameModal] = useState(false);\r\n  const [newRouteName, setNewRouteName] = useState('');\r\n  \r\n  const initializeData = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      const [\r\n        fetchedRoutesResponse,\r\n        fetchedJobsResponse,\r\n        fetchedEmployeesResponse,\r\n        fetchedCrewsResponse,\r\n      ] = await Promise.all([\r\n        fetchWithAuth('/routes'),\r\n        fetchWithAuth('/jobs'),\r\n        fetchWithAuth('/employees'),\r\n        fetchWithAuth('/crews'),\r\n      ]);\r\n  \r\n      const fetchedRoutes = fetchedRoutesResponse?.routes || defaultRoutes;\r\n      const fetchedJobs = fetchedJobsResponse || [];\r\n      const fetchedEmployees = fetchedEmployeesResponse || [];\r\n      const fetchedCrews = fetchedCrewsResponse || [];\r\n  \r\n      const validatedRoutes = validateRoutesStructure(fetchedRoutes);\r\n  \r\n      // Create a job map for easy lookup\r\n      const jobMap = {};\r\n      fetchedJobs.forEach(job => {\r\n        jobMap[job._id] = job;\r\n      });\r\n  \r\n      // Prepare current date\r\n      const now = new Date();\r\n      const normalizeDate = (date) => new Date(date.getFullYear(), date.getMonth(), date.getDate());\r\n      const today = normalizeDate(now);\r\n  \r\n      // Function to determine if a job is due for service\r\n      const isJobDue = (job) => {\r\n        // Filter out completed jobs\r\n        if (job.status === 'Completed') {\r\n          return false;\r\n        }\r\n  \r\n        // Jobs without lastServiceDate are due\r\n        if (!job.lastServiceDate) {\r\n          return true;\r\n        }\r\n  \r\n        const lastServiceDate = normalizeDate(new Date(job.lastServiceDate));\r\n        const daysSinceLastService = Math.floor((today - lastServiceDate) / (1000 * 60 * 60 * 24));\r\n  \r\n        // Apply recurrence pattern logic\r\n        if (job.isRecurring) {\r\n          switch (job.recurrencePattern) {\r\n            case 'Weekly':\r\n              return daysSinceLastService >= 7;\r\n            case 'Bi-weekly':\r\n              return daysSinceLastService >= 14;\r\n            case 'Monthly':\r\n              return daysSinceLastService >= 30;\r\n            default:\r\n              return false;\r\n          }\r\n        } else {\r\n          // One-time jobs are due if they haven't been serviced yet\r\n          return true;\r\n        }\r\n      };\r\n  \r\n      // Update jobs in routes with full job data and determine if they are due\r\n      const processedRoutes = Object.fromEntries(\r\n        Object.entries(validatedRoutes).map(([day, dayRoutes]) => [\r\n          day,\r\n          dayRoutes.map(route => ({\r\n            ...route,\r\n            jobs: route.jobs\r\n              .map(job => {\r\n                const jobId = typeof job === 'string' ? job : job._id;\r\n                const fullJob = jobMap[jobId];\r\n                if (fullJob) {\r\n                  return {\r\n                    ...fullJob,\r\n                    isDue: isJobDue(fullJob), // Add isDue property\r\n                  };\r\n                }\r\n                return null;\r\n              })\r\n              .filter(job => job), // Remove any null jobs\r\n          })),\r\n        ])\r\n      );\r\n  \r\n      // Prepare the job pool by filtering jobs that are due and not in any route\r\n      const jobsInRoutes = new Set(\r\n        Object.values(processedRoutes).flatMap(dayRoutes =>\r\n          dayRoutes.flatMap(route => route.jobs.map(job => job._id))\r\n        )\r\n      );\r\n  \r\n      const jobPoolJobs = fetchedJobs\r\n        .filter(job => {\r\n          // Exclude jobs that are already scheduled in routes\r\n          if (jobsInRoutes.has(job._id)) {\r\n            return false;\r\n          }\r\n          // Include jobs that are due\r\n          return isJobDue(job);\r\n        })\r\n        .map(job => ({\r\n          ...job,\r\n          isDue: true, // Jobs in job pool are due\r\n        }));\r\n  \r\n      setRoutes(processedRoutes);\r\n      setJobPool(jobPoolJobs);\r\n      setEmployees(fetchedEmployees);\r\n      setCrews(fetchedCrews);\r\n  \r\n      console.log('Initialized data:', {\r\n        routes: processedRoutes,\r\n        jobPool: jobPoolJobs,\r\n        employees: fetchedEmployees,\r\n        crews: fetchedCrews,\r\n      });\r\n    } catch (err) {\r\n      console.error('Error fetching data:', err);\r\n      setError('Failed to load routes, jobs, employees, and crews. Please refresh the page.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    initializeData();\r\n  }, [initializeData]);\r\n\r\n  const saveRoutes = useCallback(async (updatedRoutes = routes) => {\r\n    setSaving(true);\r\n    try {\r\n      const routesToSave = Object.entries(updatedRoutes).reduce((acc, [day, dayRoutes]) => {\r\n        acc[day] = dayRoutes.map(route => ({\r\n          index: route.index,\r\n          jobs: route.jobs.map(job => (typeof job === 'string' ? job : job._id)),\r\n          employee: route.employee?._id,\r\n          crew: route.crew?._id,\r\n        }));\r\n        return acc;\r\n      }, {});\r\n  \r\n      await fetchWithAuth('/routes', 'PUT', { routes: routesToSave });\r\n      console.log('Routes saved successfully:', routesToSave);\r\n    } catch (err) {\r\n      console.error('Error saving routes:', err);\r\n      setError('Failed to save routes. Please try again.');\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  }, [routes]);\r\n\r\n  const debouncedSaveRoutes = useCallback(debounce(saveRoutes, 1000), [saveRoutes]);\r\n\r\n  const onDragEnd = useCallback((result) => {\r\n    const { source, destination } = result;\r\n  \r\n    if (!destination) {\r\n      console.log(\"Drag operation cancelled or no destination found.\");\r\n      return;\r\n    }\r\n  \r\n    console.log(\"Drag started from:\", source.droppableId, \"to\", destination.droppableId);\r\n    console.log(\"Before moving jobs:\", { jobPool, routes });\r\n\r\n    setRoutes((prevRoutes) => {\r\n      const updatedRoutes = { ...prevRoutes };\r\n      const sourceId = source.droppableId.split('-');\r\n      const destId = destination.droppableId.split('-');\r\n  \r\n      const sourceRouteIndex = sourceId[0] === 'route' ? parseInt(sourceId[1], 10) : null;\r\n      const destRouteIndex = destId[0] === 'route' ? parseInt(destId[1], 10) : null;\r\n  \r\n      // Moving from job pool to a route\r\n      if (source.droppableId === 'jobPool-0' && destRouteIndex !== null) {\r\n        console.log(\"Moving jobs from job pool to route:\", destRouteIndex);\r\n  \r\n        const selectedJobsToMove = selectedJobs.length > 0 \r\n          ? jobPool.filter(job => selectedJobs.includes(job._id)) \r\n          : [jobPool[source.index]];  // Only the single dragged job\r\n  \r\n        console.log(\"Selected jobs to move from job pool:\", selectedJobsToMove);\r\n  \r\n        // Add jobs to the route\r\n        selectedJobsToMove.forEach((job, index) => {\r\n          updatedRoutes[selectedDay][destRouteIndex].jobs.splice(destination.index + index, 0, job);\r\n          console.log(`Job added to route ${destRouteIndex}:`, job);\r\n        });\r\n  \r\n        // Remove moved jobs from job pool\r\n        const updatedJobPool = jobPool.filter(job => !selectedJobs.includes(job._id));\r\n        if (selectedJobs.length === 0) {\r\n          // If no jobs were selected, remove the single dragged job from the pool\r\n          updatedJobPool.splice(source.index, 1);\r\n        }\r\n        setJobPool(updatedJobPool);\r\n  \r\n        console.log(\"Updated job pool after move:\", updatedJobPool);\r\n      }\r\n  \r\n      // Moving between routes or within the same route\r\n      if (sourceRouteIndex !== null && destRouteIndex !== null) {\r\n        console.log(`Moving jobs from route ${sourceRouteIndex} to route ${destRouteIndex}`);\r\n  \r\n        selectedJobs.forEach((jobId, index) => {\r\n          // Find job in the source route\r\n          const jobIndex = updatedRoutes[selectedDay][sourceRouteIndex].jobs.findIndex(job => job._id === jobId);\r\n          const [removedJob] = updatedRoutes[selectedDay][sourceRouteIndex].jobs.splice(jobIndex, 1);\r\n  \r\n          console.log(`Removed job ${jobId} from route ${sourceRouteIndex}`, removedJob);\r\n  \r\n          // Add job to destination route\r\n          if (removedJob) {\r\n            updatedRoutes[selectedDay][destRouteIndex].jobs.splice(destination.index, 0, removedJob);\r\n            console.log(`Added job ${jobId} to route ${destRouteIndex}`);\r\n          }\r\n        });\r\n      }\r\n  \r\n      console.log(\"After moving jobs:\", { jobPool, updatedRoutes });\r\n  \r\n      setSelectedJobs([]); // Clear selected jobs after moving\r\n      return updatedRoutes;\r\n    });\r\n\r\n    debouncedSaveRoutes();\r\n  }, [jobPool, selectedJobs, selectedDay, debouncedSaveRoutes]);\r\n\r\n  const addNewRoute = useCallback(async (routeName) => {\r\n    if (!routeName) {\r\n      // If no name is provided, assign a default name\r\n      routeName = `Route ${routes[selectedDay].length + 1}`;\r\n    }\r\n    const newRouteState = {\r\n      ...routes,\r\n      [selectedDay]: [\r\n        ...routes[selectedDay],\r\n        {\r\n          index: routes[selectedDay].length,\r\n          jobs: [],\r\n          name: routeName,\r\n        },\r\n      ],\r\n    };\r\n    setRoutes(newRouteState);\r\n    await saveRoutes(newRouteState);\r\n  }, [routes, selectedDay, saveRoutes]);\r\n\r\n  const deleteRoute = useCallback(async (routeIndex) => {\r\n    try {\r\n      setRoutes(prevRoutes => {\r\n        const updatedRoutes = { ...prevRoutes };\r\n        const deletedRoute = updatedRoutes[selectedDay].splice(routeIndex, 1)[0];\r\n        \r\n        setJobPool(prevJobPool => [...prevJobPool, ...deletedRoute.jobs]);\r\n        \r\n        updatedRoutes[selectedDay] = updatedRoutes[selectedDay].map((route, idx) => ({\r\n          ...route,\r\n          index: idx,\r\n        }));\r\n        \r\n        return updatedRoutes;\r\n      });\r\n  \r\n      await fetchWithAuth(`/routes/${selectedDay}/${routeIndex}`, 'DELETE');\r\n  \r\n      await saveRoutes(); // Ensure routes are saved to keep consistent state\r\n    } catch (error) {\r\n      console.error('Error deleting route:', error);\r\n      setError('Failed to delete route. Please try again.');\r\n    }\r\n  }, [selectedDay, saveRoutes]);\r\n\r\n  const removeJobFromRoute = async (routeIndex, jobIndex) => {\r\n    try {\r\n      const removedJob = routes[selectedDay][routeIndex].jobs[jobIndex];\r\n  \r\n      setRoutes(prevRoutes => {\r\n        const updatedRoutes = { ...prevRoutes };\r\n        updatedRoutes[selectedDay][routeIndex].jobs.splice(jobIndex, 1);\r\n        return updatedRoutes;\r\n      });\r\n  \r\n      // Re-apply filtering to the routes and job pool\r\n      await initializeData();\r\n  \r\n      await saveRoutes();\r\n    } catch (error) {\r\n      console.error('Error removing job from route:', error);\r\n      setError('Failed to remove job from route. Please try again.');\r\n    }\r\n  };\r\n  \r\n\r\n  const [assigningRoutes, setAssigningRoutes] = useState({});\r\n  const assignRoute = async (routeIndex, assigneeId) => {\r\n    const [type, id] = assigneeId.split('-');\r\n    setAssigningRoutes(prev => ({ ...prev, [routeIndex]: true }));\r\n  \r\n    try {\r\n      console.log(`Assigning ${type} with ID: ${id} to route ${routeIndex} for day ${selectedDay}`);\r\n      \r\n      // Sending the appropriate payload to the API\r\n      const response = await fetchWithAuth(`/routes/${selectedDay}/${routeIndex}/assign`, 'PUT', {\r\n        [type]: id,\r\n      });\r\n  \r\n      // Since fetchWithAuth returns parsed data directly, no need to check response.ok or status\r\n      console.log('Response from server:', response);\r\n  \r\n      // Ensure the response contains the expected fields, otherwise consider it an error\r\n      if (!response || !response._id) {\r\n        throw new Error('Invalid response format');\r\n      }\r\n  \r\n      // Assuming the response is valid and contains the updated route\r\n      const updatedRoute = response; // Use the response directly since fetchWithAuth returns the data\r\n      setRoutes((prevRoutes) => {\r\n        const updatedDayRoutes = prevRoutes[selectedDay].map((route) => {\r\n          if (route.index === routeIndex) {\r\n            return {\r\n              ...route,\r\n              employee: type === 'employee' ? { _id: id, name: employees.find(e => e._id === id)?.name } : null,\r\n              crew: type === 'crew' ? { _id: id, name: crews.find(c => c._id === id)?.name } : null,\r\n            };\r\n          }\r\n          return route;\r\n        });\r\n  \r\n        return {\r\n          ...prevRoutes,\r\n          [selectedDay]: updatedDayRoutes,\r\n        };\r\n      });\r\n      console.log(`Route assigned successfully: day ${selectedDay}, index ${routeIndex}, ${type}: ${id}`);\r\n    } catch (error) {\r\n      console.error('Error assigning route:', error);\r\n      setError('Failed to assign route. Please try again.');\r\n    } finally {\r\n      setAssigningRoutes(prev => ({ ...prev, [routeIndex]: false }));\r\n    }\r\n  };\r\n  \r\n  const handleJobSelection = (job) => {\r\n    setSelectedJobs(prevSelectedJobs => {\r\n      if (prevSelectedJobs.includes(job._id)) {\r\n        return prevSelectedJobs.filter(id => id !== job._id);\r\n      } else {\r\n        return [...prevSelectedJobs, job._id];\r\n      }\r\n    });\r\n  };\r\n\r\n  const toggleJobExpansion = (jobId) => {\r\n    setExpandedJobs((prev) => ({ ...prev, [jobId]: !prev[jobId] }));\r\n  };\r\n\r\n  const changeSelectedDay = (direction) => {\r\n    setSelectedDay((prevDay) => {\r\n      const currentIndex = DAYS_OF_WEEK.indexOf(prevDay);\r\n      const newIndex = (currentIndex + direction + DAYS_OF_WEEK.length) % DAYS_OF_WEEK.length;\r\n      return DAYS_OF_WEEK[newIndex];\r\n    });\r\n    setVisibleRoutesRange({ start: 0, end: 3 });\r\n  };\r\n\r\n  const cycleVisibleRoutes = (direction) => {\r\n    setVisibleRoutesRange((prevRange) => {\r\n      const totalRoutes = routes[selectedDay].length;\r\n      const newStart = (prevRange.start + direction + totalRoutes) % totalRoutes;\r\n      const newEnd = Math.min(newStart + 3, totalRoutes);\r\n      return { start: newStart, end: newEnd };\r\n    });\r\n  };\r\n\r\n  const renderLegend = () => (\r\n    <div className=\"mt-2 p-2 bg-gray-800 rounded-lg text-white\">\r\n      <h3 className=\"font-bold mb-2\">Job Legend</h3>\r\n      <ul className=\"space-y-1\">\r\n        <li className=\"flex items-center\">\r\n          <span className=\"w-4 h-4 inline-block bg-green-600 mr-2\" /> One-time job\r\n        </li>\r\n        <li className=\"flex items-center\">\r\n          <span className=\"w-4 h-4 inline-block bg-blue-600 mr-2\" /> Weekly recurring job\r\n        </li>\r\n        <li className=\"flex items-center\">\r\n          <span className=\"w-4 h-4 inline-block bg-teal-600 mr-2\" /> Bi-weekly recurring job\r\n        </li>\r\n        <li className=\"flex items-center\">\r\n          <span className=\"w-4 h-4 inline-block bg-purple-600 mr-2\" /> Monthly recurring job\r\n        </li>\r\n        <li className=\"flex items-center\">\r\n          <span className=\"w-4 h-4 inline-block bg-gray-600 mr-2\" /> Other recurring job\r\n        </li>\r\n        <li className=\"flex items-center\">\r\n          <span className=\"w-4 h-4 inline-block bg-white opacity-100 mr-2 border\" /> Due for service\r\n        </li>\r\n        <li className=\"flex items-center\">\r\n          <span className=\"w-4 h-4 inline-block bg-white opacity-50 mr-2 border\" /> Not due yet\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n  \r\n\r\n  const shouldReturnToPool = (job, now) => {\r\n    if (!job.isRecurring) return false;\r\n    \r\n    const normalizeDate = (date) => new Date(date.getFullYear(), date.getMonth(), date.getDate());\r\n    const lastServiceDate = normalizeDate(new Date(job.lastServiceDate));\r\n    const today = normalizeDate(now);\r\n    \r\n    const daysSinceLastService = Math.floor((today - lastServiceDate) / (1000 * 60 * 60 * 24));\r\n    \r\n    switch (job.recurrencePattern) {\r\n      case 'Weekly':\r\n        return daysSinceLastService >= 7;\r\n      case 'Bi-weekly':\r\n        return daysSinceLastService >= 14;\r\n      case 'Monthly':\r\n        return daysSinceLastService >= 30;\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n  \r\n  \r\n  // Updated handleCompleteJob function\r\n  const handleCompleteJob = async (jobIds) => {\r\n    try {\r\n      await Promise.all(\r\n        jobIds.map(async jobId => {\r\n          await fetchWithAuth(`/jobs/${jobId}/complete`, 'POST', {});\r\n        })\r\n      );\r\n  \r\n      // Remove one-time jobs from routes\r\n      setRoutes(prevRoutes => {\r\n        const updatedRoutes = { ...prevRoutes };\r\n        for (const day in updatedRoutes) {\r\n          updatedRoutes[day] = updatedRoutes[day].map(route => ({\r\n            ...route,\r\n            jobs: route.jobs.filter(job => {\r\n              if (jobIds.includes(job._id)) {\r\n                return job.isRecurring; // Keep if recurring\r\n              }\r\n              return true; // Keep other jobs\r\n            }),\r\n          }));\r\n        }\r\n        return updatedRoutes;\r\n      });\r\n  \r\n      // Re-fetch the updated jobs and update the state\r\n      await initializeData();\r\n  \r\n      setSelectedJobs([]);\r\n      setSuccessMessage(\"Jobs completed successfully!\");\r\n    } catch (error) {\r\n      console.error('Error completing jobs:', error);\r\n      setError(`Failed to complete jobs: ${error.message}`);\r\n    }\r\n  };  \r\n  \r\n  \r\n  const renderJobCard = (job, isInRoute = false, routeIndex, jobIndex) => {\r\n    if (!job) return null; // Safeguard against undefined jobs\r\n  \r\n    const isExpanded = expandedJobs[job._id];\r\n    const isSelected = selectedJobs.includes(job._id);\r\n  \r\n    // Calculate days since last service\r\n    const now = new Date();\r\n    const lastServiceDate = job.lastServiceDate ? new Date(job.lastServiceDate) : null;\r\n    const daysSinceLastService = lastServiceDate\r\n      ? Math.floor((now - lastServiceDate) / (1000 * 60 * 60 * 24))\r\n      : 'N/A';\r\n  \r\n    // Prepare display text for days since last service\r\n    const daysSinceText = daysSinceLastService !== 'N/A'\r\n      ? `${daysSinceLastService} day${daysSinceLastService !== 1 ? 's' : ''} ago`\r\n      : 'No service yet';\r\n  \r\n    const customerName = job.customer?.name || 'No Customer';\r\n    const jobTitle = job.title || 'No Title';\r\n  \r\n    // Determine job color based on recurrence pattern\r\n    const jobColors = {\r\n      oneTime: 'bg-green-600 hover:bg-green-700',\r\n      weekly: 'bg-blue-600 hover:bg-blue-700',\r\n      biWeekly: 'bg-teal-600 hover:bg-teal-700',\r\n      monthly: 'bg-purple-600 hover:bg-purple-700',\r\n      otherRecurring: 'bg-gray-600 hover:bg-gray-700',\r\n    };\r\n  \r\n    const baseColor = job.isRecurring\r\n      ? job.recurrencePattern === 'Weekly'\r\n        ? jobColors.weekly\r\n        : job.recurrencePattern === 'Bi-weekly'\r\n        ? jobColors.biWeekly\r\n        : job.recurrencePattern === 'Monthly'\r\n        ? jobColors.monthly\r\n        : jobColors.otherRecurring\r\n      : jobColors.oneTime;\r\n  \r\n    const opacityClass = job.isDue ? 'opacity-100' : 'opacity-50';\r\n  \r\n    const jobStyle = {\r\n      border: isSelected ? '2px solid white' : 'none',\r\n    };\r\n  \r\n    return (\r\n      <div\r\n        className={`p-2 rounded-md shadow-md ${baseColor} ${opacityClass}`}\r\n        style={{ border: jobStyle.border }}\r\n        onClick={() => handleJobSelection(job)}\r\n      >\r\n        <div className=\"flex justify-between items-center\">\r\n          {/* Display customer name and days since last service */}\r\n          <div>\r\n            <p className=\"font-bold text-white\">{customerName}</p>\r\n            <p className=\"text-sm text-gray-200\">{daysSinceText}</p>\r\n          </div>\r\n          <div className=\"flex items-center space-x-2\">\r\n            {isInRoute && (\r\n              <button\r\n                onClick={(e) => { e.stopPropagation(); removeJobFromRoute(routeIndex, jobIndex); }}\r\n                className=\"text-red-500 hover:text-red-700\"\r\n              >\r\n                <TrashIcon className=\"h-5 w-5\" />\r\n              </button>\r\n            )}\r\n            <button onClick={(e) => { e.stopPropagation(); toggleJobExpansion(job._id); }}>\r\n              {isExpanded ? <ChevronUpIcon className=\"h-5 w-5\" /> : <ChevronDownIcon className=\"h-5 w-5\" />}\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {isExpanded && (\r\n          <div className=\"mt-2\">\r\n            <p className=\"text-gray-300\">{jobTitle}</p>\r\n            <p className=\"text-gray-400\">{job.location?.address || 'No Address'}</p>\r\n            <p className=\"text-gray-400\">Revenue: ${job.cost || 'No Price'}</p>\r\n            <p className=\"text-gray-400\">Type: {job.isRecurring ? 'Recurring' : 'One-time'}</p>\r\n            <p className=\"text-gray-400\">Last Service Date: {lastServiceDate ? lastServiceDate.toLocaleDateString() : 'N/A'}</p>\r\n            <p className=\"text-gray-400\">Days Since Last Service: {daysSinceText}</p>\r\n            <p className=\"text-gray-400\">\r\n              Status: {job.isDue ? 'Due for Service' : 'Not Due Yet'}\r\n            </p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };  \r\n  \r\n  const handleCompleteRoute = async (routeIndex) => {\r\n    try {\r\n      const routeJobs = routes[selectedDay][routeIndex].jobs;\r\n  \r\n      await Promise.all(\r\n        routeJobs.map(async job => {\r\n          await fetchWithAuth(`/jobs/${job._id}/complete`, 'POST', {});\r\n        })\r\n      );\r\n  \r\n      // Re-fetch the updated jobs and update the state\r\n      await initializeData();\r\n  \r\n      setSuccessMessage(\"Route completed successfully!\");\r\n    } catch (error) {\r\n      console.error('Error completing route:', error);\r\n      setError('Failed to complete the route. Please try again.');\r\n    }\r\n  };  \r\n  \r\n  \r\n  const renderDroppableArea = (id, jobs, isJobPool = false) => {\r\n    const routeIndex = parseInt(id.split('-')[1], 10);\r\n    const route = routes[selectedDay][routeIndex];\r\n  \r\n    return (\r\n      <Droppable droppableId={id}>\r\n        {(provided) => (\r\n          <div\r\n            ref={provided.innerRef}\r\n            {...provided.droppableProps}\r\n            className={`bg-gray-800 p-4 rounded-lg min-h-[200px] ${isJobPool ? 'grid grid-cols-3 gap-4' : 'space-y-2'}`}\r\n          >\r\n            {!isJobPool && (\r\n              <div className=\"mb-4\">\r\n                <select\r\n                  className=\"w-full p-2 bg-gray-700 text-white rounded\"\r\n                  onChange={(e) => assignRoute(routeIndex, e.target.value)}\r\n                  value={route.employee ? `employee-${route.employee._id}` : route.crew ? `crew-${route.crew._id}` : ''}\r\n                  disabled={assigningRoutes[routeIndex]}\r\n                >\r\n                  <option value=\"\">Assign to...</option>\r\n                  <optgroup label=\"Employees\">\r\n                    {employees.map((employee) => (\r\n                      <option key={employee._id} value={`employee-${employee._id}`}>{employee.name}</option>\r\n                    ))}\r\n                  </optgroup>\r\n                  <optgroup label=\"Crews\">\r\n                    {crews.map((crew) => (\r\n                      <option key={crew._id} value={`crew-${crew._id}`}>{crew.name}</option>\r\n                    ))}\r\n                  </optgroup>\r\n                </select>\r\n              </div>\r\n            )}\r\n  \r\n            {jobs.length > 0 ? (\r\n              jobs.map((job, index) => (\r\n                <Draggable key={job._id} draggableId={job._id} index={index}>\r\n                  {(provided) => (\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.draggableProps}\r\n                      {...provided.dragHandleProps}\r\n                    >\r\n                      {renderJobCard(job, !isJobPool, routeIndex, index)}\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))\r\n            ) : (\r\n              <p className=\"text-white text-center\">No jobs available</p>\r\n            )}\r\n  \r\n            {provided.placeholder}\r\n  \r\n            {/* Move Complete Route button to the bottom */}\r\n            {!isJobPool && (\r\n              <div className=\"mt-4 text-right\">\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </Droppable>\r\n    );\r\n  };  \r\n  \r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-900 flex items-center justify-center\">\r\n        <p className=\"text-white text-xl\">Loading...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-900 flex flex-col items-center justify-center space-y-4\">\r\n        <p className=\"text-red-500 text-xl\">{error}</p>\r\n        <button\r\n          onClick={() => window.location.reload()}\r\n          className=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition\"\r\n        >\r\n          Refresh Page\r\n        </button>\r\n      </div>\r\n    );\r\n  }  \r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-900 text-white\">\r\n      <Header />\r\n  \r\n      <main className=\"max-w-7xl mx-auto py-8 px-4\">\r\n  \r\n        {/* Success and Error Messages */}\r\n        {successMessage && (\r\n          <div className=\"bg-green-500 text-white p-4 rounded-lg mb-4\">\r\n            {successMessage}\r\n          </div>\r\n        )}\r\n        {error && (\r\n          <div className=\"bg-red-500 text-white p-4 rounded-lg mb-4\">\r\n            {error}\r\n          </div>\r\n        )}\r\n  \r\n        {/* Navigation for selecting days */}\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <button\r\n            onClick={() => changeSelectedDay(-1)}\r\n            className=\"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\"\r\n          >\r\n            <ChevronLeftIcon className=\"w-6 h-6\" />\r\n          </button>\r\n          <h1 className=\"text-3xl font-bold\">{selectedDay}</h1>\r\n          <button\r\n            onClick={() => changeSelectedDay(1)}\r\n            className=\"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\"\r\n          >\r\n            <ChevronRightIcon className=\"w-6 h-6\" />\r\n          </button>\r\n        </div>\r\n  \r\n        {/* Buttons to cycle routes and add new routes */}\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <button\r\n            onClick={() => cycleVisibleRoutes(-1)}\r\n            className=\"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\"\r\n          >\r\n            <ChevronLeftIcon className=\"w-6 h-6\" />\r\n          </button>\r\n          <button\r\n            onClick={() => setShowRouteNameModal(true)}\r\n            className=\"px-4 py-2 bg-green-500 rounded-md hover:bg-green-600 transition flex items-center space-x-2\"\r\n          >\r\n            <PlusIcon className=\"w-5 h-5\" />\r\n            <span>Add Route</span>\r\n          </button>\r\n          <button\r\n            onClick={() => cycleVisibleRoutes(1)}\r\n            className=\"p-2 bg-blue-500 rounded-md hover:bg-blue-600 transition\"\r\n          >\r\n            <ChevronRightIcon className=\"w-6 h-6\" />\r\n          </button>\r\n        </div>\r\n  \r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          {/* Render Routes */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n            {routes[selectedDay]\r\n              .slice(visibleRoutesRange.start, visibleRoutesRange.end)\r\n              .map((route) => (\r\n                <div key={route.index} className=\"bg-gray-800 p-4 rounded-lg shadow-lg\">\r\n                  <div className=\"flex items-center justify-between mb-4\">\r\n                    <h2 className=\"text-xl font-semibold\">Route {route.index + 1}</h2>\r\n                    <button\r\n                      onClick={() => deleteRoute(route.index)}\r\n                      className=\"p-2 bg-red-500 rounded-md hover:bg-red-600 transition\"\r\n                    >\r\n                      <TrashIcon className=\"w-5 h-5\" />\r\n                    </button>\r\n                  </div>\r\n                  {renderDroppableArea(`route-${route.index}`, route.jobs)}\r\n  \r\n                  {/* Complete Route Button at the bottom of each route */}\r\n                  <div className=\"mt-4 text-right\">\r\n                    <button\r\n                      onClick={() => setConfirmDialog({ isOpen: true, routeIndex: route.index })}\r\n                      className=\"bg-green-500 text-white px-2 py-1 rounded-md hover:bg-green-600 transition\"\r\n                    >\r\n                      Complete Route\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n          </div>\r\n  \r\n          {/* Job Pool */}\r\n          <div className=\"mt-8\">\r\n            <h2 className=\"text-2xl font-semibold mb-4 flex justify-between items-center\">\r\n              Job Pool\r\n              {selectedJobs.length > 0 && (\r\n                <div className=\"flex space-x-4\">\r\n                  <button\r\n                    onClick={() => setSelectedJobs([])}\r\n                    className=\"px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition\"\r\n                  >\r\n                    Clear Selection\r\n                  </button>\r\n                  <button\r\n                    onClick={() => handleCompleteJob(selectedJobs)}\r\n                    className=\"px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition\"\r\n                  >\r\n                    Complete Selected Jobs\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </h2>\r\n            <p className=\"text-sm text-gray-400 mb-2\">\r\n              Click on jobs to select multiple, then drag to a route or complete.\r\n            </p>\r\n  \r\n            {/* Job Color Legend */}\r\n            <div className=\"mt-2 p-2 bg-gray-800 rounded-lg text-white\">\r\n              <h3 className=\"font-bold mb-2\">Job Color Legend</h3>\r\n              <ul className=\"flex space-x-8\">\r\n                <li className=\"flex items-center\">\r\n                  <span className=\"w-4 h-4 inline-block bg-green-600 mr-2\" /> One-time job\r\n                </li>\r\n                <li className=\"flex items-center\">\r\n                  <span className=\"w-4 h-4 inline-block bg-blue-600 mr-2\" /> Weekly\r\n                </li>\r\n                <li className=\"flex items-center\">\r\n                  <span className=\"w-4 h-4 inline-block bg-yellow-600 mr-2\" /> Bi-weekly\r\n                </li>\r\n                <li className=\"flex items-center\">\r\n                  <span className=\"w-4 h-4 inline-block bg-purple-600 mr-2\" /> Monthly\r\n                </li>\r\n              </ul>\r\n            </div>\r\n  \r\n            {renderDroppableArea('jobPool-0', jobPool, true)}\r\n          </div>\r\n        </DragDropContext>\r\n  \r\n        {saving && (\r\n          <div className=\"fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 z-50\">\r\n            <ClipLoader color=\"#ffffff\" loading={saving} size={50} />\r\n            <p className=\"text-white mt-4\">Saving...</p>\r\n          </div>\r\n        )}\r\n  \r\n        {/* Confirmation Dialog for Route Completion */}\r\n        {confirmDialog.isOpen && (\r\n          <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\r\n            <div className=\"bg-gray-800 p-6 rounded-lg text-white shadow-lg\">\r\n              <h3 className=\"text-xl font-semibold\">Confirm Route Completion</h3>\r\n              <p className=\"mt-4\">Are you sure you want to complete all jobs in this route?</p>\r\n              <div className=\"mt-6 flex justify-end space-x-4\">\r\n                <button\r\n                  onClick={() => setConfirmDialog({ isOpen: false, routeIndex: null })}\r\n                  className=\"px-4 py-2 bg-gray-600 rounded-md hover:bg-gray-700\"\r\n                >\r\n                  Cancel\r\n                </button>\r\n                <button\r\n                  onClick={() => {\r\n                    handleCompleteRoute(confirmDialog.routeIndex);\r\n                    setConfirmDialog({ isOpen: false, routeIndex: null }); // Close after confirming\r\n                  }}\r\n                  className=\"px-4 py-2 bg-green-500 rounded-md hover:bg-green-600\"\r\n                >\r\n                  Confirm\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );  \r\n};\r\n\r\nexport default BuildRoutes;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}