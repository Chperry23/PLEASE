{"ast":null,"code":"var _jsxFileName = \"C:\\\\AUTOLAWN\\\\autolawn-frontend\\\\src\\\\pages\\\\RouteMap.js\",\n  _s = $RefreshSig$();\n/* global google */ // This line tells the linter that google is globally available\nimport React, { useState, useEffect } from 'react';\nimport { fetchWithAuth } from '../components/utils';\nimport Header from '../components/Header';\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RouteMap = () => {\n  _s();\n  var _selectedMarker$job$c, _selectedMarker$job$c2, _selectedMarker$job$l;\n  const [routes, setRoutes] = useState([]);\n  const [selectedRouteIndex, setSelectedRouteIndex] = useState(null);\n  const [markers, setMarkers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [mapCenter, setMapCenter] = useState({\n    lat: 37.7749,\n    lng: -122.4194\n  });\n  const [mapZoom, setMapZoom] = useState(12); // Default zoom level\n  const [selectedMarker, setSelectedMarker] = useState(null);\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n  const GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n  useEffect(() => {\n    const fetchData = async () => {\n      console.log('Fetching route, job, and customer data...');\n      try {\n        const routesResponse = await fetchWithAuth('/routes');\n        const jobsResponse = await fetchWithAuth('/jobs');\n        const customersResponse = await fetchWithAuth('/customers');\n        console.log('Routes fetched:', routesResponse);\n        console.log('Jobs fetched:', jobsResponse);\n        console.log('Customers fetched:', customersResponse);\n        const fetchedRoutes = routesResponse.routes || {};\n        const fetchedJobs = jobsResponse || [];\n        const fetchedCustomers = customersResponse || [];\n        processRoutesData(fetchedRoutes, fetchedJobs, fetchedCustomers);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching data:', err);\n        setError('Failed to fetch data. Please try again.');\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const processRoutesData = (fetchedRoutes, fetchedJobs, fetchedCustomers) => {\n    console.log('Processing route data...');\n    const jobMap = {};\n    fetchedJobs.forEach(job => {\n      jobMap[job._id] = job;\n    });\n    const customerMap = {};\n    fetchedCustomers.forEach(customer => {\n      customerMap[customer._id] = customer;\n    });\n    const processedRoutes = [];\n    for (const [day, dayRoutes] of Object.entries(fetchedRoutes)) {\n      dayRoutes.forEach(route => {\n        let fullJobs = [];\n        if (Array.isArray(route.jobs)) {\n          fullJobs = route.jobs.map(job => typeof job === 'string' ? jobMap[job] : job).filter(job => job);\n        } else if (typeof route.jobs === 'object' && route.jobs !== null) {\n          const jobGroups = Object.values(route.jobs).flat();\n          fullJobs = jobGroups.map(job => typeof job === 'string' ? jobMap[job] : job).filter(job => job);\n        }\n        fullJobs = fullJobs.map(job => ({\n          ...job,\n          customer: customerMap[job.customer] || job.customer\n        }));\n        processedRoutes.push({\n          day,\n          ...route,\n          jobs: fullJobs\n        });\n      });\n    }\n    console.log('Processed routes:', processedRoutes);\n    setRoutes(processedRoutes);\n  };\n  const geocodeAddresses = async jobs => {\n    console.log('Geocoding addresses for jobs:', jobs);\n    const markersData = [];\n    const geocoder = new google.maps.Geocoder(); // `google` is now recognized globally\n\n    for (const job of jobs) {\n      var _job$customer, _job$location;\n      const address = ((_job$customer = job.customer) === null || _job$customer === void 0 ? void 0 : _job$customer.address) || ((_job$location = job.location) === null || _job$location === void 0 ? void 0 : _job$location.address);\n      console.log('Geocoding address:', address);\n      if (address) {\n        try {\n          const results = await geocodeAddress(address, geocoder);\n          if (results && results.length > 0) {\n            const location = results[0].geometry.location;\n            console.log('Geocoding successful, location:', location);\n            markersData.push({\n              position: {\n                lat: location.lat(),\n                lng: location.lng()\n              },\n              job\n            });\n          } else {\n            console.warn('No geocoding results found for address:', address);\n          }\n        } catch (err) {\n          console.error('Geocoding error for address:', address, err);\n        }\n      } else {\n        console.warn('No valid address found for job:', job);\n      }\n    }\n    setMarkers(markersData);\n    if (markersData.length > 0) {\n      // Set the map to center on the first marker, and set zoom to 11 (approx 20 miles)\n      setMapCenter(markersData[0].position);\n      setMapZoom(10); // Set zoom to show a 20-mile radius\n    }\n  };\n  const geocodeAddress = (address, geocoder) => {\n    return new Promise((resolve, reject) => {\n      geocoder.geocode({\n        address\n      }, (results, status) => {\n        if (status === 'OK') {\n          resolve(results);\n        } else {\n          reject(`Geocode was not successful for the following reason: ${status}`);\n        }\n      });\n    });\n  };\n  const handleRouteSelection = async event => {\n    const index = event.target.value;\n    console.log('Selected route index:', index);\n    setSelectedRouteIndex(index);\n    const selectedRoute = routes[index];\n    if (selectedRoute) {\n      console.log('Geocoding addresses for selected route...');\n      setLoading(true);\n      await geocodeAddresses(selectedRoute.jobs);\n      setLoading(false);\n    } else {\n      console.log('No selected route.');\n      setMarkers([]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-900 text-gray-200\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold mb-6 text-white\",\n        children: \"Route Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-white text-lg mb-2\",\n          children: \"Select a Route:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: handleRouteSelection,\n          value: selectedRouteIndex || '',\n          className: \"w-full p-2 bg-gray-700 text-white rounded\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- Select Route --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this), routes.map((route, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: index,\n            children: [route.name || `Route ${index + 1}`, \" (\", route.day, \")\"]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LoadScript, {\n        googleMapsApiKey: GOOGLE_MAPS_API_KEY,\n        onLoad: () => {\n          console.log('Google Maps script loaded');\n          setIsMapLoaded(true); // Mark map as loaded only after script is loaded\n        },\n        children: isMapLoaded && /*#__PURE__*/_jsxDEV(GoogleMap, {\n          mapContainerStyle: {\n            height: '600px',\n            width: '100%'\n          },\n          center: mapCenter,\n          zoom: mapZoom // Use the dynamic zoom level\n          ,\n          onLoad: () => console.log('Map loaded'),\n          children: [markers.map((marker, idx) => /*#__PURE__*/_jsxDEV(Marker, {\n            position: marker.position,\n            onClick: () => setSelectedMarker(marker)\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 17\n          }, this)), selectedMarker && /*#__PURE__*/_jsxDEV(InfoWindow, {\n            position: selectedMarker.position,\n            onCloseClick: () => setSelectedMarker(null),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: selectedMarker.job.title || 'Untitled Job'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: ((_selectedMarker$job$c = selectedMarker.job.customer) === null || _selectedMarker$job$c === void 0 ? void 0 : _selectedMarker$job$c.name) || 'No Customer'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: ((_selectedMarker$job$c2 = selectedMarker.job.customer) === null || _selectedMarker$job$c2 === void 0 ? void 0 : _selectedMarker$job$c2.address) || ((_selectedMarker$job$l = selectedMarker.job.location) === null || _selectedMarker$job$l === void 0 ? void 0 : _selectedMarker$job$l.address)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(RouteMap, \"icUpH4GH6BdMFGUHOdV7wcjc4ic=\");\n_c = RouteMap;\nexport default RouteMap;\nvar _c;\n$RefreshReg$(_c, \"RouteMap\");","map":{"version":3,"names":["React","useState","useEffect","fetchWithAuth","Header","GoogleMap","LoadScript","Marker","InfoWindow","jsxDEV","_jsxDEV","RouteMap","_s","_selectedMarker$job$c","_selectedMarker$job$c2","_selectedMarker$job$l","routes","setRoutes","selectedRouteIndex","setSelectedRouteIndex","markers","setMarkers","loading","setLoading","error","setError","mapCenter","setMapCenter","lat","lng","mapZoom","setMapZoom","selectedMarker","setSelectedMarker","isMapLoaded","setIsMapLoaded","GOOGLE_MAPS_API_KEY","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","fetchData","console","log","routesResponse","jobsResponse","customersResponse","fetchedRoutes","fetchedJobs","fetchedCustomers","processRoutesData","err","jobMap","forEach","job","_id","customerMap","customer","processedRoutes","day","dayRoutes","Object","entries","route","fullJobs","Array","isArray","jobs","map","filter","jobGroups","values","flat","push","geocodeAddresses","markersData","geocoder","google","maps","Geocoder","_job$customer","_job$location","address","location","results","geocodeAddress","length","geometry","position","warn","Promise","resolve","reject","geocode","status","handleRouteSelection","event","index","target","value","selectedRoute","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","name","googleMapsApiKey","onLoad","mapContainerStyle","height","width","center","zoom","marker","idx","onClick","onCloseClick","title","_c","$RefreshReg$"],"sources":["C:/AUTOLAWN/autolawn-frontend/src/pages/RouteMap.js"],"sourcesContent":["/* global google */ // This line tells the linter that google is globally available\r\nimport React, { useState, useEffect } from 'react';\r\nimport { fetchWithAuth } from '../components/utils';\r\nimport Header from '../components/Header';\r\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';\r\n\r\nconst RouteMap = () => {\r\n  const [routes, setRoutes] = useState([]);\r\n  const [selectedRouteIndex, setSelectedRouteIndex] = useState(null);\r\n  const [markers, setMarkers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [mapCenter, setMapCenter] = useState({ lat: 37.7749, lng: -122.4194 });\r\n  const [mapZoom, setMapZoom] = useState(12);  // Default zoom level\r\n  const [selectedMarker, setSelectedMarker] = useState(null);\r\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\r\n\r\n  const GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      console.log('Fetching route, job, and customer data...');\r\n      try {\r\n        const routesResponse = await fetchWithAuth('/routes');\r\n        const jobsResponse = await fetchWithAuth('/jobs');\r\n        const customersResponse = await fetchWithAuth('/customers');\r\n\r\n        console.log('Routes fetched:', routesResponse);\r\n        console.log('Jobs fetched:', jobsResponse);\r\n        console.log('Customers fetched:', customersResponse);\r\n\r\n        const fetchedRoutes = routesResponse.routes || {};\r\n        const fetchedJobs = jobsResponse || [];\r\n        const fetchedCustomers = customersResponse || [];\r\n\r\n        processRoutesData(fetchedRoutes, fetchedJobs, fetchedCustomers);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('Error fetching data:', err);\r\n        setError('Failed to fetch data. Please try again.');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const processRoutesData = (fetchedRoutes, fetchedJobs, fetchedCustomers) => {\r\n    console.log('Processing route data...');\r\n    const jobMap = {};\r\n    fetchedJobs.forEach((job) => {\r\n      jobMap[job._id] = job;\r\n    });\r\n\r\n    const customerMap = {};\r\n    fetchedCustomers.forEach((customer) => {\r\n      customerMap[customer._id] = customer;\r\n    });\r\n\r\n    const processedRoutes = [];\r\n\r\n    for (const [day, dayRoutes] of Object.entries(fetchedRoutes)) {\r\n      dayRoutes.forEach((route) => {\r\n        let fullJobs = [];\r\n        if (Array.isArray(route.jobs)) {\r\n          fullJobs = route.jobs.map((job) => (typeof job === 'string' ? jobMap[job] : job)).filter((job) => job);\r\n        } else if (typeof route.jobs === 'object' && route.jobs !== null) {\r\n          const jobGroups = Object.values(route.jobs).flat();\r\n          fullJobs = jobGroups.map((job) => (typeof job === 'string' ? jobMap[job] : job)).filter((job) => job);\r\n        }\r\n\r\n        fullJobs = fullJobs.map((job) => ({\r\n          ...job,\r\n          customer: customerMap[job.customer] || job.customer,\r\n        }));\r\n\r\n        processedRoutes.push({\r\n          day,\r\n          ...route,\r\n          jobs: fullJobs,\r\n        });\r\n      });\r\n    }\r\n\r\n    console.log('Processed routes:', processedRoutes);\r\n    setRoutes(processedRoutes);\r\n  };\r\n\r\n  const geocodeAddresses = async (jobs) => {\r\n    console.log('Geocoding addresses for jobs:', jobs);\r\n    const markersData = [];\r\n    const geocoder = new google.maps.Geocoder();  // `google` is now recognized globally\r\n\r\n    for (const job of jobs) {\r\n      const address = job.customer?.address || job.location?.address;\r\n      console.log('Geocoding address:', address);\r\n\r\n      if (address) {\r\n        try {\r\n          const results = await geocodeAddress(address, geocoder);\r\n          if (results && results.length > 0) {\r\n            const location = results[0].geometry.location;\r\n            console.log('Geocoding successful, location:', location);\r\n            markersData.push({\r\n              position: { lat: location.lat(), lng: location.lng() },\r\n              job,\r\n            });\r\n          } else {\r\n            console.warn('No geocoding results found for address:', address);\r\n          }\r\n        } catch (err) {\r\n          console.error('Geocoding error for address:', address, err);\r\n        }\r\n      } else {\r\n        console.warn('No valid address found for job:', job);\r\n      }\r\n    }\r\n\r\n    setMarkers(markersData);\r\n    if (markersData.length > 0) {\r\n      // Set the map to center on the first marker, and set zoom to 11 (approx 20 miles)\r\n      setMapCenter(markersData[0].position);\r\n      setMapZoom(10);  // Set zoom to show a 20-mile radius\r\n    }\r\n  };\r\n\r\n  const geocodeAddress = (address, geocoder) => {\r\n    return new Promise((resolve, reject) => {\r\n      geocoder.geocode({ address }, (results, status) => {\r\n        if (status === 'OK') {\r\n          resolve(results);\r\n        } else {\r\n          reject(`Geocode was not successful for the following reason: ${status}`);\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  const handleRouteSelection = async (event) => {\r\n    const index = event.target.value;\r\n    console.log('Selected route index:', index);\r\n    setSelectedRouteIndex(index);\r\n    const selectedRoute = routes[index];\r\n    if (selectedRoute) {\r\n      console.log('Geocoding addresses for selected route...');\r\n      setLoading(true);\r\n      await geocodeAddresses(selectedRoute.jobs);\r\n      setLoading(false);\r\n    } else {\r\n      console.log('No selected route.');\r\n      setMarkers([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-900 text-gray-200\">\r\n      <Header />\r\n      <main className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\r\n        <h1 className=\"text-3xl font-bold mb-6 text-white\">Route Map</h1>\r\n        <div className=\"mb-4\">\r\n          <label className=\"block text-white text-lg mb-2\">Select a Route:</label>\r\n          <select\r\n            onChange={handleRouteSelection}\r\n            value={selectedRouteIndex || ''}\r\n            className=\"w-full p-2 bg-gray-700 text-white rounded\"\r\n          >\r\n            <option value=\"\">-- Select Route --</option>\r\n            {routes.map((route, index) => (\r\n              <option key={index} value={index}>\r\n                {route.name || `Route ${index + 1}`} ({route.day})\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <LoadScript\r\n          googleMapsApiKey={GOOGLE_MAPS_API_KEY}\r\n          onLoad={() => {\r\n            console.log('Google Maps script loaded');\r\n            setIsMapLoaded(true);  // Mark map as loaded only after script is loaded\r\n          }}\r\n        >\r\n          {isMapLoaded && (\r\n            <GoogleMap\r\n              mapContainerStyle={{ height: '600px', width: '100%' }}\r\n              center={mapCenter}\r\n              zoom={mapZoom}  // Use the dynamic zoom level\r\n              onLoad={() => console.log('Map loaded')}\r\n            >\r\n              {markers.map((marker, idx) => (\r\n                <Marker\r\n                  key={idx}\r\n                  position={marker.position}\r\n                  onClick={() => setSelectedMarker(marker)}\r\n                />\r\n              ))}\r\n              {selectedMarker && (\r\n                <InfoWindow\r\n                  position={selectedMarker.position}\r\n                  onCloseClick={() => setSelectedMarker(null)}\r\n                >\r\n                  <div>\r\n                    <h3>{selectedMarker.job.title || 'Untitled Job'}</h3>\r\n                    <p>{selectedMarker.job.customer?.name || 'No Customer'}</p>\r\n                    <p>{selectedMarker.job.customer?.address || selectedMarker.job.location?.address}</p>\r\n                  </div>\r\n                </InfoWindow>\r\n              )}\r\n            </GoogleMap>\r\n          )}\r\n        </LoadScript>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RouteMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}